{
 ***************************************************************************
 *                                                                         *
 *   This source is free software; you can redistribute it and/or modify   *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This code is distributed in the hope that it will be useful, but      *
 *   WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *
 *   General Public License for more details.                              *
 *                                                                         *
 *   A copy of the GNU General Public License is available on the World    *
 *   Wide Web at <http://www.gnu.org/copyleft/gpl.html>. You can also      *
 *   obtain it by writing to the Free Software Foundation,                 *
 *   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.        *
 *                                                                         *
 ***************************************************************************
}

unit PhpLib;

interface

{$IFDEF FPC}

const

  E_ERROR = 1;
  E_WARNING = 2;
  E_NOTICE = 8;
  E_ALL = 8191;

  php = 'You can not call PHP functions from executables';

{$ENDIF}

{$IFDEF FPC}

function php_base64_decode(const AString: string): string;
function php_file_get_contents(const AFileName: string): string;
function php_htmlspecialchars(const AString: string): string;
function php_htmlspecialchars_decode(const AString: string): string;
function php_str_ireplace(const AFrom, ATo, AString: string): string;
function php_str_replace(const AFrom, ATo, AString: string): string;
function php_mysql_connect(const AServer, AUser, APass: string): variant;
function php_array_keys(const AArray: variant): variant;
function php_basename(const AFileName: string): string;
function php_ltrim(const AString: string): string;
function php_rtrim(const AString: string): string;
function php_str_pad(const AString: string; const ALength: integer): string;
function php_trim(const AString: string): string;
procedure php_include_once(const A: string);

function php_float(): integer;
function php_getMessage(): string;
function php_getCode(): variant;
function php_getFile(): string;
function php_getLine(): integer;
function php_getTrace(): variant;
function php_getTraceAsString(): string;
function php_getSeverity(): integer;
function php_current(): variant;
function php_key(): variant;
procedure php_next();
procedure php_rewind();
function php_valid(): boolean;
function php_offsetExists(const _offset: variant): boolean;
function php_offsetGet(const _offset: variant): variant;
procedure php_offsetSet(const _offset: variant; const _value: variant);
procedure php_offsetUnset(const _offset: variant);
function php_serialize(): string;
procedure php_unserialize(const _serialized: string);
function php_call(const _newthis: variant): variant;
function php_getReturn(): variant;
function php_send(const _value: variant): variant;
function php_throw(const _exception: variant): variant;
function php_apc_add(const _key: string; const _var: variant; const _ttl: integer): boolean;
function php_apc_add(const _values: variant; const _unused: variant; const _ttl: integer): variant;
function php_apc_bin_dump(const _files: variant; const _user_vars: variant): string;
function php_apc_bin_dumpfile(const _files: variant; const _user_vars: variant; const _filename: string; const _flags: integer; const _context: variant): integer;
function php_apc_bin_load(const _data: string; const _flags: integer): boolean;
function php_apc_bin_loadfile(const _filename: string; const _context: variant; const _flags: integer): boolean;
function php_apc_cache_info(const _cache_type: string; const _limited: boolean): variant;
function php_apc_cas(const _key: string; const _old: integer; const _new: integer): boolean;
function php_apc_clear_cache(const _cache_type: string): boolean;
function php_apc_compile_file(const _filename: string; const _atomic: boolean): variant;
function php_apc_dec(const _key: string; const _step: integer; var _success: boolean): integer;
function php_apc_define_constants(const _key: string; const _constants: variant; const _case_sensitive: boolean): boolean;
function php_apc_delete_file(const _keys: variant): variant;
function php_apc_delete(const _key: string): variant;
function php_apc_exists(const _keys: variant): variant;
function php_apc_fetch(const _key: variant; var _success: boolean): variant;
function php_apc_inc(const _key: string; const _step: integer; var _success: boolean): integer;
function php_apc_load_constants(const _key: string; const _case_sensitive: boolean): boolean;
function php_apc_sma_info(const _limited: boolean): variant;
function php_apc_store(const _key: string; const _var: variant; const _ttl: integer): boolean;
function php_apc_store(const _values: variant; const _unused: variant; const _ttl: integer): variant;
function php_getTotalCount(): integer;
function php_getTotalHits(): integer;
function php_getTotalSize(): integer;
function php_apcu_add(const _key: string; const _var: variant; const _ttl: integer): boolean;
function php_apcu_add(const _values: variant; const _unused: variant; const _ttl: integer): variant;
function php_apcu_cache_info(const _limited: boolean): variant;
function php_apcu_cas(const _key: string; const _old: integer; const _new: integer): boolean;
function php_apcu_clear_cache(): boolean;
function php_apcu_dec(const _key: string; const _step: integer; var _success: boolean): integer;
function php_apcu_delete(const _key: string): variant;
function php_apcu_entry(const _key: string; const _generator: variant; const _ttl: integer): variant;
function php_apcu_exists(const _keys: variant): variant;
function php_apcu_fetch(const _key: variant; var _success: boolean): variant;
function php_apcu_inc(const _key: string; const _step: integer; var _success: boolean): integer;
function php_apcu_sma_info(const _limited: boolean): variant;
function php_apcu_store(const _key: string; const _var: variant; const _ttl: integer): boolean;
function php_apcu_store(const _values: variant; const _unused: variant; const _ttl: integer): variant;
function php_apd_breakpoint(const _debug_level: integer): boolean;
function php_apd_callstack(): variant;
procedure php_apd_clunk(const _warning: string; const _delimiter: string);
function php_apd_continue(const _debug_level: integer): boolean;
procedure php_apd_croak(const _warning: string; const _delimiter: string);
procedure php_apd_dump_function_table();
function php_apd_dump_persistent_resources(): variant;
function php_apd_dump_regular_resources(): variant;
function php_apd_echo(const _output: string): boolean;
function php_apd_get_active_symbols(): variant;
function php_apd_set_pprof_trace(const _dump_directory: string): string;
function php_apd_set_session_trace_socket(const _tcp_server: string; const _socket_type: integer; const _port: integer; const _debug_level: integer): boolean;
procedure php_apd_set_session_trace(const _debug_level: integer; const _dump_directory: string);
procedure php_apd_set_session(const _debug_level: integer);
function php_override_function(const _function_name: string; const _function_args: string; const _function_code: string): boolean;
function php_rename_function(const _original_name: string; const _new_name: string): boolean;
function php_bcompiler_load_exe(const _filename: string): boolean;
function php_bcompiler_load(const _filename: string): boolean;
function php_bcompiler_parse_class(const _class: string; const _callback: string): boolean;
function php_bcompiler_read(const _filehandle: variant): boolean;
function php_bcompiler_write_class(const _filehandle: variant; const _className: string; const _extends: string): boolean;
function php_bcompiler_write_constant(const _filehandle: variant; const _constantName: string): boolean;
function php_bcompiler_write_exe_footer(const _filehandle: variant; const _startpos: integer): boolean;
function php_bcompiler_write_file(const _filehandle: variant; const _filename: string): boolean;
function php_bcompiler_write_footer(const _filehandle: variant): boolean;
function php_bcompiler_write_function(const _filehandle: variant; const _functionName: string): boolean;
function php_bcompiler_write_functions_from_file(const _filehandle: variant; const _fileName: string): boolean;
function php_bcompiler_write_header(const _filehandle: variant; const _write_ver: string): boolean;
function php_bcompiler_write_included_filename(const _filehandle: variant; const _filename: string): boolean;
function php_blenc_encrypt(const _plaintext: string; const _encodedfile: string; const _encryption_key: string): string;
function php_debug_backtrace(const _options: integer; const _limit: integer): variant;
procedure php_debug_print_backtrace(const _options: integer; const _limit: integer);
procedure php_error_clear_last();
function php_error_get_last(): variant;
function php_error_log(const _message: string; const _message_type: integer; const _destination: string; const _extra_headers: string): boolean;
function php_error_reporting(const _level: integer): integer;
function php_restore_error_handler(): boolean;
function php_restore_exception_handler(): boolean;
function php_set_error_handler(const _error_handler: variant; const _error_types: integer): variant;
function php_handler(const _errno: integer; const _errstr: string; const _errfile: string; const _errline: integer; const _errcontext: variant): boolean;
procedure php_handler(const _ex: variant);
function php_trigger_error(const _error_msg: string; const _error_type: integer): boolean;
function php_inclued_get_data(): variant;
function php_opcache_compile_file(const _file: string): boolean;
function php_opcache_get_configuration(): variant;
function php_opcache_get_status(const _get_scripts: boolean): variant;
function php_opcache_invalidate(const _script: string; const _force: boolean): boolean;
function php_opcache_is_script_cached(const _file: string): boolean;
function php_opcache_reset(): boolean;
procedure php_flush();
procedure php_ob_clean();
function php_ob_end_clean(): boolean;
function php_ob_end_flush(): boolean;
procedure php_ob_flush();
function php_ob_get_clean(): string;
function php_ob_get_contents(): string;
function php_ob_get_flush(): string;
function php_ob_get_length(): integer;
function php_ob_get_level(): integer;
function php_ob_get_status(const _full_status: boolean): variant;
function php_ob_gzhandler(const _buffer: string; const _mode: integer): string;
procedure php_ob_implicit_flush(const _flag: integer);
function php_ob_list_handlers(): variant;
function php_ob_start(const _output_callback: variant; const _chunk_size: integer; const _flags: integer): boolean;
function php_handler(const _buffer: string; const _phase: integer): string;
function php_output_add_rewrite_var(const _name: string; const _value: string): boolean;
function php_output_reset_rewrite_vars(): boolean;
function php_assert_options(const _what: integer; const _value: variant): variant;
function php_assert(const _assertion: variant; const _description: string): boolean;
function php_assert(const _assertion: variant; const _exception: variant): boolean;
function php_cli_get_process_title(): string;
function php_cli_set_process_title(const _title: string): boolean;
function php_dl(const _library: string): boolean;
function php_extension_loaded(const _name: string): boolean;
function php_gc_collect_cycles(): integer;
procedure php_gc_disable();
procedure php_gc_enable();
function php_gc_enabled(): boolean;
function php_gc_mem_caches(): integer;
function php_get_cfg_var(const _option: string): string;
function php_get_current_user(): string;
function php_get_defined_constants(const _categorize: boolean): variant;
function php_get_extension_funcs(const _module_name: string): variant;
function php_get_include_path(): string;
function php_get_included_files(): variant;
function php_get_loaded_extensions(const _zend_extensions: boolean): variant;
function php_get_magic_quotes_gpc(): boolean;
function php_get_magic_quotes_runtime(): boolean;
function php_get_resources(const _type: string): variant;
function php_getenv(const _varname: string): string;
function php_getlastmod(): integer;
function php_getmygid(): integer;
function php_getmyinode(): integer;
function php_getmypid(): integer;
function php_getmyuid(): integer;
function php_getopt(const _options: string; const _longopts: variant): variant;
function php_getrusage(const _who: integer): variant;
function php_ini_get_all(const _extension: string; const _details: boolean): variant;
function php_ini_get(const _varname: string): string;
procedure php_ini_restore(const _varname: string);
function php_ini_set(const _varname: string; const _newvalue: string): string;
function php_memory_get_peak_usage(const _real_usage: boolean): integer;
function php_memory_get_usage(const _real_usage: boolean): integer;
function php_php_ini_loaded_file(): string;
function php_php_ini_scanned_files(): string;
function php_php_logo_guid(): string;
function php_php_sapi_name(): string;
function php_php_uname(const _mode: string): string;
function php_phpcredits(const _flag: integer): boolean;
function php_phpinfo(const _what: integer): boolean;
function php_phpversion(const _extension: string): string;
function php_putenv(const _setting: string): boolean;
procedure php_restore_include_path();
function php_set_include_path(const _new_include_path: string): string;
function php_set_magic_quotes_runtime(const _new_setting: boolean): boolean;
function php_set_time_limit(const _seconds: integer): boolean;
function php_sys_get_temp_dir(): string;
function php_version_compare(const _version1: string; const _version2: string; const _operator: string): variant;
function php_zend_logo_guid(): string;
function php_zend_thread_id(): integer;
function php_zend_version(): string;
function php_runkit_class_adopt(const _classname: string; const _parentname: string): boolean;
function php_runkit_class_emancipate(const _classname: string): boolean;
function php_runkit_constant_add(const _constname: string; const _value: variant): boolean;
function php_runkit_constant_redefine(const _constname: string; const _newvalue: variant): boolean;
function php_runkit_constant_remove(const _constname: string): boolean;
function php_runkit_function_add(const _funcname: string; const _arglist: string; const _code: string): boolean;
function php_runkit_function_copy(const _funcname: string; const _targetname: string): boolean;
function php_runkit_function_redefine(const _funcname: string; const _arglist: string; const _code: string): boolean;
function php_runkit_function_remove(const _funcname: string): boolean;
function php_runkit_function_rename(const _funcname: string; const _newname: string): boolean;
function php_runkit_import(const _filename: string; const _flags: integer): boolean;
function php_runkit_lint_file(const _filename: string): boolean;
function php_runkit_lint(const _code: string): boolean;
function php_runkit_method_add(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean;
function php_runkit_method_copy(const _dClass: string; const _dMethod: string; const _sClass: string; const _sMethod: string): boolean;
function php_runkit_method_redefine(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean;
function php_runkit_method_remove(const _classname: string; const _methodname: string): boolean;
function php_runkit_method_rename(const _classname: string; const _methodname: string; const _newname: string): boolean;
function php_runkit_return_value_used(): boolean;
function php_runkit_sandbox_output_handler(const _sandbox: variant; const _callback: variant): variant;
function php_runkit_superglobals(): variant;
procedure php_uopz_backup(const _class: string; const _function: string);
procedure php_uopz_backup(const _function: string);
procedure php_uopz_compose(const _name: string; const _classes: variant; const _methods: variant; const _properties: variant; const _flags: integer);
procedure php_uopz_delete(const _class: string; const _function: string);
procedure php_uopz_delete(const _function: string);
procedure php_uopz_extend(const _class: string; const _parent: string);
function php_uopz_flags(const _class: string; const _function: string; const _flags: integer): integer;
function php_uopz_flags(const _function: string; const _flags: integer): integer;
procedure php_uopz_function(const _class: string; const _function: string; const _handler: variant; const _modifiers: integer);
procedure php_uopz_function(const _function: string; const _handler: variant; const _modifiers: integer);
procedure php_uopz_implement(const _class: string; const _interface: string);
procedure php_uopz_overload(const _opcode: integer; const _callable: variant);
procedure php_uopz_redefine(const _class: string; const _constant: string; const _value: variant);
procedure php_uopz_redefine(const _constant: string; const _value: variant);
procedure php_uopz_rename(const _class: string; const _function: string; const _rename: string);
procedure php_uopz_rename(const _function: string; const _rename: string);
procedure php_uopz_restore(const _class: string; const _function: string);
procedure php_uopz_restore(const _function: string);
procedure php_uopz_undefine(const _class: string; const _constant: string);
procedure php_uopz_undefine(const _constant: string);
function php_count(): integer;
function php_wincache_fcache_fileinfo(const _summaryonly: boolean): variant;
function php_wincache_fcache_meminfo(): variant;
function php_wincache_lock(const _key: string; const _isglobal: boolean): boolean;
function php_wincache_ocache_fileinfo(const _summaryonly: boolean): variant;
function php_wincache_ocache_meminfo(): variant;
function php_wincache_refresh_if_changed(const _files: variant): boolean;
function php_wincache_rplist_fileinfo(const _summaryonly: boolean): variant;
function php_wincache_rplist_meminfo(): variant;
function php_wincache_scache_info(const _summaryonly: boolean): variant;
function php_wincache_scache_meminfo(): variant;
function php_wincache_ucache_add(const _key: string; const _value: variant; const _ttl: integer): boolean;
function php_wincache_ucache_add(const _values: variant; const _unused: variant; const _ttl: integer): boolean;
function php_wincache_ucache_cas(const _key: string; const _old_value: integer; const _new_value: integer): boolean;
function php_wincache_ucache_clear(): boolean;
function php_wincache_ucache_dec(const _key: string; const _dec_by: integer; var _success: boolean): variant;
function php_wincache_ucache_delete(const _key: variant): boolean;
function php_wincache_ucache_exists(const _key: string): boolean;
function php_wincache_ucache_get(const _key: variant; var _success: boolean): variant;
function php_wincache_ucache_inc(const _key: string; const _inc_by: integer; var _success: boolean): variant;
function php_wincache_ucache_info(const _summaryonly: boolean; const _key: string): variant;
function php_wincache_ucache_meminfo(): variant;
function php_wincache_ucache_set(const _key: variant; const _value: variant; const _ttl: integer): boolean;
function php_wincache_unlock(const _key: string): boolean;
function php_xhprof_disable(): variant;
procedure php_xhprof_enable(const _flags: integer; const _options: variant);
function php_xhprof_sample_disable(): variant;
procedure php_xhprof_sample_enable();
function php_id3_get_frame_long_name(const _frameId: string): string;
function php_id3_get_frame_short_name(const _frameId: string): string;
function php_id3_get_genre_id(const _genre: string): integer;
function php_id3_get_genre_list(): variant;
function php_id3_get_genre_name(const _genre_id: integer): string;
function php_id3_get_tag(const _filename: string; const _version: integer): variant;
function php_id3_get_version(const _filename: string): integer;
function php_id3_remove_tag(const _filename: string; const _version: integer): boolean;
function php_id3_set_tag(const _filename: string; const _tag: variant; const _version: integer): boolean;
function php_getAlbum(): string;
function php_getArtist(): string;
function php_getComment(): string;
function php_getGenre(): string;
function php_getTitle(): string;
function php_getTrack(): integer;
function php_getYear(): integer;
function php_isEmpty(): boolean;
function php_addFrame(const _frame: variant): boolean;
function php_getFrameList(): variant;
function php_getSize(): integer;
function php_getDescription(): string;
function php_getMimeType(): string;
function php_getType(): integer;
function php_savePicture(const _filename: string): boolean;
function php_getMimeType(const _type: string): string;
procedure php_setPicture(const _filename: string);
procedure php_setType(const _type: integer);
function php_openal_buffer_create(): variant;
function php_openal_buffer_data(const _buffer: variant; const _format: integer; const _data: string; const _freq: integer): boolean;
function php_openal_buffer_destroy(const _buffer: variant): boolean;
function php_openal_buffer_get(const _buffer: variant; const _property: integer): integer;
function php_openal_buffer_loadwav(const _buffer: variant; const _wavfile: string): boolean;
function php_openal_context_create(const _device: variant): variant;
function php_openal_context_current(const _context: variant): boolean;
function php_openal_context_destroy(const _context: variant): boolean;
function php_openal_context_process(const _context: variant): boolean;
function php_openal_context_suspend(const _context: variant): boolean;
function php_openal_device_close(const _device: variant): boolean;
function php_openal_device_open(const _device_desc: string): variant;
function php_openal_listener_get(const _property: integer): variant;
function php_openal_listener_set(const _property: integer; const _setting: variant): boolean;
function php_openal_source_create(): variant;
function php_openal_source_destroy(const _source: variant): boolean;
function php_openal_source_get(const _source: variant; const _property: integer): variant;
function php_openal_source_pause(const _source: variant): boolean;
function php_openal_source_play(const _source: variant): boolean;
function php_openal_source_rewind(const _source: variant): boolean;
function php_openal_source_set(const _source: variant; const _property: integer; const _setting: variant): boolean;
function php_openal_source_stop(const _source: variant): boolean;
function php_openal_stream(const _source: variant; const _format: integer; const _rate: integer): variant;
function php_kadm5_chpass_principal(const _handle: variant; const _principal: string; const _password: string): boolean;
function php_kadm5_create_principal(const _handle: variant; const _principal: string; const _password: string; const _options: variant): boolean;
function php_kadm5_delete_principal(const _handle: variant; const _principal: string): boolean;
function php_kadm5_destroy(const _handle: variant): boolean;
function php_kadm5_flush(const _handle: variant): boolean;
function php_kadm5_get_policies(const _handle: variant): variant;
function php_kadm5_get_principal(const _handle: variant; const _principal: string): variant;
function php_kadm5_get_principals(const _handle: variant): variant;
function php_kadm5_init_with_password(const _admin_server: string; const _realm: string; const _principal: string; const _password: string): variant;
function php_kadm5_modify_principal(const _handle: variant; const _principal: string; const _options: variant): boolean;
function php_radius_acct_open(): variant;
function php_radius_add_server(const _radius_handle: variant; const _hostname: string; const _port: integer; const _secret: string; const _timeout: integer; const _max_tries: integer): boolean;
function php_radius_auth_open(): variant;
function php_radius_close(const _radius_handle: variant): boolean;
function php_radius_config(const _radius_handle: variant; const _file: string): boolean;
function php_radius_create_request(const _radius_handle: variant; const _type: integer): boolean;
function php_radius_cvt_addr(const _data: string): string;
function php_radius_cvt_int(const _data: string): integer;
function php_radius_cvt_string(const _data: string): string;
function php_radius_demangle_mppe_key(const _radius_handle: variant; const _mangled: string): string;
function php_radius_demangle(const _radius_handle: variant; const _mangled: string): string;
function php_radius_get_attr(const _radius_handle: variant): variant;
function php_radius_get_tagged_attr_data(const _data: string): string;
function php_radius_get_tagged_attr_tag(const _data: string): integer;
function php_radius_get_vendor_attr(const _data: string): variant;
function php_radius_put_addr(const _radius_handle: variant; const _type: integer; const _addr: string; const _options: integer; const _tag: integer): boolean;
function php_radius_put_attr(const _radius_handle: variant; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean;
function php_radius_put_int(const _radius_handle: variant; const _type: integer; const _value: integer; const _options: integer; const _tag: integer): boolean;
function php_radius_put_string(const _radius_handle: variant; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean;
function php_radius_put_vendor_addr(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _addr: string): boolean;
function php_radius_put_vendor_attr(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean;
function php_radius_put_vendor_int(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _value: integer; const _options: integer; const _tag: integer): boolean;
function php_radius_put_vendor_string(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean;
function php_radius_request_authenticator(const _radius_handle: variant): string;
function php_radius_salt_encrypt_attr(const _radius_handle: variant; const _data: string): string;
function php_radius_send_request(const _radius_handle: variant): integer;
function php_radius_server_secret(const _radius_handle: variant): string;
function php_radius_strerror(const _radius_handle: variant): string;
function php_ncurses_addch(const _ch: integer): integer;
function php_ncurses_addchnstr(const _s: string; const _n: integer): integer;
function php_ncurses_addchstr(const _s: string): integer;
function php_ncurses_addnstr(const _s: string; const _n: integer): integer;
function php_ncurses_addstr(const _text: string): integer;
function php_ncurses_assume_default_colors(const _fg: integer; const _bg: integer): integer;
function php_ncurses_attroff(const _attributes: integer): integer;
function php_ncurses_attron(const _attributes: integer): integer;
function php_ncurses_attrset(const _attributes: integer): integer;
function php_ncurses_baudrate(): integer;
function php_ncurses_beep(): integer;
function php_ncurses_bkgd(const _attrchar: integer): integer;
procedure php_ncurses_bkgdset(const _attrchar: integer);
function php_ncurses_border(const _left: integer; const _right: integer; const _top: integer; const _bottom: integer; const _tl_corner: integer; const _tr_corner: integer; const _bl_corner: integer; const _br_corner: integer): integer;
function php_ncurses_bottom_panel(const _panel: variant): integer;
function php_ncurses_can_change_color(): boolean;
function php_ncurses_cbreak(): boolean;
function php_ncurses_clear(): boolean;
function php_ncurses_clrtobot(): boolean;
function php_ncurses_clrtoeol(): boolean;
function php_ncurses_color_content(const _color: integer; var _r: integer; var _g: integer; var _b: integer): integer;
function php_ncurses_color_set(const _pair: integer): integer;
function php_ncurses_curs_set(const _visibility: integer): integer;
function php_ncurses_def_prog_mode(): boolean;
function php_ncurses_def_shell_mode(): boolean;
function php_ncurses_define_key(const _definition: string; const _keycode: integer): integer;
function php_ncurses_del_panel(const _panel: variant): boolean;
function php_ncurses_delay_output(const _milliseconds: integer): integer;
function php_ncurses_delch(): boolean;
function php_ncurses_deleteln(): boolean;
function php_ncurses_delwin(const _window: variant): boolean;
function php_ncurses_doupdate(): boolean;
function php_ncurses_echo(): boolean;
function php_ncurses_echochar(const _character: integer): integer;
function php_ncurses_end(): integer;
function php_ncurses_erase(): boolean;
function php_ncurses_erasechar(): string;
procedure php_ncurses_filter();
function php_ncurses_flash(): boolean;
function php_ncurses_flushinp(): boolean;
function php_ncurses_getch(): integer;
procedure php_ncurses_getmaxyx(const _window: variant; var _y: integer; var _x: integer);
function php_ncurses_getmouse(var _mevent: variant): boolean;
procedure php_ncurses_getyx(const _window: variant; var _y: integer; var _x: integer);
function php_ncurses_halfdelay(const _tenth: integer): integer;
function php_ncurses_has_colors(): boolean;
function php_ncurses_has_ic(): boolean;
function php_ncurses_has_il(): boolean;
function php_ncurses_has_key(const _keycode: integer): integer;
function php_ncurses_hide_panel(const _panel: variant): integer;
function php_ncurses_hline(const _charattr: integer; const _n: integer): integer;
function php_ncurses_inch(): string;
function php_ncurses_init_color(const _color: integer; const _r: integer; const _g: integer; const _b: integer): integer;
function php_ncurses_init_pair(const _pair: integer; const _fg: integer; const _bg: integer): integer;
procedure php_ncurses_init();
function php_ncurses_insch(const _character: integer): integer;
function php_ncurses_insdelln(const _count: integer): integer;
function php_ncurses_insertln(): integer;
function php_ncurses_insstr(const _text: string): integer;
function php_ncurses_instr(var _buffer: string): integer;
function php_ncurses_isendwin(): boolean;
function php_ncurses_keyok(const _keycode: integer; const _enable: boolean): integer;
function php_ncurses_keypad(const _window: variant; const _bf: boolean): integer;
function php_ncurses_killchar(): string;
function php_ncurses_longname(): string;
function php_ncurses_meta(const _window: variant): integer;
function php_ncurses_mouse_trafo(var _y: integer; var _x: integer; const _toscreen: boolean): boolean;
function php_ncurses_mouseinterval(const _milliseconds: integer): integer;
function php_ncurses_mousemask(const _newmask: integer; var _oldmask: integer): integer;
function php_ncurses_move_panel(const _panel: variant; const _startx: integer; const _starty: integer): integer;
function php_ncurses_move(const _y: integer; const _x: integer): integer;
function php_ncurses_mvaddch(const _y: integer; const _x: integer; const _c: integer): integer;
function php_ncurses_mvaddchnstr(const _y: integer; const _x: integer; const _s: string; const _n: integer): integer;
function php_ncurses_mvaddchstr(const _y: integer; const _x: integer; const _s: string): integer;
function php_ncurses_mvaddnstr(const _y: integer; const _x: integer; const _s: string; const _n: integer): integer;
function php_ncurses_mvaddstr(const _y: integer; const _x: integer; const _s: string): integer;
function php_ncurses_mvcur(const _old_y: integer; const _old_x: integer; const _new_y: integer; const _new_x: integer): integer;
function php_ncurses_mvdelch(const _y: integer; const _x: integer): integer;
function php_ncurses_mvgetch(const _y: integer; const _x: integer): integer;
function php_ncurses_mvhline(const _y: integer; const _x: integer; const _attrchar: integer; const _n: integer): integer;
function php_ncurses_mvinch(const _y: integer; const _x: integer): integer;
function php_ncurses_mvvline(const _y: integer; const _x: integer; const _attrchar: integer; const _n: integer): integer;
function php_ncurses_mvwaddstr(const _window: variant; const _y: integer; const _x: integer; const _text: string): integer;
function php_ncurses_napms(const _milliseconds: integer): integer;
function php_ncurses_new_panel(const _window: variant): variant;
function php_ncurses_newpad(const _rows: integer; const _cols: integer): variant;
function php_ncurses_newwin(const _rows: integer; const _cols: integer; const _y: integer; const _x: integer): variant;
function php_ncurses_nl(): boolean;
function php_ncurses_nocbreak(): boolean;
function php_ncurses_noecho(): boolean;
function php_ncurses_nonl(): boolean;
procedure php_ncurses_noqiflush();
function php_ncurses_noraw(): boolean;
function php_ncurses_pair_content(const _pair: integer; var _f: integer; var _b: integer): integer;
function php_ncurses_panel_above(const _panel: variant): variant;
function php_ncurses_panel_below(const _panel: variant): variant;
function php_ncurses_panel_window(const _panel: variant): variant;
function php_ncurses_pnoutrefresh(const _pad: variant; const _pminrow: integer; const _pmincol: integer; const _sminrow: integer; const _smincol: integer; const _smaxrow: integer; const _smaxcol: integer): integer;
function php_ncurses_prefresh(const _pad: variant; const _pminrow: integer; const _pmincol: integer; const _sminrow: integer; const _smincol: integer; const _smaxrow: integer; const _smaxcol: integer): integer;
function php_ncurses_putp(const _text: string): integer;
procedure php_ncurses_qiflush();
function php_ncurses_raw(): boolean;
function php_ncurses_refresh(const _ch: integer): integer;
function php_ncurses_replace_panel(const _panel: variant; const _window: variant): integer;
function php_ncurses_reset_prog_mode(): integer;
function php_ncurses_reset_shell_mode(): integer;
function php_ncurses_resetty(): boolean;
function php_ncurses_savetty(): boolean;
function php_ncurses_scr_dump(const _filename: string): integer;
function php_ncurses_scr_init(const _filename: string): integer;
function php_ncurses_scr_restore(const _filename: string): integer;
function php_ncurses_scr_set(const _filename: string): integer;
function php_ncurses_scrl(const _count: integer): integer;
function php_ncurses_show_panel(const _panel: variant): integer;
function php_ncurses_slk_attr(): integer;
function php_ncurses_slk_attroff(const _intarg: integer): integer;
function php_ncurses_slk_attron(const _intarg: integer): integer;
function php_ncurses_slk_attrset(const _intarg: integer): integer;
function php_ncurses_slk_clear(): boolean;
function php_ncurses_slk_color(const _intarg: integer): integer;
function php_ncurses_slk_init(const _format: integer): boolean;
function php_ncurses_slk_noutrefresh(): boolean;
function php_ncurses_slk_refresh(): integer;
function php_ncurses_slk_restore(): integer;
function php_ncurses_slk_set(const _labelnr: integer; const _label: string; const _format: integer): boolean;
function php_ncurses_slk_touch(): integer;
function php_ncurses_standend(): integer;
function php_ncurses_standout(): integer;
function php_ncurses_start_color(): integer;
function php_ncurses_termattrs(): boolean;
function php_ncurses_termname(): string;
procedure php_ncurses_timeout(const _millisec: integer);
function php_ncurses_top_panel(const _panel: variant): integer;
function php_ncurses_typeahead(const _fd: integer): integer;
function php_ncurses_ungetch(const _keycode: integer): integer;
function php_ncurses_ungetmouse(const _mevent: variant): boolean;
procedure php_ncurses_update_panels();
function php_ncurses_use_default_colors(): boolean;
procedure php_ncurses_use_env(const _flag: boolean);
function php_ncurses_use_extended_names(const _flag: boolean): integer;
function php_ncurses_vidattr(const _intarg: integer): integer;
function php_ncurses_vline(const _charattr: integer; const _n: integer): integer;
function php_ncurses_waddch(const _window: variant; const _ch: integer): integer;
function php_ncurses_waddstr(const _window: variant; const _str: string; const _n: integer): integer;
function php_ncurses_wattroff(const _window: variant; const _attrs: integer): integer;
function php_ncurses_wattron(const _window: variant; const _attrs: integer): integer;
function php_ncurses_wattrset(const _window: variant; const _attrs: integer): integer;
function php_ncurses_wborder(const _window: variant; const _left: integer; const _right: integer; const _top: integer; const _bottom: integer; const _tl_corner: integer; const _tr_corner: integer; const _bl_corner: integer; const _br_corner: integer): integer;
function php_ncurses_wclear(const _window: variant): integer;
function php_ncurses_wcolor_set(const _window: variant; const _color_pair: integer): integer;
function php_ncurses_werase(const _window: variant): integer;
function php_ncurses_wgetch(const _window: variant): integer;
function php_ncurses_whline(const _window: variant; const _charattr: integer; const _n: integer): integer;
function php_ncurses_wmouse_trafo(const _window: variant; var _y: integer; var _x: integer; const _toscreen: boolean): boolean;
function php_ncurses_wmove(const _window: variant; const _y: integer; const _x: integer): integer;
function php_ncurses_wnoutrefresh(const _window: variant): integer;
function php_ncurses_wrefresh(const _window: variant): integer;
function php_ncurses_wstandend(const _window: variant): integer;
function php_ncurses_wstandout(const _window: variant): integer;
function php_ncurses_wvline(const _window: variant; const _charattr: integer; const _n: integer): integer;
procedure php_newt_bell();
function php_newt_button_bar(var _buttons: variant): variant;
function php_newt_button(const _left: integer; const _top: integer; const _text: string): variant;
function php_newt_centered_window(const _width: integer; const _height: integer; const _title: string): integer;
function php_newt_checkbox_get_value(const _checkbox: variant): string;
procedure php_newt_checkbox_set_flags(const _checkbox: variant; const _flags: integer; const _sense: integer);
procedure php_newt_checkbox_set_value(const _checkbox: variant; const _value: string);
procedure php_newt_checkbox_tree_add_item(const _checkboxtree: variant; const _text: string; const _data: variant; const _flags: integer; const _index: integer);
function php_newt_checkbox_tree_find_item(const _checkboxtree: variant; const _data: variant): variant;
function php_newt_checkbox_tree_get_current(const _checkboxtree: variant): variant;
function php_newt_checkbox_tree_get_entry_value(const _checkboxtree: variant; const _data: variant): string;
function php_newt_checkbox_tree_get_multi_selection(const _checkboxtree: variant; const _seqnum: string): variant;
function php_newt_checkbox_tree_get_selection(const _checkboxtree: variant): variant;
function php_newt_checkbox_tree_multi(const _left: integer; const _top: integer; const _height: integer; const _seq: string; const _flags: integer): variant;
procedure php_newt_checkbox_tree_set_current(const _checkboxtree: variant; const _data: variant);
procedure php_newt_checkbox_tree_set_entry_value(const _checkboxtree: variant; const _data: variant; const _value: string);
procedure php_newt_checkbox_tree_set_entry(const _checkboxtree: variant; const _data: variant; const _text: string);
procedure php_newt_checkbox_tree_set_width(const _checkbox_tree: variant; const _width: integer);
function php_newt_checkbox_tree(const _left: integer; const _top: integer; const _height: integer; const _flags: integer): variant;
function php_newt_checkbox(const _left: integer; const _top: integer; const _text: string; const _def_value: string; const _seq: string): variant;
procedure php_newt_clear_key_buffer();
procedure php_newt_cls();
function php_newt_compact_button(const _left: integer; const _top: integer; const _text: string): variant;
procedure php_newt_component_add_callback(const _component: variant; const _func_name: variant; const _data: variant);
procedure php_newt_component_takes_focus(const _component: variant; const _takes_focus: boolean);
function php_newt_create_grid(const _cols: integer; const _rows: integer): variant;
procedure php_newt_cursor_off();
procedure php_newt_cursor_on();
procedure php_newt_delay(const _microseconds: integer);
procedure php_newt_draw_form(const _form: variant);
procedure php_newt_draw_root_text(const _left: integer; const _top: integer; const _text: string);
function php_newt_entry_get_value(const _entry: variant): string;
procedure php_newt_entry_set_filter(const _entry: variant; const _filter: variant; const _data: variant);
procedure php_newt_entry_set_flags(const _entry: variant; const _flags: integer; const _sense: integer);
procedure php_newt_entry_set(const _entry: variant; const _value: string; const _cursor_at_end: boolean);
function php_newt_entry(const _left: integer; const _top: integer; const _width: integer; const _init_value: string; const _flags: integer): variant;
function php_newt_finished(): integer;
procedure php_newt_form_add_component(const _form: variant; const _component: variant);
procedure php_newt_form_add_components(const _form: variant; const _components: variant);
procedure php_newt_form_add_hot_key(const _form: variant; const _key: integer);
procedure php_newt_form_destroy(const _form: variant);
function php_newt_form_get_current(const _form: variant): variant;
procedure php_newt_form_run(const _form: variant; var _exit_struct: variant);
procedure php_newt_form_set_background(const _from: variant; const _background: integer);
procedure php_newt_form_set_height(const _form: variant; const _height: integer);
procedure php_newt_form_set_size(const _form: variant);
procedure php_newt_form_set_timer(const _form: variant; const _milliseconds: integer);
procedure php_newt_form_set_width(const _form: variant; const _width: integer);
procedure php_newt_form_watch_fd(const _form: variant; const _stream: variant; const _flags: integer);
function php_newt_form(const _vert_bar: variant; const _help: string; const _flags: integer): variant;
procedure php_newt_get_screen_size(var _cols: integer; var _rows: integer);
procedure php_newt_grid_add_components_to_form(const _grid: variant; const _form: variant; const _recurse: boolean);
function php_newt_grid_basic_window(const _text: variant; const _middle: variant; const _buttons: variant): variant;
procedure php_newt_grid_free(const _grid: variant; const _recurse: boolean);
procedure php_newt_grid_get_size(const _grid: variant; var _width: integer; var _height: integer);
function php_newt_grid_h_close_stacked(const _element1_type: integer; const _element1: variant): variant;
function php_newt_grid_h_stacked(const _element1_type: integer; const _element1: variant): variant;
procedure php_newt_grid_place(const _grid: variant; const _left: integer; const _top: integer);
procedure php_newt_grid_set_field(const _grid: variant; const _col: integer; const _row: integer; const _type: integer; const _val: variant; const _pad_left: integer; const _pad_top: integer; const _pad_right: integer; const _pad_bottom: integer; const _anchor: integer; const _flags: integer);
function php_newt_grid_simple_window(const _text: variant; const _middle: variant; const _buttons: variant): variant;
function php_newt_grid_v_close_stacked(const _element1_type: integer; const _element1: variant): variant;
function php_newt_grid_v_stacked(const _element1_type: integer; const _element1: variant): variant;
procedure php_newt_grid_wrapped_window_at(const _grid: variant; const _title: string; const _left: integer; const _top: integer);
procedure php_newt_grid_wrapped_window(const _grid: variant; const _title: string);
function php_newt_init(): integer;
procedure php_newt_label_set_text(const _label: variant; const _text: string);
function php_newt_label(const _left: integer; const _top: integer; const _text: string): variant;
procedure php_newt_listbox_append_entry(const _listbox: variant; const _text: string; const _data: variant);
procedure php_newt_listbox_clear_selection(const _listbox: variant);
procedure php_newt_listbox_clear(const _listobx: variant);
procedure php_newt_listbox_delete_entry(const _listbox: variant; const _key: variant);
function php_newt_listbox_get_current(const _listbox: variant): string;
function php_newt_listbox_get_selection(const _listbox: variant): variant;
procedure php_newt_listbox_insert_entry(const _listbox: variant; const _text: string; const _data: variant; const _key: variant);
function php_newt_listbox_item_count(const _listbox: variant): integer;
procedure php_newt_listbox_select_item(const _listbox: variant; const _key: variant; const _sense: integer);
procedure php_newt_listbox_set_current_by_key(const _listbox: variant; const _key: variant);
procedure php_newt_listbox_set_current(const _listbox: variant; const _num: integer);
procedure php_newt_listbox_set_data(const _listbox: variant; const _num: integer; const _data: variant);
procedure php_newt_listbox_set_entry(const _listbox: variant; const _num: integer; const _text: string);
procedure php_newt_listbox_set_width(const _listbox: variant; const _width: integer);
function php_newt_listbox(const _left: integer; const _top: integer; const _height: integer; const _flags: integer): variant;
function php_newt_listitem_get_data(const _item: variant): variant;
procedure php_newt_listitem_set(const _item: variant; const _text: string);
function php_newt_listitem(const _left: integer; const _top: integer; const _text: string; const _is_default: boolean; const _prev_item: variant; const _data: variant; const _flags: integer): variant;
function php_newt_open_window(const _left: integer; const _top: integer; const _width: integer; const _height: integer; const _title: string): integer;
procedure php_newt_pop_help_line();
procedure php_newt_pop_window();
procedure php_newt_push_help_line(const _text: string);
function php_newt_radio_get_current(const _set_member: variant): variant;
function php_newt_radiobutton(const _left: integer; const _top: integer; const _text: string; const _is_default: boolean; const _prev_button: variant): variant;
procedure php_newt_redraw_help_line();
function php_newt_reflow_text(const _text: string; const _width: integer; const _flex_down: integer; const _flex_up: integer; var _actual_width: integer; var _actual_height: integer): string;
procedure php_newt_refresh();
procedure php_newt_resize_screen(const _redraw: boolean);
procedure php_newt_resume();
function php_newt_run_form(const _form: variant): variant;
procedure php_newt_scale_set(const _scale: variant; const _amount: integer);
function php_newt_scale(const _left: integer; const _top: integer; const _width: integer; const _full_value: integer): variant;
procedure php_newt_scrollbar_set(const _scrollbar: variant; const _where: integer; const _total: integer);
procedure php_newt_set_help_callback(const _function: variant);
procedure php_newt_set_suspend_callback(const _function: variant; const _data: variant);
procedure php_newt_suspend();
function php_newt_textbox_get_num_lines(const _textbox: variant): integer;
function php_newt_textbox_reflowed(const _left: integer; const _top: integer; const _width: integer; const _flex_down: integer; const _flex_up: integer; const _flags: integer): variant;
procedure php_newt_textbox_set_height(const _textbox: variant; const _height: integer);
procedure php_newt_textbox_set_text(const _textbox: variant; const _text: string);
function php_newt_textbox(const _left: integer; const _top: integer; const _width: integer; const _height: integer; const _flags: integer): variant;
function php_newt_vertical_scrollbar(const _left: integer; const _top: integer; const _height: integer; const _normal_colorset: integer; const _thumb_colorset: integer): variant;
procedure php_newt_wait_for_key();
function php_newt_win_choice(const _title: string; const _button1_text: string; const _button2_text: string; const _format: string; const _args: variant): integer;
function php_newt_win_entries(const _title: string; const _text: string; const _suggested_width: integer; const _flex_down: integer; const _flex_up: integer; const _data_width: integer; var _items: variant; const _button1: string): integer;
function php_newt_win_menu(const _title: string; const _text: string; const _suggestedWidth: integer; const _flexDown: integer; const _flexUp: integer; const _maxListHeight: integer; const _items: variant; var _listItem: integer; const _button1: string): integer;
procedure php_newt_win_message(const _title: string; const _button_text: string; const _format: string; const _args: variant);
procedure php_newt_win_messagev(const _title: string; const _button_text: string; const _format: string; const _args: variant);
function php_newt_win_ternary(const _title: string; const _button1_text: string; const _button2_text: string; const _button3_text: string; const _format: string; const _args: variant): integer;
function php_readline_add_history(const _line: string): boolean;
function php_readline_callback_handler_install(const _prompt: string; const _callback: variant): boolean;
function php_readline_callback_handler_remove(): boolean;
procedure php_readline_callback_read_char();
function php_readline_clear_history(): boolean;
function php_readline_completion_function(const _function: variant): boolean;
function php_readline_info(const _varname: string; const _newvalue: string): variant;
function php_readline_list_history(): variant;
procedure php_readline_on_new_line();
function php_readline_read_history(const _filename: string): boolean;
procedure php_readline_redisplay();
function php_readline_write_history(const _filename: string): boolean;
function php_readline(const _prompt: string): string;
function php_bzclose(const _bz: variant): integer;
function php_bzcompress(const _source: string; const _blocksize: integer; const _workfactor: integer): variant;
function php_bzdecompress(const _source: string; const _small: integer): variant;
function php_bzerrno(const _bz: variant): integer;
function php_bzerror(const _bz: variant): variant;
function php_bzerrstr(const _bz: variant): string;
function php_bzflush(const _bz: variant): boolean;
function php_bzopen(const _file: variant; const _mode: string): variant;
function php_bzread(const _bz: variant; const _length: integer): string;
function php_bzwrite(const _bz: variant; const _data: string; const _length: integer): integer;
function php_lzf_compress(const _data: string): string;
function php_lzf_decompress(const _data: string): string;
function php_lzf_optimized_for(): integer;
procedure php_addEmptyDir(const _dirname: string);
procedure php_addFile(const _file: string; const _localname: string);
procedure php_addFromString(const _localname: string; const _contents: string);
function php_apiVersion(): string;
function php_buildFromDirectory(const _base_dir: string; const _regex: string): variant;
function php_buildFromIterator(const _iter: variant; const _base_directory: string): variant;
function php_canCompress(const _type: integer): boolean;
function php_canWrite(): boolean;
function php_compress(const _compression: integer; const _extension: string): variant;
function php_compressAllFilesBZIP2(): boolean;
function php_compressAllFilesGZ(): boolean;
procedure php_compressFiles(const _compression: integer);
function php_copy(const _oldfile: string; const _newfile: string): boolean;
function php_createDefaultStub(const _indexfile: string; const _webindexfile: string): string;
function php_decompress(const _extension: string): variant;
function php_decompressFiles(): boolean;
function php_delMetadata(): boolean;
function php_delete(const _entry: string): boolean;
function php_extractTo(const _pathto: string; const _files: variant; const _overwrite: boolean): boolean;
function php_getMetadata(): variant;
function php_getModified(): boolean;
function php_getSignature(): variant;
function php_getStub(): string;
function php_getSupportedCompression(): variant;
function php_getSupportedSignatures(): variant;
function php_getVersion(): string;
function php_hasMetadata(): boolean;
procedure php_interceptFileFuncs();
function php_isBuffering(): boolean;
function php_isCompressed(): variant;
function php_isFileFormat(const _format: integer): boolean;
function php_isValidPharFilename(const _filename: string; const _executable: boolean): boolean;
function php_isWritable(): boolean;
function php_loadPhar(const _filename: string; const _alias: string): boolean;
function php_mapPhar(const _alias: string; const _dataoffset: integer): boolean;
procedure php_mount(const _pharpath: string; const _externalpath: string);
procedure php_mungServer(const _munglist: variant);
function php_offsetExists(const _offset: string): boolean;
function php_offsetGet(const _offset: string): integer;
procedure php_offsetSet(const _offset: string; const _value: string);
function php_offsetUnset(const _offset: string): boolean;
function php_running(const _retphar: boolean): string;
function php_setAlias(const _alias: string): boolean;
function php_setDefaultStub(const _index: string; const _webindex: string): boolean;
procedure php_setMetadata(const _metadata: variant);
procedure php_setSignatureAlgorithm(const _sigtype: integer; const _privatekey: string);
function php_setStub(const _stub: string; const _len: integer): boolean;
procedure php_startBuffering();
procedure php_stopBuffering();
function php_uncompressAllFiles(): boolean;
function php_unlinkArchive(const _archive: string): boolean;
procedure php_webPhar(const _alias: string; const _index: string; const _f404: string; const _mimetypes: variant; const _rewrites: variant);
procedure php_chmod(const _permissions: integer);
function php_compress(const _compression: integer): boolean;
function php_decompress(): boolean;
function php_getCRC32(): integer;
function php_getCompressedSize(): integer;
function php_getPharFlags(): integer;
function php_isCRCChecked(): boolean;
function php_isCompressed(const _compression_type: integer): boolean;
function php_isCompressedBZIP2(): boolean;
function php_isCompressedGZ(): boolean;
function php_setCompressedBZIP2(): boolean;
function php_setCompressedGZ(): boolean;
function php_setUncompressed(): boolean;
function php_rar_wrapper_cache_stats(): string;
function php_close(): boolean;
function php_getEntries(): variant;
function php_isBroken(): boolean;
function php_isSolid(): boolean;
function php_setAllowBroken(const _allow_broken: boolean): boolean;
function php_rar_close(const _rarfile: variant): boolean;
function php_rar_comment_get(const _rarfile: variant): string;
function php_rar_list(const _rarfile: variant): variant;
function php_rar_broken_is(const _rarfile: variant): boolean;
function php_rar_solid_is(const _rarfile: variant): boolean;
function php_rar_allow_broken_set(const _rarfile: variant; const _allow_broken: boolean): boolean;
function php_extract(const _dir: string; const _filepath: string; const _password: string; const _extended_data: boolean): boolean;
function php_getAttr(): integer;
function php_getCrc(): string;
function php_getFileTime(): string;
function php_getHostOs(): integer;
function php_getMethod(): integer;
function php_getName(): string;
function php_getPackedSize(): integer;
function php_getStream(const _password: string): variant;
function php_getUnpackedSize(): integer;
function php_isDirectory(): boolean;
function php_isEncrypted(): boolean;
function php_isUsingExceptions(): boolean;
procedure php_setUsingExceptions(const _using_exceptions: boolean);
function php_addFile(const _filename: string; const _localname: string; const _start: integer; const _length: integer): boolean;
function php_addGlob(const _pattern: string; const _flags: integer; const _options: variant): boolean;
function php_addPattern(const _pattern: string; const _path: string; const _options: variant): boolean;
function php_deleteIndex(const _index: integer): boolean;
function php_deleteName(const _name: string): boolean;
function php_extractTo(const _destination: string; const _entries: variant): boolean;
function php_getArchiveComment(const _flags: integer): string;
function php_getCommentIndex(const _index: integer; const _flags: integer): string;
function php_getCommentName(const _name: string; const _flags: integer): string;
function php_GetExternalAttributesIndex(const _index: integer; var _opsys: integer; var _attr: integer; const _flags: integer): boolean;
function php_getExternalAttributesName(const _name: string; var _opsys: integer; var _attr: integer; const _flags: integer): boolean;
function php_getFromIndex(const _index: integer; const _length: integer; const _flags: integer): string;
function php_getFromName(const _name: string; const _length: integer; const _flags: integer): string;
function php_getNameIndex(const _index: integer; const _flags: integer): string;
function php_getStatusString(): string;
function php_locateName(const _name: string; const _flags: integer): integer;
function php_open(const _filename: string; const _flags: integer): variant;
function php_renameIndex(const _index: integer; const _newname: string): boolean;
function php_renameName(const _name: string; const _newname: string): boolean;
function php_setArchiveComment(const _comment: string): boolean;
function php_setCommentIndex(const _index: integer; const _comment: string): boolean;
function php_setCommentName(const _name: string; const _comment: string): boolean;
function php_setCompressionIndex(const _index: integer; const _comp_method: integer; const _comp_flags: integer): boolean;
function php_setCompressionName(const _name: string; const _comp_method: integer; const _comp_flags: integer): boolean;
function php_setExternalAttributesIndex(const _index: integer; const _opsys: integer; const _attr: integer; const _flags: integer): boolean;
function php_setExternalAttributesName(const _name: string; const _opsys: integer; const _attr: integer; const _flags: integer): boolean;
function php_setPassword(const _password: string): boolean;
function php_statIndex(const _index: integer; const _flags: integer): variant;
function php_statName(const _name: string; const _flags: integer): variant;
function php_unchangeAll(): boolean;
function php_unchangeArchive(): boolean;
function php_unchangeIndex(const _index: integer): boolean;
function php_unchangeName(const _name: string): boolean;
procedure php_zip_close(const _zip: variant);
function php_zip_entry_close(const _zip_entry: variant): boolean;
function php_zip_entry_compressedsize(const _zip_entry: variant): integer;
function php_zip_entry_compressionmethod(const _zip_entry: variant): string;
function php_zip_entry_filesize(const _zip_entry: variant): integer;
function php_zip_entry_name(const _zip_entry: variant): string;
function php_zip_entry_open(const _zip: variant; const _zip_entry: variant; const _mode: string): boolean;
function php_zip_entry_read(const _zip_entry: variant; const _length: integer): string;
function php_zip_open(const _filename: string): variant;
function php_zip_read(const _zip: variant): variant;
function php_gzclose(const _zp: variant): boolean;
function php_gzcompress(const _data: string; const _level: integer; const _encoding: integer): string;
function php_gzdecode(const _data: string; const _length: integer): string;
function php_gzdeflate(const _data: string; const _level: integer; const _encoding: integer): string;
function php_gzencode(const _data: string; const _level: integer; const _encoding_mode: integer): string;
function php_gzeof(const _zp: variant): integer;
function php_gzfile(const _filename: string; const _use_include_path: integer): variant;
function php_gzgetc(const _zp: variant): string;
function php_gzgets(const _zp: variant; const _length: integer): string;
function php_gzgetss(const _zp: variant; const _length: integer; const _allowable_tags: string): string;
function php_gzinflate(const _data: string; const _length: integer): string;
function php_gzopen(const _filename: string; const _mode: string; const _use_include_path: integer): variant;
function php_gzpassthru(const _zp: variant): integer;
function php_gzread(const _zp: variant; const _length: integer): string;
function php_gzrewind(const _zp: variant): boolean;
function php_gzseek(const _zp: variant; const _offset: integer; const _whence: integer): integer;
function php_gztell(const _zp: variant): integer;
function php_gzuncompress(const _data: string; const _length: integer): string;
function php_gzwrite(const _zp: variant; const _string: string; const _length: integer): integer;
function php_readgzfile(const _filename: string; const _use_include_path: integer): integer;
function php_zlib_decode(const _data: string; const _max_decoded_len: string): string;
function php_zlib_encode(const _data: string; const _encoding: string; const _level: string): string;
function php_zlib_get_coding_type(): string;
function php_m_checkstatus(const _conn: variant; const _identifier: integer): integer;
function php_m_completeauthorizations(const _conn: variant; var _array: integer): integer;
function php_m_connect(const _conn: variant): integer;
function php_m_connectionerror(const _conn: variant): string;
function php_m_deletetrans(const _conn: variant; const _identifier: integer): boolean;
function php_m_destroyconn(const _conn: variant): boolean;
procedure php_m_destroyengine();
function php_m_getcell(const _conn: variant; const _identifier: integer; const _column: string; const _row: integer): string;
function php_m_getcellbynum(const _conn: variant; const _identifier: integer; const _column: integer; const _row: integer): string;
function php_m_getcommadelimited(const _conn: variant; const _identifier: integer): string;
function php_m_getheader(const _conn: variant; const _identifier: integer; const _column_num: integer): string;
function php_m_initconn(): variant;
function php_m_initengine(const _location: string): integer;
function php_m_iscommadelimited(const _conn: variant; const _identifier: integer): integer;
function php_m_maxconntimeout(const _conn: variant; const _secs: integer): boolean;
function php_m_monitor(const _conn: variant): integer;
function php_m_numcolumns(const _conn: variant; const _identifier: integer): integer;
function php_m_numrows(const _conn: variant; const _identifier: integer): integer;
function php_m_parsecommadelimited(const _conn: variant; const _identifier: integer): integer;
function php_m_responsekeys(const _conn: variant; const _identifier: integer): variant;
function php_m_responseparam(const _conn: variant; const _identifier: integer; const _key: string): string;
function php_m_returnstatus(const _conn: variant; const _identifier: integer): integer;
function php_m_setblocking(const _conn: variant; const _tf: integer): integer;
function php_m_setdropfile(const _conn: variant; const _directory: string): integer;
function php_m_setip(const _conn: variant; const _host: string; const _port: integer): integer;
function php_m_setssl_cafile(const _conn: variant; const _cafile: string): integer;
function php_m_setssl_files(const _conn: variant; const _sslkeyfile: string; const _sslcertfile: string): integer;
function php_m_setssl(const _conn: variant; const _host: string; const _port: integer): integer;
function php_m_settimeout(const _conn: variant; const _seconds: integer): integer;
function php_m_sslcert_gen_hash(const _filename: string): string;
function php_m_transactionssent(const _conn: variant): integer;
function php_m_transinqueue(const _conn: variant): integer;
function php_m_transkeyval(const _conn: variant; const _identifier: integer; const _key: string; const _value: string): integer;
function php_m_transnew(const _conn: variant): integer;
function php_m_transsend(const _conn: variant; const _identifier: integer): integer;
function php_m_uwait(const _microsecs: integer): integer;
function php_m_validateidentifier(const _conn: variant; const _tf: integer): integer;
function php_m_verifyconnection(const _conn: variant; const _tf: integer): boolean;
function php_m_verifysslcert(const _conn: variant; const _tf: integer): boolean;
function php_calcul_hmac(const _clent: string; const _siretcode: string; const _price: string; const _reference: string; const _validity: string; const _taxation: string; const _devise: string; const _language: string): string;
function php_calculhmac(const _clent: string; const _data: string): string;
function php_nthmac(const _clent: string; const _data: string): string;
function php_crack_check(const _dictionary: variant; const _password: string): boolean;
function php_crack_check(const _password: string; const _username: string; const _gecos: string; const _dictionary: variant): boolean;
function php_crack_closedict(const _dictionary: variant): boolean;
function php_crack_getlastmessage(): string;
function php_crack_opendict(const _dictionary: string): variant;
function php_random_bytes(const _length: integer): string;
function php_random_int(const _min: integer; const _max: integer): integer;
function php_hash_algos(): variant;
function php_hash_copy(const _context: variant): variant;
function php_hash_equals(const _known_string: string; const _user_string: string): boolean;
function php_hash_file(const _algo: string; const _filename: string; const _raw_output: boolean): string;
function php_hash_final(const _context: variant; const _raw_output: boolean): string;
function php_hash_hmac_file(const _algo: string; const _filename: string; const _key: string; const _raw_output: boolean): string;
function php_hash_hmac(const _algo: string; const _data: string; const _key: string; const _raw_output: boolean): string;
function php_hash_init(const _algo: string; const _options: integer; const _key: string): variant;
function php_hash_pbkdf2(const _algo: string; const _password: string; const _salt: string; const _iterations: integer; const _length: integer; const _raw_output: boolean): string;
function php_hash_update_file(const _hcontext: variant; const _filename: string; const _scontext: variant): boolean;
function php_hash_update_stream(const _context: variant; const _handle: variant; const _length: integer): integer;
function php_hash_update(const _context: variant; const _data: string): boolean;
function php_hash(const _algo: string; const _data: string; const _raw_output: boolean): string;
function php_mcrypt_cbc(const _cipher: integer; const _key: string; const _data: string; const _mode: integer; const _iv: string): string;
function php_mcrypt_cbc(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string;
function php_mcrypt_cfb(const _cipher: integer; const _key: string; const _data: string; const _mode: integer; const _iv: string): string;
function php_mcrypt_cfb(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string;
function php_mcrypt_create_iv(const _size: integer; const _source: integer): string;
function php_mcrypt_decrypt(const _cipher: string; const _key: string; const _data: string; const _mode: string; const _iv: string): string;
function php_mcrypt_ecb(const _cipher: integer; const _key: string; const _data: string; const _mode: integer): string;
function php_mcrypt_ecb(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string;
function php_mcrypt_enc_get_algorithms_name(const _td: variant): string;
function php_mcrypt_enc_get_block_size(const _td: variant): integer;
function php_mcrypt_enc_get_iv_size(const _td: variant): integer;
function php_mcrypt_enc_get_key_size(const _td: variant): integer;
function php_mcrypt_enc_get_modes_name(const _td: variant): string;
function php_mcrypt_enc_get_supported_key_sizes(const _td: variant): variant;
function php_mcrypt_enc_is_block_algorithm_mode(const _td: variant): boolean;
function php_mcrypt_enc_is_block_algorithm(const _td: variant): boolean;
function php_mcrypt_enc_is_block_mode(const _td: variant): boolean;
function php_mcrypt_enc_self_test(const _td: variant): integer;
function php_mcrypt_encrypt(const _cipher: string; const _key: string; const _data: string; const _mode: string; const _iv: string): string;
function php_mcrypt_generic_deinit(const _td: variant): boolean;
function php_mcrypt_generic_end(const _td: variant): boolean;
function php_mcrypt_generic_init(const _td: variant; const _key: string; const _iv: string): integer;
function php_mcrypt_generic(const _td: variant; const _data: string): string;
function php_mcrypt_get_block_size(const _cipher: integer): integer;
function php_mcrypt_get_block_size(const _cipher: string; const _mode: string): integer;
function php_mcrypt_get_cipher_name(const _cipher: integer): string;
function php_mcrypt_get_cipher_name(const _cipher: string): string;
function php_mcrypt_get_iv_size(const _cipher: string; const _mode: string): integer;
function php_mcrypt_get_key_size(const _cipher: integer): integer;
function php_mcrypt_get_key_size(const _cipher: string; const _mode: string): integer;
function php_mcrypt_list_algorithms(const _lib_dir: string): variant;
function php_mcrypt_list_modes(const _lib_dir: string): variant;
function php_mcrypt_module_close(const _td: variant): boolean;
function php_mcrypt_module_get_algo_block_size(const _algorithm: string; const _lib_dir: string): integer;
function php_mcrypt_module_get_algo_key_size(const _algorithm: string; const _lib_dir: string): integer;
function php_mcrypt_module_get_supported_key_sizes(const _algorithm: string; const _lib_dir: string): variant;
function php_mcrypt_module_is_block_algorithm_mode(const _mode: string; const _lib_dir: string): boolean;
function php_mcrypt_module_is_block_algorithm(const _algorithm: string; const _lib_dir: string): boolean;
function php_mcrypt_module_is_block_mode(const _mode: string; const _lib_dir: string): boolean;
function php_mcrypt_module_open(const _algorithm: string; const _algorithm_directory: string; const _mode: string; const _mode_directory: string): variant;
function php_mcrypt_module_self_test(const _algorithm: string; const _lib_dir: string): boolean;
function php_mcrypt_ofb(const _cipher: integer; const _key: string; const _data: string; const _mode: integer; const _iv: string): string;
function php_mcrypt_ofb(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string;
function php_mdecrypt_generic(const _td: variant; const _data: string): string;
function php_mhash_count(): integer;
function php_mhash_get_block_size(const _hash: integer): integer;
function php_mhash_get_hash_name(const _hash: integer): string;
function php_mhash_keygen_s2k(const _hash: integer; const _password: string; const _salt: string; const _bytes: integer): string;
function php_mhash(const _hash: integer; const _data: string; const _key: string): string;
function php_openssl_cipher_iv_length(const _method: string): integer;
function php_openssl_csr_export_to_file(const _csr: variant; const _outfilename: string; const _notext: boolean): boolean;
function php_openssl_csr_export(const _csr: variant; var _out: string; const _notext: boolean): boolean;
function php_openssl_csr_get_public_key(const _csr: variant; const _use_shortnames: boolean): variant;
function php_openssl_csr_get_subject(const _csr: variant; const _use_shortnames: boolean): variant;
function php_openssl_csr_new(const _dn: variant; var _privkey: variant; const _configargs: variant; const _extraattribs: variant): variant;
function php_openssl_csr_sign(const _csr: variant; const _cacert: variant; const _priv_key: variant; const _days: integer; const _configargs: variant; const _serial: integer): variant;
function php_openssl_decrypt(const _data: string; const _method: string; const _password: string; const _options: integer; const _iv: string): string;
function php_openssl_dh_compute_key(const _pub_key: string; const _dh_key: variant): string;
function php_openssl_digest(const _data: string; const _method: string; const _raw_output: boolean): string;
function php_openssl_encrypt(const _data: string; const _method: string; const _password: string; const _options: integer; const _iv: string): string;
function php_openssl_error_string(): string;
procedure php_openssl_free_key(const _key_identifier: variant);
function php_openssl_get_cert_locations(): variant;
function php_openssl_get_cipher_methods(const _aliases: boolean): variant;
function php_openssl_get_md_methods(const _aliases: boolean): variant;
function php_openssl_open(const _sealed_data: string; var _open_data: string; const _env_key: string; const _priv_key_id: variant; const _method: string): boolean;
function php_openssl_pbkdf2(const _password: string; const _salt: string; const _key_length: integer; const _iterations: integer; const _digest_algorithm: string): string;
function php_openssl_pkcs12_export_to_file(const _x509: variant; const _filename: string; const _priv_key: variant; const _pass: string; const _args: variant): boolean;
function php_openssl_pkcs12_export(const _x509: variant; var _out: string; const _priv_key: variant; const _pass: string; const _args: variant): boolean;
function php_openssl_pkcs12_read(const _pkcs12: string; var _certs: variant; const _pass: string): boolean;
function php_openssl_pkcs7_decrypt(const _infilename: string; const _outfilename: string; const _recipcert: variant; const _recipkey: variant): boolean;
function php_openssl_pkcs7_encrypt(const _infile: string; const _outfile: string; const _recipcerts: variant; const _headers: variant; const _flags: integer; const _cipherid: integer): boolean;
function php_openssl_pkcs7_sign(const _infilename: string; const _outfilename: string; const _signcert: variant; const _privkey: variant; const _headers: variant; const _flags: integer; const _extracerts: string): boolean;
function php_openssl_pkcs7_verify(const _filename: string; const _flags: integer; const _outfilename: string; const _cainfo: variant; const _extracerts: string; const _content: string): variant;
function php_openssl_pkey_export_to_file(const _key: variant; const _outfilename: string; const _passphrase: string; const _configargs: variant): boolean;
function php_openssl_pkey_export(const _key: variant; var _out: string; const _passphrase: string; const _configargs: variant): boolean;
procedure php_openssl_pkey_free(const _key: variant);
function php_openssl_pkey_get_details(const _key: variant): variant;
function php_openssl_pkey_get_private(const _key: variant; const _passphrase: string): variant;
function php_openssl_pkey_get_public(const _certificate: variant): variant;
function php_openssl_pkey_new(const _configargs: variant): variant;
function php_openssl_private_decrypt(const _data: string; var _decrypted: string; const _key: variant; const _padding: integer): boolean;
function php_openssl_private_encrypt(const _data: string; var _crypted: string; const _key: variant; const _padding: integer): boolean;
function php_openssl_public_decrypt(const _data: string; var _decrypted: string; const _key: variant; const _padding: integer): boolean;
function php_openssl_public_encrypt(const _data: string; var _crypted: string; const _key: variant; const _padding: integer): boolean;
function php_openssl_random_pseudo_bytes(const _length: integer; var _crypto_strong: boolean): string;
function php_openssl_seal(const _data: string; var _sealed_data: string; var _env_keys: variant; const _pub_key_ids: variant; const _method: string): integer;
function php_openssl_sign(const _data: string; var _signature: string; const _priv_key_id: variant; const _signature_alg: variant): boolean;
function php_openssl_spki_export_challenge(var _spkac: string): string;
function php_openssl_spki_export(var _spkac: string): string;
function php_openssl_spki_new(var _privkey: variant; var _challenge: string; const _algorithm: integer): string;
function php_openssl_spki_verify(var _spkac: string): string;
function php_openssl_verify(const _data: string; const _signature: string; const _pub_key_id: variant; const _signature_alg: variant): integer;
function php_openssl_x509_check_private_key(const _cert: variant; const _key: variant): boolean;
function php_openssl_x509_checkpurpose(const _x509cert: variant; const _purpose: integer; const _cainfo: variant): integer;
function php_openssl_x509_export_to_file(const _x509: variant; const _outfilename: string; const _notext: boolean): boolean;
function php_openssl_x509_export(const _x509: variant; var _output: string; const _notext: boolean): boolean;
function php_openssl_x509_fingerprint(const _x509: variant; const _hash_algorithm: string; const _raw_output: boolean): boolean;
procedure php_openssl_x509_free(const _x509cert: variant);
function php_openssl_x509_parse(const _x509cert: variant; const _shortnames: boolean): variant;
function php_openssl_x509_read(const _x509certdata: variant): variant;
function php_password_get_info(const _hash: string): variant;
function php_password_hash(const _password: string; const _algo: integer; const _options: variant): string;
function php_password_needs_rehash(const _hash: string; const _algo: integer; const _options: variant): boolean;
function php_password_verify(const _password: string; const _hash: string): boolean;
procedure php_dba_close(const _handle: variant);
function php_dba_delete(const _key: string; const _handle: variant): boolean;
function php_dba_exists(const _key: string; const _handle: variant): boolean;
function php_dba_fetch(const _key: string; const _handle: variant): string;
function php_dba_fetch(const _key: string; const _skip: integer; const _handle: variant): string;
function php_dba_firstkey(const _handle: variant): string;
function php_dba_handlers(const _full_info: boolean): variant;
function php_dba_insert(const _key: string; const _value: string; const _handle: variant): boolean;
function php_dba_key_split(const _key: variant): variant;
function php_dba_list(): variant;
function php_dba_nextkey(const _handle: variant): string;
function php_dba_open(const _path: string; const _mode: string; const _handler: string): variant;
function php_dba_optimize(const _handle: variant): boolean;
function php_dba_popen(const _path: string; const _mode: string; const _handler: string): variant;
function php_dba_replace(const _key: string; const _value: string; const _handle: variant): boolean;
function php_dba_sync(const _handle: variant): boolean;
function php_dbx_close(const _link_identifier: variant): integer;
function php_dbx_compare(const _row_a: variant; const _row_b: variant; const _column_key: string; const _flags: integer): integer;
function php_dbx_connect(const _module: variant; const _host: string; const _database: string; const _username: string; const _password: string; const _persistent: integer): variant;
function php_dbx_error(const _link_identifier: variant): string;
function php_dbx_escape_string(const _link_identifier: variant; const _text: string): string;
function php_dbx_fetch_row(const _result_identifier: variant): variant;
function php_dbx_query(const _link_identifier: variant; const _sql_statement: string; const _flags: integer): variant;
function php_dbx_sort(const _result: variant; const _user_compare_function: string): boolean;
function php_odbc_autocommit(const _connection_id: variant; const _OnOff: boolean): variant;
function php_odbc_binmode(const _result_id: variant; const _mode: integer): boolean;
procedure php_odbc_close_all();
procedure php_odbc_close(const _connection_id: variant);
function php_odbc_columnprivileges(const _connection_id: variant; const _qualifier: string; const _owner: string; const _table_name: string; const _column_name: string): variant;
function php_odbc_columns(const _connection_id: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _column_name: string): variant;
function php_odbc_commit(const _connection_id: variant): boolean;
function php_odbc_connect(const _dsn: string; const _user: string; const _password: string; const _cursor_type: integer): variant;
function php_odbc_cursor(const _result_id: variant): string;
function php_odbc_data_source(const _connection_id: variant; const _fetch_type: integer): variant;
function php_odbc_error(const _connection_id: variant): string;
function php_odbc_errormsg(const _connection_id: variant): string;
function php_odbc_exec(const _connection_id: variant; const _query_string: string; const _flags: integer): variant;
function php_odbc_execute(const _result_id: variant; const _parameters_array: variant): boolean;
function php_odbc_fetch_array(const _result: variant; const _rownumber: integer): variant;
function php_odbc_fetch_into(const _result_id: variant; var _result_array: variant; const _rownumber: integer): integer;
function php_odbc_fetch_object(const _result: variant; const _rownumber: integer): variant;
function php_odbc_fetch_row(const _result_id: variant; const _row_number: integer): boolean;
function php_odbc_field_len(const _result_id: variant; const _field_number: integer): integer;
function php_odbc_field_name(const _result_id: variant; const _field_number: integer): string;
function php_odbc_field_num(const _result_id: variant; const _field_name: string): integer;
function php_odbc_field_scale(const _result_id: variant; const _field_number: integer): integer;
function php_odbc_field_type(const _result_id: variant; const _field_number: integer): string;
function php_odbc_foreignkeys(const _connection_id: variant; const _pk_qualifier: string; const _pk_owner: string; const _pk_table: string; const _fk_qualifier: string; const _fk_owner: string; const _fk_table: string): variant;
function php_odbc_free_result(const _result_id: variant): boolean;
function php_odbc_gettypeinfo(const _connection_id: variant; const _data_type: integer): variant;
function php_odbc_longreadlen(const _result_id: variant; const _length: integer): boolean;
function php_odbc_next_result(const _result_id: variant): boolean;
function php_odbc_num_fields(const _result_id: variant): integer;
function php_odbc_num_rows(const _result_id: variant): integer;
function php_odbc_pconnect(const _dsn: string; const _user: string; const _password: string; const _cursor_type: integer): variant;
function php_odbc_prepare(const _connection_id: variant; const _query_string: string): variant;
function php_odbc_primarykeys(const _connection_id: variant; const _qualifier: string; const _owner: string; const _table: string): variant;
function php_odbc_procedurecolumns(const _connection_id: variant): variant;
function php_odbc_procedurecolumns(const _connection_id: variant; const _qualifier: string; const _owner: string; const _proc: string; const _column: string): variant;
function php_odbc_procedures(const _connection_id: variant): variant;
function php_odbc_procedures(const _connection_id: variant; const _qualifier: string; const _owner: string; const _name: string): variant;
function php_odbc_result_all(const _result_id: variant; const _format: string): integer;
function php_odbc_result(const _result_id: variant; const _field: variant): variant;
function php_odbc_rollback(const _connection_id: variant): boolean;
function php_odbc_setoption(const _id: variant; const _function: integer; const _option: integer; const _param: integer): boolean;
function php_odbc_specialcolumns(const _connection_id: variant; const _type: integer; const _qualifier: string; const _owner: string; const _table: string; const _scope: integer; const _nullable: integer): variant;
function php_odbc_statistics(const _connection_id: variant; const _qualifier: string; const _owner: string; const _table_name: string; const _unique: integer; const _accuracy: integer): variant;
function php_odbc_tableprivileges(const _connection_id: variant; const _qualifier: string; const _owner: string; const _name: string): variant;
function php_odbc_tables(const _connection_id: variant; const _qualifier: string; const _owner: string; const _name: string; const _types: string): variant;
function php_beginTransaction(): boolean;
function php_commit(): boolean;
function php_errorCode(): variant;
function php_errorInfo(): variant;
function php_exec(const _statement: string): integer;
function php_getAttribute(const _attribute: integer): variant;
function php_getAvailableDrivers(): variant;
function php_inTransaction(): boolean;
function php_lastInsertId(const _name: string): string;
function php_quote(const _string: string; const _parameter_type: integer): string;
function php_rollBack(): boolean;
function php_setAttribute(const _attribute: integer; const _value: variant): boolean;
function php_pdo_drivers(): variant;
function php_bindColumn(const _column: variant; var _param: variant; const _type: integer; const _maxlen: integer; const _driverdata: variant): boolean;
function php_bindParam(const _parameter: variant; var _variable: variant; const _data_type: integer; const _length: integer; const _driver_options: variant): boolean;
function php_bindValue(const _parameter: variant; const _value: variant; const _data_type: integer): boolean;
function php_closeCursor(): boolean;
function php_columnCount(): integer;
procedure php_debugDumpParams();
function php_execute(const _input_parameters: variant): boolean;
function php_fetch(const _fetch_style: integer; const _cursor_orientation: integer; const _cursor_offset: integer): variant;
function php_fetchAll(const _fetch_style: integer; const _fetch_argument: variant; const _ctor_args: variant): variant;
function php_fetchColumn(const _column_number: integer): variant;
function php_fetchObject(const _class_name: string; const _ctor_args: variant): variant;
function php_getColumnMeta(const _column: integer): variant;
function php_nextRowset(): boolean;
function php_rowCount(): integer;
function php_setFetchMode(const _mode: integer): boolean;
function php_step(const _context: variant; const _rownumber: integer; const _value1: variant; const _value2: variant): variant;
function php_fini(const _context: variant; const _rownumber: integer): variant;
function php_collation(const _string1: string; const _string2: string): integer;
function php_cubrid_bind(const _req_identifier: variant; const _bind_index: integer; const _bind_value: variant; const _bind_value_type: string): boolean;
function php_cubrid_close_prepare(const _req_identifier: variant): boolean;
function php_cubrid_close_request(const _req_identifier: variant): boolean;
function php_cubrid_col_get(const _conn_identifier: variant; const _oid: string; const _attr_name: string): variant;
function php_cubrid_col_size(const _conn_identifier: variant; const _oid: string; const _attr_name: string): integer;
function php_cubrid_column_names(const _req_identifier: variant): variant;
function php_cubrid_column_types(const _req_identifier: variant): variant;
function php_cubrid_commit(const _conn_identifier: variant): boolean;
function php_cubrid_connect_with_url(const _conn_url: string; const _userid: string; const _passwd: string; const _new_link: boolean): variant;
function php_cubrid_connect(const _host: string; const _port: integer; const _dbname: string; const _userid: string; const _passwd: string; const _new_link: boolean): variant;
function php_cubrid_current_oid(const _req_identifier: variant): string;
function php_cubrid_disconnect(const _conn_identifier: variant): boolean;
function php_cubrid_drop(const _conn_identifier: variant; const _oid: string): boolean;
function php_cubrid_error_code_facility(): integer;
function php_cubrid_error_code(): integer;
function php_cubrid_error_msg(): string;
function php_cubrid_execute(const _conn_identifier: variant; const _sql: string; const _option: integer): variant;
function php_cubrid_execute(const _request_identifier: variant; const _option: integer): boolean;
function php_cubrid_fetch(const _result: variant; const _type: integer): variant;
function php_cubrid_free_result(const _req_identifier: variant): boolean;
function php_cubrid_get_autocommit(const _conn_identifier: variant): boolean;
function php_cubrid_get_charset(const _conn_identifier: variant): string;
function php_cubrid_get_class_name(const _conn_identifier: variant; const _oid: string): string;
function php_cubrid_get_client_info(): string;
function php_cubrid_get_db_parameter(const _conn_identifier: variant): variant;
function php_cubrid_get_query_timeout(const _req_identifier: variant): integer;
function php_cubrid_get_server_info(const _conn_identifier: variant): string;
function php_cubrid_get(const _conn_identifier: variant; const _oid: string; const _attr: variant): variant;
function php_cubrid_insert_id(const _conn_identifier: variant): string;
function php_cubrid_is_instance(const _conn_identifier: variant; const _oid: string): integer;
function php_cubrid_lob_close(const _lob_identifier_array: variant): boolean;
function php_cubrid_lob_export(const _conn_identifier: variant; const _lob_identifier: variant; const _path_name: string): boolean;
function php_cubrid_lob_get(const _conn_identifier: variant; const _sql: string): variant;
function php_cubrid_lob_send(const _conn_identifier: variant; const _lob_identifier: variant): boolean;
function php_cubrid_lob_size(const _lob_identifier: variant): string;
function php_cubrid_lob2_bind(const _req_identifier: variant; const _bind_index: integer; const _bind_value: variant; const _bind_value_type: string): boolean;
function php_cubrid_lob2_close(const _lob_identifier: variant): boolean;
function php_cubrid_lob2_export(const _lob_identifier: variant; const _file_name: string): boolean;
function php_cubrid_lob2_import(const _lob_identifier: variant; const _file_name: string): boolean;
function php_cubrid_lob2_new(const _conn_identifier: variant; const _type: string): variant;
function php_cubrid_lob2_read(const _lob_identifier: variant; const _len: integer): string;
function php_cubrid_lob2_seek64(const _lob_identifier: variant; const _offset: string; const _origin: integer): boolean;
function php_cubrid_lob2_seek(const _lob_identifier: variant; const _offset: integer; const _origin: integer): boolean;
function php_cubrid_lob2_size64(const _lob_identifier: variant): string;
function php_cubrid_lob2_size(const _lob_identifier: variant): integer;
function php_cubrid_lob2_tell64(const _lob_identifier: variant): string;
function php_cubrid_lob2_tell(const _lob_identifier: variant): integer;
function php_cubrid_lob2_write(const _lob_identifier: variant; const _buf: string): boolean;
function php_cubrid_lock_read(const _conn_identifier: variant; const _oid: string): boolean;
function php_cubrid_lock_write(const _conn_identifier: variant; const _oid: string): boolean;
function php_cubrid_move_cursor(const _req_identifier: variant; const _offset: integer; const _origin: integer): integer;
function php_cubrid_next_result(const _result: variant): boolean;
function php_cubrid_num_cols(const _result: variant): integer;
function php_cubrid_num_rows(const _result: variant): integer;
function php_cubrid_pconnect_with_url(const _conn_url: string; const _userid: string; const _passwd: string): variant;
function php_cubrid_pconnect(const _host: string; const _port: integer; const _dbname: string; const _userid: string; const _passwd: string): variant;
function php_cubrid_prepare(const _conn_identifier: variant; const _prepare_stmt: string; const _option: integer): variant;
function php_cubrid_put(const _conn_identifier: variant; const _oid: string; const _attr: string; const _value: variant): integer;
function php_cubrid_rollback(const _conn_identifier: variant): boolean;
function php_cubrid_schema(const _conn_identifier: variant; const _schema_type: integer; const _class_name: string; const _attr_name: string): variant;
function php_cubrid_seq_drop(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _index: integer): boolean;
function php_cubrid_seq_insert(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _index: integer; const _seq_element: string): boolean;
function php_cubrid_seq_put(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _index: integer; const _seq_element: string): boolean;
function php_cubrid_set_add(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _set_element: string): boolean;
function php_cubrid_set_autocommit(const _conn_identifier: variant; const _mode: boolean): boolean;
function php_cubrid_set_db_parameter(const _conn_identifier: variant; const _param_type: integer; const _param_value: integer): boolean;
function php_cubrid_set_drop(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _set_element: string): boolean;
function php_cubrid_set_query_timeout(const _req_identifier: variant; const _timeout: integer): boolean;
function php_cubrid_version(): string;
function php_cubrid_affected_rows(const _conn_identifier: variant): integer;
function php_cubrid_client_encoding(const _conn_identifier: variant): string;
function php_cubrid_close(const _conn_identifier: variant): boolean;
function php_cubrid_data_seek(const _result: variant; const _row_number: integer): boolean;
function php_cubrid_db_name(const _result: variant; const _index: integer): string;
function php_cubrid_errno(const _conn_identifier: variant): integer;
function php_cubrid_error(const _connection: variant): string;
function php_cubrid_fetch_array(const _result: variant; const _type: integer): variant;
function php_cubrid_fetch_assoc(const _result: variant; const _type: integer): variant;
function php_cubrid_fetch_field(const _result: variant; const _field_offset: integer): variant;
function php_cubrid_fetch_lengths(const _result: variant): variant;
function php_cubrid_fetch_object(const _result: variant; const _class_name: string; const _params: variant; const _type: integer): variant;
function php_cubrid_fetch_row(const _result: variant; const _type: integer): variant;
function php_cubrid_field_flags(const _result: variant; const _field_offset: integer): string;
function php_cubrid_field_len(const _result: variant; const _field_offset: integer): integer;
function php_cubrid_field_name(const _result: variant; const _field_offset: integer): string;
function php_cubrid_field_seek(const _result: variant; const _field_offset: integer): boolean;
function php_cubrid_field_table(const _result: variant; const _field_offset: integer): string;
function php_cubrid_field_type(const _result: variant; const _field_offset: integer): string;
function php_cubrid_list_dbs(const _conn_identifier: variant): variant;
function php_cubrid_num_fields(const _result: variant): integer;
function php_cubrid_ping(const _conn_identifier: variant): boolean;
function php_cubrid_query(const _query: string; const _conn_identifier: variant): variant;
function php_cubrid_real_escape_string(const _unescaped_string: string; const _conn_identifier: variant): string;
function php_cubrid_result(const _result: variant; const _row: integer; const _field: variant): string;
function php_cubrid_unbuffered_query(const _query: string; const _conn_identifier: variant): variant;
function php_cubrid_load_from_glo(const _conn_identifier: variant; const _oid: string; const _file_name: string): integer;
function php_cubrid_new_glo(const _conn_identifier: variant; const _class_name: string; const _file_name: string): string;
function php_cubrid_save_to_glo(const _conn_identifier: variant; const _oid: string; const _file_name: string): integer;
function php_cubrid_send_glo(const _conn_identifier: variant; const _oid: string): integer;
function php_dbplus_add(const _relation: variant; const _tuple: variant): integer;
function php_dbplus_aql(const _query: string; const _server: string; const _dbpath: string): variant;
function php_dbplus_chdir(const _newdir: string): string;
function php_dbplus_close(const _relation: variant): variant;
function php_dbplus_curr(const _relation: variant; var _tuple: variant): integer;
function php_dbplus_errcode(const _errno: integer): string;
function php_dbplus_errno(): integer;
function php_dbplus_find(const _relation: variant; const _constraints: variant; const _tuple: variant): integer;
function php_dbplus_first(const _relation: variant; var _tuple: variant): integer;
function php_dbplus_flush(const _relation: variant): integer;
function php_dbplus_freealllocks(): integer;
function php_dbplus_freelock(const _relation: variant; const _tuple: string): integer;
function php_dbplus_freerlocks(const _relation: variant): integer;
function php_dbplus_getlock(const _relation: variant; const _tuple: string): integer;
function php_dbplus_getunique(const _relation: variant; const _uniqueid: integer): integer;
function php_dbplus_info(const _relation: variant; const _key: string; var _result: variant): integer;
function php_dbplus_last(const _relation: variant; var _tuple: variant): integer;
function php_dbplus_lockrel(const _relation: variant): integer;
function php_dbplus_next(const _relation: variant; var _tuple: variant): integer;
function php_dbplus_open(const _name: string): variant;
function php_dbplus_prev(const _relation: variant; var _tuple: variant): integer;
function php_dbplus_rchperm(const _relation: variant; const _mask: integer; const _user: string; const _group: string): integer;
function php_dbplus_rcreate(const _name: string; const _domlist: variant; const _overwrite: boolean): variant;
function php_dbplus_rcrtexact(const _name: string; const _relation: variant; const _overwrite: boolean): variant;
function php_dbplus_rcrtlike(const _name: string; const _relation: variant; const _overwrite: integer): variant;
function php_dbplus_resolve(const _relation_name: string): variant;
function php_dbplus_restorepos(const _relation: variant; const _tuple: variant): integer;
function php_dbplus_rkeys(const _relation: variant; const _domlist: variant): variant;
function php_dbplus_ropen(const _name: string): variant;
function php_dbplus_rquery(const _query: string; const _dbpath: string): variant;
function php_dbplus_rrename(const _relation: variant; const _name: string): integer;
function php_dbplus_rsecindex(const _relation: variant; const _domlist: variant; const _type: integer): variant;
function php_dbplus_runlink(const _relation: variant): integer;
function php_dbplus_rzap(const _relation: variant): integer;
function php_dbplus_savepos(const _relation: variant): integer;
function php_dbplus_setindex(const _relation: variant; const _idx_name: string): integer;
function php_dbplus_setindexbynumber(const _relation: variant; const _idx_number: integer): integer;
function php_dbplus_sql(const _query: string; const _server: string; const _dbpath: string): variant;
function php_dbplus_tcl(const _sid: integer; const _script: string): string;
function php_dbplus_tremove(const _relation: variant; const _tuple: variant; var _current: variant): integer;
function php_dbplus_undo(const _relation: variant): integer;
function php_dbplus_undoprepare(const _relation: variant): integer;
function php_dbplus_unlockrel(const _relation: variant): integer;
function php_dbplus_unselect(const _relation: variant): integer;
function php_dbplus_update(const _relation: variant; const _old: variant; const _new: variant): integer;
function php_dbplus_xlockrel(const _relation: variant): integer;
function php_dbplus_xunlockrel(const _relation: variant): integer;
function php_dbase_add_record(const _dbase_identifier: integer; const _record: variant): boolean;
function php_dbase_close(const _dbase_identifier: integer): boolean;
function php_dbase_create(const _filename: string; const _fields: variant): integer;
function php_dbase_delete_record(const _dbase_identifier: integer; const _record_number: integer): boolean;
function php_dbase_get_header_info(const _dbase_identifier: integer): variant;
function php_dbase_get_record_with_names(const _dbase_identifier: integer; const _record_number: integer): variant;
function php_dbase_get_record(const _dbase_identifier: integer; const _record_number: integer): variant;
function php_dbase_numfields(const _dbase_identifier: integer): integer;
function php_dbase_numrecords(const _dbase_identifier: integer): integer;
function php_dbase_open(const _filename: string; const _mode: integer): integer;
function php_dbase_pack(const _dbase_identifier: integer): boolean;
function php_dbase_replace_record(const _dbase_identifier: integer; const _record: variant; const _record_number: integer): boolean;
function php_filepro_fieldcount(): integer;
function php_filepro_fieldname(const _field_number: integer): string;
function php_filepro_fieldtype(const _field_number: integer): string;
function php_filepro_fieldwidth(const _field_number: integer): integer;
function php_filepro_retrieve(const _row_number: integer; const _field_number: integer): string;
function php_filepro_rowcount(): integer;
function php_filepro(const _directory: string): boolean;
function php_ibase_add_user(const _service_handle: variant; const _user_name: string; const _password: string; const _first_name: string; const _middle_name: string; const _last_name: string): boolean;
function php_ibase_affected_rows(const _link_identifier: variant): integer;
function php_ibase_backup(const _service_handle: variant; const _source_db: string; const _dest_file: string; const _options: integer; const _verbose: boolean): variant;
procedure php_ibase_blob_add(const _blob_handle: variant; const _data: string);
function php_ibase_blob_cancel(const _blob_handle: variant): boolean;
function php_ibase_blob_close(const _blob_handle: variant): variant;
function php_ibase_blob_create(const _link_identifier: variant): variant;
function php_ibase_blob_echo(const _blob_id: string): boolean;
function php_ibase_blob_echo(const _link_identifier: variant; const _blob_id: string): boolean;
function php_ibase_blob_get(const _blob_handle: variant; const _len: integer): string;
function php_ibase_blob_import(const _link_identifier: variant; const _file_handle: variant): string;
function php_ibase_blob_import(const _file_handle: variant): string;
function php_ibase_blob_info(const _link_identifier: variant; const _blob_id: string): variant;
function php_ibase_blob_info(const _blob_id: string): variant;
function php_ibase_blob_open(const _link_identifier: variant; const _blob_id: string): variant;
function php_ibase_blob_open(const _blob_id: string): variant;
function php_ibase_close(const _connection_id: variant): boolean;
function php_ibase_commit_ret(const _link_or_trans_identifier: variant): boolean;
function php_ibase_commit(const _link_or_trans_identifier: variant): boolean;
function php_ibase_connect(const _database: string; const _username: string; const _password: string; const _charset: string; const _buffers: integer; const _dialect: integer; const _role: string; const _sync: integer): variant;
function php_ibase_db_info(const _service_handle: variant; const _db: string; const _action: integer; const _argument: integer): string;
function php_ibase_delete_user(const _service_handle: variant; const _user_name: string): boolean;
function php_ibase_drop_db(const _connection: variant): boolean;
function php_ibase_errcode(): integer;
function php_ibase_errmsg(): string;
function php_ibase_execute(const _query: variant; const _bind_arg: variant): variant;
function php_ibase_fetch_assoc(const _result: variant; const _fetch_flag: integer): variant;
function php_ibase_fetch_object(const _result_id: variant; const _fetch_flag: integer): variant;
function php_ibase_fetch_row(const _result_identifier: variant; const _fetch_flag: integer): variant;
function php_ibase_field_info(const _result: variant; const _field_number: integer): variant;
function php_ibase_free_event_handler(const _event: variant): boolean;
function php_ibase_free_query(const _query: variant): boolean;
function php_ibase_free_result(const _result_identifier: variant): boolean;
function php_ibase_gen_id(const _generator: string; const _increment: integer; const _link_identifier: variant): variant;
function php_ibase_maintain_db(const _service_handle: variant; const _db: string; const _action: integer; const _argument: integer): boolean;
function php_ibase_modify_user(const _service_handle: variant; const _user_name: string; const _password: string; const _first_name: string; const _middle_name: string; const _last_name: string): boolean;
function php_ibase_name_result(const _result: variant; const _name: string): boolean;
function php_ibase_num_fields(const _result_id: variant): integer;
function php_ibase_num_params(const _query: variant): integer;
function php_ibase_param_info(const _query: variant; const _param_number: integer): variant;
function php_ibase_pconnect(const _database: string; const _username: string; const _password: string; const _charset: string; const _buffers: integer; const _dialect: integer; const _role: string; const _sync: integer): variant;
function php_ibase_prepare(const _query: string): variant;
function php_ibase_prepare(const _link_identifier: variant; const _query: string): variant;
function php_ibase_prepare(const _link_identifier: variant; const _trans: string; const _query: string): variant;
function php_ibase_query(const _link_identifier: variant; const _query: string; const _bind_args: integer): variant;
function php_ibase_restore(const _service_handle: variant; const _source_file: string; const _dest_db: string; const _options: integer; const _verbose: boolean): variant;
function php_ibase_rollback_ret(const _link_or_trans_identifier: variant): boolean;
function php_ibase_rollback(const _link_or_trans_identifier: variant): boolean;
function php_ibase_server_info(const _service_handle: variant; const _action: integer): string;
function php_ibase_service_attach(const _host: string; const _dba_username: string; const _dba_password: string): variant;
function php_ibase_service_detach(const _service_handle: variant): boolean;
function php_ibase_set_event_handler(const _event_handler: variant; const _event_name1: string; const _event_name2: string): variant;
function php_ibase_set_event_handler(const _connection: variant; const _event_handler: variant; const _event_name1: string; const _event_name2: string): variant;
function php_ibase_trans(const _trans_args: integer; const _link_identifier: variant): variant;
function php_ibase_trans(const _link_identifier: variant; const _trans_args: integer): variant;
function php_ibase_wait_event(const _event_name1: string; const _event_name2: string): string;
function php_ibase_wait_event(const _connection: variant; const _event_name1: string; const _event_name2: string): string;
function php_fbsql_affected_rows(const _link_identifier: variant): integer;
function php_fbsql_autocommit(const _link_identifier: variant; const _OnOff: boolean): boolean;
function php_fbsql_blob_size(const _blob_handle: string; const _link_identifier: variant): integer;
function php_fbsql_change_user(const _user: string; const _password: string; const _database: string; const _link_identifier: variant): boolean;
function php_fbsql_clob_size(const _clob_handle: string; const _link_identifier: variant): integer;
function php_fbsql_close(const _link_identifier: variant): boolean;
function php_fbsql_commit(const _link_identifier: variant): boolean;
function php_fbsql_connect(const _hostname: string): variant;
function php_fbsql_create_blob(const _blob_data: string; const _link_identifier: variant): string;
function php_fbsql_create_clob(const _clob_data: string; const _link_identifier: variant): string;
function php_fbsql_create_db(const _database_name: string; const _link_identifier: variant; const _database_options: string): boolean;
function php_fbsql_data_seek(const _result: variant; const _row_number: integer): boolean;
function php_fbsql_database_password(const _link_identifier: variant; const _database_password: string): string;
function php_fbsql_database(const _link_identifier: variant; const _database: string): string;
function php_fbsql_db_query(const _database: string; const _query: string; const _link_identifier: variant): variant;
function php_fbsql_db_status(const _database_name: string; const _link_identifier: variant): integer;
function php_fbsql_drop_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_fbsql_errno(const _link_identifier: variant): integer;
function php_fbsql_error(const _link_identifier: variant): string;
function php_fbsql_fetch_array(const _result: variant; const _result_type: integer): variant;
function php_fbsql_fetch_assoc(const _result: variant): variant;
function php_fbsql_fetch_field(const _result: variant; const _field_offset: integer): variant;
function php_fbsql_fetch_lengths(const _result: variant): variant;
function php_fbsql_fetch_object(const _result: variant): variant;
function php_fbsql_fetch_row(const _result: variant): variant;
function php_fbsql_field_flags(const _result: variant; const _field_offset: integer): string;
function php_fbsql_field_len(const _result: variant; const _field_offset: integer): integer;
function php_fbsql_field_name(const _result: variant; const _field_index: integer): string;
function php_fbsql_field_seek(const _result: variant; const _field_offset: integer): boolean;
function php_fbsql_field_table(const _result: variant; const _field_offset: integer): string;
function php_fbsql_field_type(const _result: variant; const _field_offset: integer): string;
function php_fbsql_free_result(const _result: variant): boolean;
function php_fbsql_get_autostart_info(const _link_identifier: variant): variant;
function php_fbsql_hostname(const _link_identifier: variant; const _host_name: string): string;
function php_fbsql_insert_id(const _link_identifier: variant): integer;
function php_fbsql_list_dbs(const _link_identifier: variant): variant;
function php_fbsql_list_fields(const _database_name: string; const _table_name: string; const _link_identifier: variant): variant;
function php_fbsql_list_tables(const _database: string; const _link_identifier: variant): variant;
function php_fbsql_next_result(const _result: variant): boolean;
function php_fbsql_num_fields(const _result: variant): integer;
function php_fbsql_num_rows(const _result: variant): integer;
function php_fbsql_password(const _link_identifier: variant; const _password: string): string;
function php_fbsql_pconnect(const _hostname: string): variant;
function php_fbsql_query(const _query: string; const _link_identifier: variant; const _batch_size: integer): variant;
function php_fbsql_read_blob(const _blob_handle: string; const _link_identifier: variant): string;
function php_fbsql_read_clob(const _clob_handle: string; const _link_identifier: variant): string;
function php_fbsql_result(const _result: variant; const _row: integer; const _field: variant): variant;
function php_fbsql_rollback(const _link_identifier: variant): boolean;
function php_fbsql_rows_fetched(const _result: variant): integer;
function php_fbsql_select_db(const _database_name: string; const _link_identifier: variant): boolean;
procedure php_fbsql_set_characterset(const _link_identifier: variant; const _characterset: integer; const _in_out_both: integer);
function php_fbsql_set_lob_mode(const _result: variant; const _lob_mode: integer): boolean;
function php_fbsql_set_password(const _link_identifier: variant; const _user: string; const _password: string; const _old_password: string): boolean;
procedure php_fbsql_set_transaction(const _link_identifier: variant; const _locking: integer; const _isolation: integer);
function php_fbsql_start_db(const _database_name: string; const _link_identifier: variant; const _database_options: string): boolean;
function php_fbsql_stop_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_fbsql_table_name(const _result: variant; const _index: integer): string;
function php_fbsql_username(const _link_identifier: variant; const _username: string): string;
function php_fbsql_warnings(const _OnOff: boolean): boolean;
function php_db2_autocommit(const _connection: variant; const _value: boolean): variant;
function php_db2_bind_param(const _stmt: variant; const _parameter_number: integer; const _variable_name: string; const _parameter_type: integer; const _data_type: integer; const _precision: integer; const _scale: integer): boolean;
function php_db2_client_info(const _connection: variant): variant;
function php_db2_close(const _connection: variant): boolean;
function php_db2_column_privileges(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _column_name: string): variant;
function php_db2_columns(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _column_name: string): variant;
function php_db2_commit(const _connection: variant): boolean;
function php_db2_conn_error(const _connection: variant): string;
function php_db2_conn_errormsg(const _connection: variant): string;
function php_db2_connect(const _database: string; const _username: string; const _password: string; const _options: variant): variant;
function php_db2_cursor_type(const _stmt: variant): integer;
function php_db2_escape_string(const _string_literal: string): string;
function php_db2_exec(const _connection: variant; const _statement: string; const _options: variant): variant;
function php_db2_execute(const _stmt: variant; const _parameters: variant): boolean;
function php_db2_fetch_array(const _stmt: variant; const _row_number: integer): variant;
function php_db2_fetch_assoc(const _stmt: variant; const _row_number: integer): variant;
function php_db2_fetch_both(const _stmt: variant; const _row_number: integer): variant;
function php_db2_fetch_object(const _stmt: variant; const _row_number: integer): variant;
function php_db2_fetch_row(const _stmt: variant; const _row_number: integer): boolean;
function php_db2_field_display_size(const _stmt: variant; const _column: variant): integer;
function php_db2_field_name(const _stmt: variant; const _column: variant): string;
function php_db2_field_num(const _stmt: variant; const _column: variant): integer;
function php_db2_field_precision(const _stmt: variant; const _column: variant): integer;
function php_db2_field_scale(const _stmt: variant; const _column: variant): integer;
function php_db2_field_type(const _stmt: variant; const _column: variant): string;
function php_db2_field_width(const _stmt: variant; const _column: variant): integer;
function php_db2_foreign_keys(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string): variant;
function php_db2_free_result(const _stmt: variant): boolean;
function php_db2_free_stmt(const _stmt: variant): boolean;
function php_db2_get_option(const _resource: variant; const _option: string): string;
function php_db2_last_insert_id(const _resource: variant): string;
function php_db2_lob_read(const _stmt: variant; const _colnum: integer; const _length: integer): string;
function php_db2_next_result(const _stmt: variant): variant;
function php_db2_num_fields(const _stmt: variant): integer;
function php_db2_num_rows(const _stmt: variant): integer;
function php_db2_pclose(const _resource: variant): boolean;
function php_db2_pconnect(const _database: string; const _username: string; const _password: string; const _options: variant): variant;
function php_db2_prepare(const _connection: variant; const _statement: string; const _options: variant): variant;
function php_db2_primary_keys(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string): variant;
function php_db2_procedure_columns(const _connection: variant; const _qualifier: string; const _schema: string; const _procedure: string; const _parameter: string): variant;
function php_db2_procedures(const _connection: variant; const _qualifier: string; const _schema: string; const _procedure: string): variant;
function php_db2_result(const _stmt: variant; const _column: variant): variant;
function php_db2_rollback(const _connection: variant): boolean;
function php_db2_server_info(const _connection: variant): variant;
function php_db2_set_option(const _resource: variant; const _options: variant; const _type: integer): boolean;
function php_db2_special_columns(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _scope: integer): variant;
function php_db2_statistics(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _unique: boolean): variant;
function php_db2_stmt_error(const _stmt: variant): string;
function php_db2_stmt_errormsg(const _stmt: variant): string;
function php_db2_table_privileges(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string): variant;
function php_db2_tables(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _table_type: string): variant;
function php_ifx_affected_rows(const _result_id: variant): integer;
function php_ifx_blobinfile_mode(const _mode: integer): boolean;
function php_ifx_byteasvarchar(const _mode: integer): boolean;
function php_ifx_close(const _link_identifier: variant): boolean;
function php_ifx_connect(const _database: string; const _userid: string; const _password: string): variant;
function php_ifx_copy_blob(const _bid: integer): integer;
function php_ifx_create_blob(const _type: integer; const _mode: integer; const _param: string): integer;
function php_ifx_create_char(const _param: string): integer;
function php_ifx_do(const _result_id: variant): boolean;
function php_ifx_error(const _link_identifier: variant): string;
function php_ifx_errormsg(const _errorcode: integer): string;
function php_ifx_fetch_row(const _result_id: variant; const _position: variant): variant;
function php_ifx_fieldproperties(const _result_id: variant): variant;
function php_ifx_fieldtypes(const _result_id: variant): variant;
function php_ifx_free_blob(const _bid: integer): boolean;
function php_ifx_free_char(const _bid: integer): boolean;
function php_ifx_free_result(const _result_id: variant): boolean;
function php_ifx_get_blob(const _bid: integer): string;
function php_ifx_get_char(const _bid: integer): string;
function php_ifx_getsqlca(const _result_id: variant): variant;
function php_ifx_htmltbl_result(const _result_id: variant; const _html_table_options: string): integer;
function php_ifx_nullformat(const _mode: integer): boolean;
function php_ifx_num_fields(const _result_id: variant): integer;
function php_ifx_num_rows(const _result_id: variant): integer;
function php_ifx_pconnect(const _database: string; const _userid: string; const _password: string): variant;
function php_ifx_prepare(const _query: string; const _link_identifier: variant; const _cursor_def: integer; const _blobidarray: variant): variant;
function php_ifx_query(const _query: string; const _link_identifier: variant; const _cursor_type: integer; const _blobidarray: variant): variant;
function php_ifx_textasvarchar(const _mode: integer): boolean;
function php_ifx_update_blob(const _bid: integer; const _content: string): boolean;
function php_ifx_update_char(const _bid: integer; const _content: string): boolean;
function php_ifxus_close_slob(const _bid: integer): boolean;
function php_ifxus_create_slob(const _mode: integer): integer;
function php_ifxus_free_slob(const _bid: integer): boolean;
function php_ifxus_open_slob(const _bid: integer; const _mode: integer): integer;
function php_ifxus_read_slob(const _bid: integer; const _nbytes: integer): string;
function php_ifxus_seek_slob(const _bid: integer; const _mode: integer; const _offset: integer): integer;
function php_ifxus_tell_slob(const _bid: integer): integer;
function php_ifxus_write_slob(const _bid: integer; const _content: string): integer;
function php_ingres_autocommit_state(const _link: variant): boolean;
function php_ingres_autocommit(const _link: variant): boolean;
function php_ingres_charset(const _link: variant): string;
function php_ingres_close(const _link: variant): boolean;
function php_ingres_commit(const _link: variant): boolean;
function php_ingres_connect(const _database: string; const _username: string; const _password: string; const _options: variant): variant;
function php_ingres_cursor(const _result: variant): string;
function php_ingres_errno(const _link: variant): integer;
function php_ingres_error(const _link: variant): string;
function php_ingres_errsqlstate(const _link: variant): string;
function php_ingres_escape_string(const _link: variant; const _source_string: string): string;
function php_ingres_execute(const _result: variant; const _params: variant; const _types: string): boolean;
function php_ingres_fetch_array(const _result: variant; const _result_type: integer): variant;
function php_ingres_fetch_assoc(const _result: variant): variant;
function php_ingres_fetch_object(const _result: variant; const _result_type: integer): variant;
function php_ingres_fetch_proc_return(const _result: variant): integer;
function php_ingres_fetch_row(const _result: variant): variant;
function php_ingres_field_length(const _result: variant; const _index: integer): integer;
function php_ingres_field_name(const _result: variant; const _index: integer): string;
function php_ingres_field_nullable(const _result: variant; const _index: integer): boolean;
function php_ingres_field_precision(const _result: variant; const _index: integer): integer;
function php_ingres_field_scale(const _result: variant; const _index: integer): integer;
function php_ingres_field_type(const _result: variant; const _index: integer): string;
function php_ingres_free_result(const _result: variant): boolean;
function php_ingres_next_error(const _link: variant): boolean;
function php_ingres_num_fields(const _result: variant): integer;
function php_ingres_num_rows(const _result: variant): integer;
function php_ingres_pconnect(const _database: string; const _username: string; const _password: string; const _options: variant): variant;
function php_ingres_prepare(const _link: variant; const _query: string): variant;
function php_ingres_query(const _link: variant; const _query: string; const _params: variant; const _types: string): variant;
function php_ingres_result_seek(const _result: variant; const _position: integer): boolean;
function php_ingres_rollback(const _link: variant): boolean;
function php_ingres_set_environment(const _link: variant; const _options: variant): boolean;
function php_ingres_unbuffered_query(const _link: variant; const _query: string; const _params: variant; const _types: string): variant;
function php_maxdb_affected_rows(const _link: variant): integer;
function php_maxdb_autocommit(const _link: variant; const _mode: boolean): boolean;
function php_maxdb_change_user(const _link: variant; const _user: string; const _password: string; const _database: string): boolean;
function php_maxdb_character_set_name(const _link: variant): string;
function php_maxdb_close(const _link: variant): boolean;
function php_maxdb_commit(const _link: variant): boolean;
function php_maxdb_connect_errno(): integer;
function php_maxdb_connect_error(): string;
function php_maxdb_connect(const _host: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string): variant;
function php_maxdb_data_seek(const _result: variant; const _offset: integer): boolean;
procedure php_maxdb_debug(const _debug: string);
function php_maxdb_disable_reads_from_master(const _link: variant): boolean;
function php_maxdb_disable_rpl_parse(const _link: variant): boolean;
function php_maxdb_dump_debug_info(const _link: variant): boolean;
function php_maxdb_embedded_connect(const _dbname: string): variant;
function php_maxdb_enable_reads_from_master(const _link: variant): boolean;
function php_maxdb_enable_rpl_parse(const _link: variant): boolean;
function php_maxdb_errno(const _link: variant): integer;
function php_maxdb_error(const _link: variant): string;
function php_maxdb_fetch_array(const _result: variant; const _resulttype: integer): variant;
function php_maxdb_fetch_assoc(const _result: variant): variant;
function php_maxdb_fetch_field_direct(const _result: variant; const _fieldnr: integer): variant;
function php_maxdb_fetch_field(const _result: variant): variant;
function php_maxdb_fetch_fields(const _result: variant): variant;
function php_maxdb_fetch_lengths(const _result: variant): variant;
function php_maxdb_fetch_object(const _result: variant): variant;
function php_maxdb_fetch_row(const _result: variant): variant;
function php_maxdb_field_count(const _link: variant): integer;
function php_maxdb_field_seek(const _result: variant; const _fieldnr: integer): boolean;
function php_maxdb_field_tell(const _result: variant): integer;
procedure php_maxdb_free_result(const _result: variant);
function php_maxdb_get_client_info(): string;
function php_maxdb_get_client_version(): integer;
function php_maxdb_get_host_info(const _link: variant): string;
function php_maxdb_get_proto_info(const _link: variant): integer;
function php_maxdb_get_server_info(const _link: variant): string;
function php_maxdb_get_server_version(const _link: variant): integer;
function php_maxdb_info(const _link: variant): string;
function php_maxdb_init(): variant;
function php_maxdb_insert_id(const _link: variant): variant;
function php_maxdb_kill(const _link: variant; const _processid: integer): boolean;
function php_maxdb_master_query(const _link: variant; const _query: string): boolean;
function php_maxdb_more_results(const _link: variant): boolean;
function php_maxdb_multi_query(const _link: variant; const _query: string): boolean;
function php_maxdb_next_result(const _link: variant): boolean;
function php_maxdb_num_fields(const _result: variant): integer;
function php_maxdb_num_rows(const _result: variant): integer;
function php_maxdb_options(const _link: variant; const _option: integer; const _value: variant): boolean;
function php_maxdb_ping(const _link: variant): boolean;
function php_maxdb_prepare(const _link: variant; const _query: string): variant;
function php_maxdb_query(const _link: variant; const _query: string; const _resultmode: integer): variant;
function php_maxdb_real_connect(const _link: variant; const _hostname: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string): boolean;
function php_maxdb_real_escape_string(const _link: variant; const _escapestr: string): string;
function php_maxdb_real_query(const _link: variant; const _query: string): boolean;
function php_maxdb_report(const _flags: integer): boolean;
function php_maxdb_rollback(const _link: variant): boolean;
function php_maxdb_rpl_parse_enabled(const _link: variant): integer;
function php_maxdb_rpl_probe(const _link: variant): boolean;
function php_maxdb_rpl_query_type(const _link: variant): integer;
function php_maxdb_select_db(const _link: variant; const _dbname: string): boolean;
function php_maxdb_send_query(const _link: variant; const _query: string): boolean;
procedure php_maxdb_server_end();
function php_maxdb_server_init(const _server: variant; const _groups: variant): boolean;
function php_maxdb_sqlstate(const _link: variant): string;
function php_maxdb_ssl_set(const _link: variant; const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean;
function php_maxdb_stat(const _link: variant): string;
function php_maxdb_stmt_affected_rows(const _stmt: variant): integer;
function php_maxdb_stmt_bind_param(const _stmt: variant; const _types: string; var _var1: variant): boolean;
function php_maxdb_stmt_bind_result(const _stmt: variant; var _var1: variant): boolean;
function php_maxdb_stmt_close_long_data(const _stmt: variant; const _param_nr: integer): boolean;
function php_maxdb_stmt_close(const _stmt: variant): boolean;
function php_maxdb_stmt_data_seek(const _statement: variant; const _offset: integer): boolean;
function php_maxdb_stmt_errno(const _stmt: variant): integer;
function php_maxdb_stmt_error(const _stmt: variant): string;
function php_maxdb_stmt_execute(const _stmt: variant): boolean;
function php_maxdb_stmt_fetch(const _stmt: variant): boolean;
procedure php_maxdb_stmt_free_result(const _stmt: variant);
function php_maxdb_stmt_init(const _link: variant): variant;
function php_maxdb_stmt_num_rows(const _stmt: variant): integer;
function php_maxdb_stmt_param_count(const _stmt: variant): integer;
function php_maxdb_stmt_prepare(const _stmt: variant; const _query: string): boolean;
function php_maxdb_stmt_reset(const _stmt: variant): boolean;
function php_maxdb_stmt_result_metadata(const _stmt: variant): variant;
function php_maxdb_stmt_send_long_data(const _stmt: variant; const _param_nr: integer; const _data: string): boolean;
function php_maxdb_stmt_sqlstate(const _stmt: variant): string;
function php_maxdb_stmt_store_result(const _stmt: variant): boolean;
function php_maxdb_store_result(const _link: variant): variant;
function php_maxdb_thread_id(const _link: variant): integer;
function php_maxdb_thread_safe(): boolean;
function php_maxdb_use_result(const _link: variant): variant;
function php_maxdb_warning_count(const _link: variant): integer;
function php_close(const _connection: variant): boolean;
function php_connect(): boolean;
function php_dropDB(const _db: variant): variant;
function php_getConnections(): variant;
function php_getHosts(): variant;
function php_getReadPreference(): variant;
function php_getWriteConcern(): variant;
function php_killCursor(const _server_hash: string; const _id: variant): boolean;
function php_listDBs(): variant;
function php_setReadPreference(const _read_preference: string; const _tags: variant): boolean;
function php_setWriteConcern(const _w: variant; const _wtimeout: integer): boolean;
function php_authenticate(const _username: string; const _password: string): variant;
function php_command(const _command: variant; const _options: variant): variant;
function php_createDBRef(const _collection: string; const _document_or_id: variant): variant;
function php_drop(): variant;
function php_dropCollection(const _coll: variant): variant;
function php_execute(const _code: variant; const _args: variant): variant;
function php_forceError(): boolean;
function php_getCollectionInfo(const _options: variant): variant;
function php_getCollectionNames(const _options: variant): variant;
function php_getDBRef(const _ref: variant): variant;
function php_getProfilingLevel(): integer;
function php_getSlaveOkay(): boolean;
function php_lastError(): variant;
function php_listCollections(const _options: variant): variant;
function php_prevError(): variant;
function php_repair(const _preserve_cloned_files: boolean; const _backup_original_files: boolean): variant;
function php_resetError(): variant;
function php_setProfilingLevel(const _level: integer): integer;
function php_setSlaveOkay(const _ok: boolean): boolean;
function php_aggregate(const _pipeline: variant; const _options: variant): variant;
function php_batchInsert(const _a: variant; const _options: variant): variant;
function php_count(const _query: variant): integer;
function php_createDBRef(const _document_or_id: variant): variant;
function php_createIndex(const _keys: variant; const _options: variant): boolean;
function php_deleteIndex(const _keys: variant): variant;
function php_deleteIndexes(): variant;
function php_distinct(const _key: string; const _query: variant): variant;
function php_ensureIndex(const _key_or_keys: variant; const _options: variant): boolean;
function php_findAndModify(const _query: variant; const _update: variant; const _fields: variant; const _options: variant): variant;
function php_findOne(const _query: variant): variant;
function php_getIndexInfo(): variant;
function php_group(const _keys: variant; const _initial: variant; const _reduce: variant; const _options: variant): variant;
function php_save(const _document: variant; const _options: variant): variant;
function php_toIndexString(const _keys: variant): string;
function php_validate(const _scan_data: boolean): variant;
function php_count(const _foundOnly: boolean): integer;
function php_dead(): boolean;
procedure php_doQuery();
function php_explain(): variant;
function php_getNext(): variant;
function php_hasNext(): boolean;
function php_info(): variant;
procedure php_reset();
function php_getHostname(): string;
function php_getInc(): integer;
function php_getPID(): integer;
function php_getTimestamp(): integer;
function php_isValid(const _value: variant): boolean;
function php_create(const _collection: string; const _id: variant; const _database: string): variant;
function php_get(const _db: variant; const _ref: variant): variant;
function php_isRef(const _ref: variant): boolean;
function php_put(const _filename: string; const _metadata: variant): variant;
function php_storeBytes(const _bytes: string; const _metadata: variant): variant;
function php_storeFile(const _filename: variant; const _metadata: variant): variant;
function php_storeUpload(const _name: string; const _metadata: variant): variant;
function php_getBytes(): string;
function php_getFilename(): string;
function php_getResource(): variant;
function php_write(const _filename: string): integer;
function php_add(const _item: variant): boolean;
function php_getLevel(): integer;
function php_getModule(): integer;
procedure php_setCallback(const _log_function: variant);
procedure php_setLevel(const _level: integer);
procedure php_setModule(const _module: integer);
function php_setSize(const _size: integer): boolean;
function php_connectUtil(): boolean;
function php_getPoolSize(): integer;
function php_getSlave(): string;
function php_poolDebug(): variant;
function php_setPoolSize(const _size: integer): boolean;
function php_switchSlave(): string;
function php_bson_decode(const _bson: string): variant;
function php_bson_encode(const _anything: variant): string;
function php_getDocument(): variant;
function php_getServers(): variant;
procedure php_delete(const _filter: variant; const _deleteOptions: variant);
function php_insert(const _document: variant): variant;
procedure php_update(const _filter: variant; const _newObj: variant; const _updateOptions: variant);
function php_getWtimeout(): integer;
function php_getMode(): integer;
function php_getTagSets(): variant;
function php_isDead(): boolean;
procedure php_setTypeMap(const _typemap: variant);
function php_toArray(): variant;
function php_getHost(): string;
function php_getInfo(): variant;
function php_getLatency(): string;
function php_getPort(): integer;
function php_getTags(): variant;
function php_isArbiter(): boolean;
function php_isHidden(): boolean;
function php_isPassive(): boolean;
function php_isPrimary(): boolean;
function php_isSecondary(): boolean;
function php_getData(): string;
function php_getPattern(): string;
procedure php_bsonUnserialize(const _data: variant);
function php_msql_affected_rows(const _result: variant): integer;
function php_msql_close(const _link_identifier: variant): boolean;
function php_msql_connect(const _hostname: string): variant;
function php_msql_create_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_msql_data_seek(const _result: variant; const _row_number: integer): boolean;
function php_msql_db_query(const _database: string; const _query: string; const _link_identifier: variant): variant;
function php_msql_drop_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_msql_error(): string;
function php_msql_fetch_array(const _result: variant; const _result_type: integer): variant;
function php_msql_fetch_field(const _result: variant; const _field_offset: integer): variant;
function php_msql_fetch_object(const _result: variant): variant;
function php_msql_fetch_row(const _result: variant): variant;
function php_msql_field_flags(const _result: variant; const _field_offset: integer): string;
function php_msql_field_len(const _result: variant; const _field_offset: integer): integer;
function php_msql_field_name(const _result: variant; const _field_offset: integer): string;
function php_msql_field_seek(const _result: variant; const _field_offset: integer): boolean;
function php_msql_field_table(const _result: variant; const _field_offset: integer): integer;
function php_msql_field_type(const _result: variant; const _field_offset: integer): string;
function php_msql_free_result(const _result: variant): boolean;
function php_msql_list_dbs(const _link_identifier: variant): variant;
function php_msql_list_fields(const _database: string; const _tablename: string; const _link_identifier: variant): variant;
function php_msql_list_tables(const _database: string; const _link_identifier: variant): variant;
function php_msql_num_fields(const _result: variant): integer;
function php_msql_num_rows(const _query_identifier: variant): integer;
function php_msql_pconnect(const _hostname: string): variant;
function php_msql_query(const _query: string; const _link_identifier: variant): variant;
function php_msql_result(const _result: variant; const _row: integer; const _field: variant): string;
function php_msql_select_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_mssql_bind(const _stmt: variant; const _param_name: string; var _var: variant; const _type: integer; const _is_output: boolean; const _is_null: boolean; const _maxlen: integer): boolean;
function php_mssql_close(const _link_identifier: variant): boolean;
function php_mssql_connect(const _servername: string; const _username: string; const _password: string; const _new_link: boolean): variant;
function php_mssql_data_seek(const _result_identifier: variant; const _row_number: integer): boolean;
function php_mssql_execute(const _stmt: variant; const _skip_results: boolean): variant;
function php_mssql_fetch_array(const _result: variant; const _result_type: integer): variant;
function php_mssql_fetch_assoc(const _result_id: variant): variant;
function php_mssql_fetch_batch(const _result: variant): integer;
function php_mssql_fetch_field(const _result: variant; const _field_offset: integer): variant;
function php_mssql_fetch_object(const _result: variant): variant;
function php_mssql_fetch_row(const _result: variant): variant;
function php_mssql_field_length(const _result: variant; const _offset: integer): integer;
function php_mssql_field_name(const _result: variant; const _offset: integer): string;
function php_mssql_field_seek(const _result: variant; const _field_offset: integer): boolean;
function php_mssql_field_type(const _result: variant; const _offset: integer): string;
function php_mssql_free_result(const _result: variant): boolean;
function php_mssql_free_statement(const _stmt: variant): boolean;
function php_mssql_get_last_message(): string;
function php_mssql_guid_string(const _binary: string; const _short_format: boolean): string;
function php_mssql_init(const _sp_name: string; const _link_identifier: variant): variant;
procedure php_mssql_min_error_severity(const _severity: integer);
procedure php_mssql_min_message_severity(const _severity: integer);
function php_mssql_next_result(const _result_id: variant): boolean;
function php_mssql_num_fields(const _result: variant): integer;
function php_mssql_num_rows(const _result: variant): integer;
function php_mssql_pconnect(const _servername: string; const _username: string; const _password: string; const _new_link: boolean): variant;
function php_mssql_query(const _query: string; const _link_identifier: variant; const _batch_size: integer): variant;
function php_mssql_result(const _result: variant; const _row: integer; const _field: variant): string;
function php_mssql_rows_affected(const _link_identifier: variant): integer;
function php_mssql_select_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_autocommit(const _mode: boolean): boolean;
function php_change_user(const _user: string; const _password: string; const _database: string): boolean;
function php_character_set_name(): string;
function php_commit(const _flags: integer; const _name: string): boolean;
function php_debug(const _message: string): boolean;
function php_dump_debug_info(): boolean;
function php_get_charset(): variant;
function php_get_client_info(): string;
function php_get_connection_stats(): boolean;
function php_kill(const _processid: integer): boolean;
function php_more_results(): boolean;
function php_multi_query(const _query: string): boolean;
function php_next_result(): boolean;
function php_options(const _option: integer; const _value: variant): boolean;
function php_ping(): boolean;
function php_poll(var _read: variant; var _error: variant; var _reject: variant; const _sec: integer; const _usec: integer): integer;
function php_query(const _query: string; const _resultmode: integer): variant;
function php_real_connect(const _host: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string; const _flags: integer): boolean;
function php_escape_string(const _escapestr: string): string;
function php_real_query(const _query: string): boolean;
function php_refresh(const _options: integer): boolean;
function php_rollback(const _flags: integer; const _name: string): boolean;
function php_rpl_query_type(const _query: string): integer;
function php_select_db(const _dbname: string): boolean;
function php_send_query(const _query: string): boolean;
function php_set_charset(const _charset: string): boolean;
function php_set_local_infile_handler(const _link: variant; const _read_func: variant): boolean;
function php_ssl_set(const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean;
function php_stat(): string;
function php_mysqli_affected_rows(const _link: variant): integer;
function php_mysqli_autocommit(const _link: variant; const _mode: boolean): boolean;
function php_mysqli_begin_transaction(const _link: variant; const _flags: integer; const _name: string): boolean;
function php_mysqli_change_user(const _link: variant; const _user: string; const _password: string; const _database: string): boolean;
function php_mysqli_character_set_name(const _link: variant): string;
function php_mysqli_get_client_info(const _link: variant): string;
function php_mysqli_get_client_version(const _link: variant): integer;
function php_mysqli_close(const _link: variant): boolean;
function php_mysqli_commit(const _link: variant; const _flags: integer; const _name: string): boolean;
function php_mysqli_connect_errno(): integer;
function php_mysqli_connect_error(): string;
function php_mysqli_debug(const _message: string): boolean;
function php_mysqli_dump_debug_info(const _link: variant): boolean;
function php_mysqli_errno(const _link: variant): integer;
function php_mysqli_error_list(const _link: variant): variant;
function php_mysqli_error(const _link: variant): string;
function php_mysqli_field_count(const _link: variant): integer;
function php_mysqli_get_charset(const _link: variant): variant;
function php_mysqli_get_client_stats(): variant;
function php_mysqli_get_connection_stats(const _link: variant): variant;
function php_mysqli_get_host_info(const _link: variant): string;
function php_mysqli_get_proto_info(const _link: variant): integer;
function php_mysqli_get_server_info(const _link: variant): string;
function php_mysqli_get_server_version(const _link: variant): integer;
function php_mysqli_info(const _link: variant): string;
function php_mysqli_insert_id(const _link: variant): variant;
function php_mysqli_kill(const _link: variant; const _processid: integer): boolean;
function php_mysqli_more_results(const _link: variant): boolean;
function php_mysqli_multi_query(const _link: variant; const _query: string): boolean;
function php_mysqli_next_result(const _link: variant): boolean;
function php_mysqli_options(const _link: variant; const _option: integer; const _value: variant): boolean;
function php_mysqli_ping(const _link: variant): boolean;
function php_mysqli_poll(var _read: variant; var _error: variant; var _reject: variant; const _sec: integer; const _usec: integer): integer;
function php_mysqli_query(const _link: variant; const _query: string; const _resultmode: integer): variant;
function php_mysqli_real_connect(const _link: variant; const _host: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string; const _flags: integer): boolean;
function php_mysqli_real_escape_string(const _link: variant; const _escapestr: string): string;
function php_mysqli_real_query(const _link: variant; const _query: string): boolean;
function php_mysqli_refresh(const _link: variant; const _options: integer): integer;
function php_mysqli_release_savepoint(const _link: variant; const _name: string): boolean;
function php_mysqli_rollback(const _link: variant; const _flags: integer; const _name: string): boolean;
function php_mysqli_rpl_query_type(const _link: variant; const _query: string): integer;
function php_mysqli_savepoint(const _link: variant; const _name: string): boolean;
function php_mysqli_select_db(const _link: variant; const _dbname: string): boolean;
function php_mysqli_send_query(const _link: variant; const _query: string): boolean;
function php_mysqli_set_charset(const _link: variant; const _charset: string): boolean;
procedure php_mysqli_set_local_infile_default(const _link: variant);
function php_mysqli_set_local_infile_handler(const _link: variant; const _read_func: variant): boolean;
function php_mysqli_sqlstate(const _link: variant): string;
function php_mysqli_ssl_set(const _link: variant; const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean;
function php_mysqli_stat(const _link: variant): string;
function php_mysqli_thread_id(const _link: variant): integer;
function php_mysqli_thread_safe(): boolean;
function php_mysqli_warning_count(const _link: variant): integer;
function php_attr_get(const _attr: integer): integer;
function php_attr_set(const _attr: integer; const _mode: integer): boolean;
function php_bind_param(const _types: string; var _var1: variant): boolean;
function php_bind_result(var _var1: variant): boolean;
procedure php_data_seek(const _offset: integer);
function php_execute(): boolean;
function php_fetch(): boolean;
procedure php_free_result();
function php_get_warnings(const _stmt: variant): variant;
function php_prepare(const _query: string): variant;
function php_send_long_data(const _param_nr: integer; const _data: string): boolean;
function php_store_result(): boolean;
function php_mysqli_stmt_affected_rows(const _stmt: variant): integer;
function php_mysqli_stmt_attr_get(const _stmt: variant; const _attr: integer): integer;
function php_mysqli_stmt_attr_set(const _stmt: variant; const _attr: integer; const _mode: integer): boolean;
function php_mysqli_stmt_bind_param(const _stmt: variant; const _types: string; var _var1: variant): boolean;
function php_mysqli_stmt_bind_result(const _stmt: variant; var _var1: variant): boolean;
function php_mysqli_stmt_close(const _stmt: variant): boolean;
procedure php_mysqli_stmt_data_seek(const _stmt: variant; const _offset: integer);
function php_mysqli_stmt_errno(const _stmt: variant): integer;
function php_mysqli_stmt_error_list(const _stmt: variant): variant;
function php_mysqli_stmt_error(const _stmt: variant): string;
function php_mysqli_stmt_execute(const _stmt: variant): boolean;
function php_mysqli_stmt_fetch(const _stmt: variant): boolean;
function php_mysqli_stmt_field_count(const _stmt: variant): integer;
procedure php_mysqli_stmt_free_result(const _stmt: variant);
function php_mysqli_stmt_get_warnings(const _stmt: variant): variant;
function php_mysqli_stmt_insert_id(const _stmt: variant): variant;
function php_mysqli_stmt_more_results(const _stmt: variant): boolean;
function php_mysqli_stmt_next_result(const _stmt: variant): boolean;
function php_mysqli_stmt_num_rows(const _stmt: variant): integer;
function php_mysqli_stmt_param_count(const _stmt: variant): integer;
function php_mysqli_stmt_prepare(const _stmt: variant; const _query: string): boolean;
function php_mysqli_stmt_reset(const _stmt: variant): boolean;
function php_mysqli_stmt_send_long_data(const _stmt: variant; const _param_nr: integer; const _data: string): boolean;
function php_mysqli_stmt_sqlstate(const _stmt: variant): string;
function php_mysqli_stmt_store_result(const _stmt: variant): boolean;
function php_fetch_all(const _resulttype: integer): variant;
function php_fetch_array(const _resulttype: integer): variant;
function php_fetch_assoc(): variant;
function php_fetch_field_direct(const _fieldnr: integer): variant;
function php_fetch_field(): variant;
function php_fetch_fields(): variant;
function php_fetch_object(const _class_name: string; const _params: variant): variant;
function php_fetch_row(): variant;
function php_field_seek(const _fieldnr: integer): boolean;
procedure php_free();
function php_mysqli_field_tell(const _result: variant): integer;
function php_mysqli_data_seek(const _result: variant; const _offset: integer): boolean;
function php_mysqli_fetch_all(const _result: variant; const _resulttype: integer): variant;
function php_mysqli_fetch_array(const _result: variant; const _resulttype: integer): variant;
function php_mysqli_fetch_assoc(const _result: variant): variant;
function php_mysqli_fetch_field_direct(const _result: variant; const _fieldnr: integer): variant;
function php_mysqli_fetch_field(const _result: variant): variant;
function php_mysqli_fetch_fields(const _result: variant): variant;
function php_mysqli_fetch_object(const _result: variant; const _class_name: string; const _params: variant): variant;
function php_mysqli_fetch_row(const _result: variant): variant;
function php_mysqli_num_fields(const _result: variant): integer;
function php_mysqli_field_seek(const _result: variant; const _fieldnr: integer): boolean;
procedure php_mysqli_free_result(const _result: variant);
function php_mysqli_fetch_lengths(const _result: variant): variant;
function php_mysqli_num_rows(const _result: variant): integer;
procedure php_embedded_server_end();
function php_embedded_server_start(const _start: boolean; const _arguments: variant; const _groups: variant): boolean;
procedure php_mysqli_embedded_server_end();
function php_mysqli_embedded_server_start(const _start: boolean; const _arguments: variant; const _groups: variant): boolean;
function php_mysqli_report(const _flags: integer): boolean;
function php_mysqli_disable_reads_from_master(const _link: variant): boolean;
function php_mysqli_disable_rpl_parse(const _link: variant): boolean;
function php_mysqli_enable_reads_from_master(const _link: variant): boolean;
function php_mysqli_enable_rpl_parse(const _link: variant): boolean;
function php_mysqli_get_cache_stats(): variant;
function php_mysqli_get_links_stats(): variant;
function php_mysqli_master_query(const _link: variant; const _query: string): boolean;
function php_mysqli_rpl_parse_enabled(const _link: variant): integer;
function php_mysqli_rpl_probe(const _link: variant): boolean;
function php_mysqli_slave_query(const _link: variant; const _query: string): boolean;
function php_mysql_affected_rows(const _link_identifier: variant): integer;
function php_mysql_client_encoding(const _link_identifier: variant): string;
function php_mysql_close(const _link_identifier: variant): boolean;
function php_mysql_connect(const _server: string): variant;
function php_mysql_create_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_mysql_data_seek(const _result: variant; const _row_number: integer): boolean;
function php_mysql_db_name(const _result: variant; const _row: integer; const _field: variant): string;
function php_mysql_db_query(const _database: string; const _query: string; const _link_identifier: variant): variant;
function php_mysql_drop_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_mysql_errno(const _link_identifier: variant): integer;
function php_mysql_error(const _link_identifier: variant): string;
function php_mysql_escape_string(const _unescaped_string: string): string;
function php_mysql_fetch_array(const _result: variant; const _result_type: integer): variant;
function php_mysql_fetch_assoc(const _result: variant): variant;
function php_mysql_fetch_field(const _result: variant; const _field_offset: integer): variant;
function php_mysql_fetch_lengths(const _result: variant): variant;
function php_mysql_fetch_object(const _result: variant; const _class_name: string; const _params: variant): variant;
function php_mysql_fetch_row(const _result: variant): variant;
function php_mysql_field_flags(const _result: variant; const _field_offset: integer): string;
function php_mysql_field_len(const _result: variant; const _field_offset: integer): integer;
function php_mysql_field_name(const _result: variant; const _field_offset: integer): string;
function php_mysql_field_seek(const _result: variant; const _field_offset: integer): boolean;
function php_mysql_field_table(const _result: variant; const _field_offset: integer): string;
function php_mysql_field_type(const _result: variant; const _field_offset: integer): string;
function php_mysql_free_result(const _result: variant): boolean;
function php_mysql_get_client_info(): string;
function php_mysql_get_host_info(const _link_identifier: variant): string;
function php_mysql_get_proto_info(const _link_identifier: variant): integer;
function php_mysql_get_server_info(const _link_identifier: variant): string;
function php_mysql_info(const _link_identifier: variant): string;
function php_mysql_insert_id(const _link_identifier: variant): integer;
function php_mysql_list_dbs(const _link_identifier: variant): variant;
function php_mysql_list_fields(const _database_name: string; const _table_name: string; const _link_identifier: variant): variant;
function php_mysql_list_processes(const _link_identifier: variant): variant;
function php_mysql_list_tables(const _database: string; const _link_identifier: variant): variant;
function php_mysql_num_fields(const _result: variant): integer;
function php_mysql_num_rows(const _result: variant): integer;
function php_mysql_pconnect(const _server: string): variant;
function php_mysql_ping(const _link_identifier: variant): boolean;
function php_mysql_query(const _query: string; const _link_identifier: variant): variant;
function php_mysql_real_escape_string(const _unescaped_string: string; const _link_identifier: variant): string;
function php_mysql_result(const _result: variant; const _row: integer; const _field: variant): string;
function php_mysql_select_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_mysql_set_charset(const _charset: string; const _link_identifier: variant): boolean;
function php_mysql_stat(const _link_identifier: variant): string;
function php_mysql_tablename(const _result: variant; const _i: integer): string;
function php_mysql_thread_id(const _link_identifier: variant): integer;
function php_mysql_unbuffered_query(const _query: string; const _link_identifier: variant): variant;
function php_mysqlnd_ms_dump_servers(const _connection: variant): variant;
function php_mysqlnd_ms_fabric_select_global(const _connection: variant; const _table_name: variant): variant;
function php_mysqlnd_ms_fabric_select_shard(const _connection: variant; const _table_name: variant; const _shard_key: variant): variant;
function php_mysqlnd_ms_get_last_gtid(const _connection: variant): string;
function php_mysqlnd_ms_get_last_used_connection(const _connection: variant): variant;
function php_mysqlnd_ms_get_stats(): variant;
function php_mysqlnd_ms_match_wild(const _table_name: string; const _wildcard: string): boolean;
function php_mysqlnd_ms_query_is_select(const _query: string): integer;
function php_mysqlnd_ms_set_qos(const _connection: variant; const _service_level: integer; const _service_level_option: integer; const _option_value: variant): boolean;
function php_mysqlnd_ms_set_user_pick_server(const _function: string): boolean;
function php_mysqlnd_ms_xa_begin(const _connection: variant; const _gtrid: string; const _timeout: integer): integer;
function php_mysqlnd_ms_xa_commit(const _connection: variant; const _gtrid: string): integer;
function php_mysqlnd_ms_xa_gc(const _connection: variant; const _gtrid: string; const _ignore_max_retries: boolean): integer;
function php_mysqlnd_ms_xa_rollback(const _connection: variant; const _gtrid: string): integer;
function php_mysqlnd_qc_clear_cache(): boolean;
function php_mysqlnd_qc_get_available_handlers(): variant;
function php_mysqlnd_qc_get_cache_info(): variant;
function php_mysqlnd_qc_get_core_stats(): variant;
function php_mysqlnd_qc_get_normalized_query_trace_log(): variant;
function php_mysqlnd_qc_get_query_trace_log(): variant;
function php_mysqlnd_qc_set_cache_condition(const _condition_type: integer; const _condition: variant; const _condition_option: variant): boolean;
function php_mysqlnd_qc_set_is_select(const _callback: string): variant;
function php_mysqlnd_qc_set_storage_handler(const _handler: string): boolean;
function php_mysqlnd_qc_set_user_handlers(const _get_hash: string; const _find_query_in_cache: string; const _return_to_cache: string; const _add_query_to_cache_if_not_exists: string; const _query_is_select: string; const _update_query_run_time_stats: string; const _get_stats: string; const _clear_cache: string): boolean;
function php_changeUser(const _connection: variant; const _user: string; const _password: string; const _database: string; const _silent: boolean; const _passwd_len: integer): boolean;
function php_charsetName(const _connection: variant): string;
function php_close(const _connection: variant; const _close_type: integer): boolean;
function php_connect(const _connection: variant; const _host: string; const _password: string; const _database: string; const _port: integer; const _socket: string; const _mysql_flags: integer): boolean;
function php_endPSession(const _connection: variant): boolean;
function php_escapeString(const _connection: variant; const _escape_string: string): string;
function php_getAffectedRows(const _connection: variant): integer;
function php_getErrorNumber(const _connection: variant): integer;
function php_getErrorString(const _connection: variant): string;
function php_getFieldCount(const _connection: variant): integer;
function php_getHostInformation(const _connection: variant): string;
function php_getLastInsertId(const _connection: variant): integer;
procedure php_getLastMessage(const _connection: variant);
function php_getProtocolInformation(const _connection: variant): string;
function php_getServerInformation(const _connection: variant): string;
function php_getServerStatistics(const _connection: variant): string;
function php_getServerVersion(const _connection: variant): integer;
function php_getSqlstate(const _connection: variant): string;
function php_getStatistics(const _connection: variant): variant;
function php_getThreadId(const _connection: variant): integer;
function php_getWarningCount(const _connection: variant): integer;
function php_init(const _connection: variant): boolean;
function php_killConnection(const _connection: variant; const _pid: integer): boolean;
function php_listFields(const _connection: variant; const _table: string; const _achtung_wild: string): variant;
procedure php_listMethod(const _connection: variant; const _query: string; const _achtung_wild: string; const _par1: string);
function php_moreResults(const _connection: variant): boolean;
function php_nextResult(const _connection: variant): boolean;
function php_ping(const _connection: variant): boolean;
function php_query(const _connection: variant; const _query: string): boolean;
function php_queryReadResultsetHeader(const _connection: variant; const _mysqlnd_stmt: variant): boolean;
function php_reapQuery(const _connection: variant): boolean;
function php_refreshServer(const _connection: variant; const _options: integer): boolean;
function php_restartPSession(const _connection: variant): boolean;
function php_selectDb(const _connection: variant; const _database: string): boolean;
function php_sendClose(const _connection: variant): boolean;
function php_sendQuery(const _connection: variant; const _query: string): boolean;
function php_serverDumpDebugInformation(const _connection: variant): boolean;
function php_setAutocommit(const _connection: variant; const _mode: integer): boolean;
function php_setCharset(const _connection: variant; const _charset: string): boolean;
function php_setClientOption(const _connection: variant; const _option: integer; const _value: integer): boolean;
procedure php_setServerOption(const _connection: variant; const _option: integer);
procedure php_shutdownServer(const _MYSQLND_UH_RES_MYSQLND_NAME: string);
function php_simpleCommand(const _connection: variant; const _command: integer; const _arg: string; const _ok_packet: integer; const _silent: boolean; const _ignore_upsert_status: boolean): boolean;
function php_simpleCommandHandleResponse(const _connection: variant; const _ok_packet: integer; const _silent: boolean; const _command: integer; const _ignore_upsert_status: boolean): boolean;
function php_sslSet(const _connection: variant; const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean;
function php_stmtInit(const _connection: variant): variant;
function php_storeResult(const _connection: variant): variant;
function php_txCommit(const _connection: variant): boolean;
function php_txRollback(const _connection: variant): boolean;
function php_useResult(const _connection: variant): variant;
function php_prepare(const _statement: variant; const _query: string): boolean;
function php_mysqlnd_uh_convert_to_mysqlnd(var _mysql_connection: variant): variant;
function php_mysqlnd_uh_set_connection_proxy(var _connection_proxy: variant; var _mysqli_connection: variant): boolean;
function php_mysqlnd_uh_set_statement_proxy(var _statement_proxy: variant): boolean;
function php_mysqlnd_memcache_get_config(const _connection: variant): variant;
function php_mysqlnd_memcache_set(const _mysql_connection: variant; const _memcache_connection: variant; const _pattern: string; const _callback: variant): boolean;
function php_oci_bind_array_by_name(const _statement: variant; const _name: string; var _var_array: variant; const _max_table_length: integer; const _max_item_length: integer; const _type: integer): boolean;
function php_oci_bind_by_name(const _statement: variant; const _bv_name: string; var _variable: variant; const _maxlength: integer; const _type: integer): boolean;
function php_oci_cancel(const _statement: variant): boolean;
function php_oci_client_version(): string;
function php_oci_close(const _connection: variant): boolean;
function php_oci_commit(const _connection: variant): boolean;
function php_oci_connect(const _username: string; const _password: string; const _connection_string: string; const _character_set: string; const _session_mode: integer): variant;
function php_oci_define_by_name(const _statement: variant; const _column_name: string; var _variable: variant; const _type: integer): boolean;
function php_oci_error(const _resource: variant): variant;
function php_oci_execute(const _statement: variant; const _mode: integer): boolean;
function php_oci_fetch_all(const _statement: variant; var _output: variant; const _skip: integer; const _maxrows: integer; const _flags: integer): integer;
function php_oci_fetch_array(const _statement: variant; const _mode: integer): variant;
function php_oci_fetch_assoc(const _statement: variant): variant;
function php_oci_fetch_object(const _statement: variant): variant;
function php_oci_fetch_row(const _statement: variant): variant;
function php_oci_fetch(const _statement: variant): boolean;
function php_oci_field_is_null(const _statement: variant; const _field: variant): boolean;
function php_oci_field_name(const _statement: variant; const _field: variant): string;
function php_oci_field_precision(const _statement: variant; const _field: variant): integer;
function php_oci_field_scale(const _statement: variant; const _field: variant): integer;
function php_oci_field_size(const _statement: variant; const _field: variant): integer;
function php_oci_field_type_raw(const _statement: variant; const _field: variant): integer;
function php_oci_field_type(const _statement: variant; const _field: variant): variant;
function php_oci_free_descriptor(const _descriptor: variant): boolean;
function php_oci_free_statement(const _statement: variant): boolean;
function php_oci_get_implicit_resultset(const _statement: variant): variant;
procedure php_oci_internal_debug(const _onoff: boolean);
function php_oci_lob_copy(const _lob_to: variant; const _lob_from: variant; const _length: integer): boolean;
function php_oci_lob_is_equal(const _lob1: variant; const _lob2: variant): boolean;
function php_oci_new_connect(const _username: string; const _password: string; const _connection_string: string; const _character_set: string; const _session_mode: integer): variant;
function php_oci_new_cursor(const _connection: variant): variant;
function php_oci_num_fields(const _statement: variant): integer;
function php_oci_num_rows(const _statement: variant): integer;
function php_oci_parse(const _connection: variant; const _sql_text: string): variant;
function php_oci_password_change(const _connection: variant; const _username: string; const _old_password: string; const _new_password: string): boolean;
function php_oci_password_change(const _dbname: string; const _username: string; const _old_password: string; const _new_password: string): variant;
function php_oci_pconnect(const _username: string; const _password: string; const _connection_string: string; const _character_set: string; const _session_mode: integer): variant;
function php_oci_result(const _statement: variant; const _field: variant): variant;
function php_oci_rollback(const _connection: variant): boolean;
function php_oci_server_version(const _connection: variant): string;
function php_oci_set_action(const _connection: variant; const _action_name: string): boolean;
function php_oci_set_client_identifier(const _connection: variant; const _client_identifier: string): boolean;
function php_oci_set_client_info(const _connection: variant; const _client_info: string): boolean;
function php_oci_set_edition(const _edition: string): boolean;
function php_oci_set_module_name(const _connection: variant; const _module_name: string): boolean;
function php_oci_set_prefetch(const _statement: variant; const _rows: integer): boolean;
function php_oci_statement_type(const _statement: variant): string;
function php_append(const _value: variant): boolean;
function php_assign(const _from: variant): boolean;
function php_assignElem(const _index: integer; const _value: variant): boolean;
function php_getElem(const _index: integer): variant;
function php_max(): integer;
function php_size(): integer;
function php_trim(const _num: integer): boolean;
function php_eof(): boolean;
function php_erase(const _offset: integer; const _length: integer): integer;
function php_export(const _filename: string; const _start: integer; const _length: integer): boolean;
function php_flush(const _flag: integer): boolean;
function php_getBuffering(): boolean;
function php_import(const _filename: string): boolean;
function php_load(): string;
function php_read(const _length: integer): string;
function php_save(const _data: string; const _offset: integer): boolean;
function php_seek(const _offset: integer; const _whence: integer): boolean;
function php_setBuffering(const _on_off: boolean): boolean;
function php_tell(): integer;
function php_truncate(const _length: integer): boolean;
function php_write(const _data: string; const _length: integer): integer;
function php_writeTemporary(const _data: string; const _lob_type: integer): boolean;
function php_px_close(const _pxdoc: variant): boolean;
function php_px_create_fp(const _pxdoc: variant; const _file: variant; const _fielddesc: variant): boolean;
function php_px_date2string(const _pxdoc: variant; const _value: integer; const _format: string): string;
function php_px_delete_record(const _pxdoc: variant; const _num: integer): boolean;
function php_px_delete(const _pxdoc: variant): boolean;
function php_px_get_field(const _pxdoc: variant; const _fieldno: integer): variant;
function php_px_get_info(const _pxdoc: variant): variant;
function php_px_get_parameter(const _pxdoc: variant; const _name: string): string;
function php_px_get_record(const _pxdoc: variant; const _num: integer; const _mode: integer): variant;
function php_px_get_schema(const _pxdoc: variant; const _mode: integer): variant;
function php_px_get_value(const _pxdoc: variant; const _name: string): extended;
function php_px_insert_record(const _pxdoc: variant; const _data: variant): integer;
function php_px_new(): variant;
function php_px_numfields(const _pxdoc: variant): integer;
function php_px_numrecords(const _pxdoc: variant): integer;
function php_px_open_fp(const _pxdoc: variant; const _file: variant): boolean;
function php_px_put_record(const _pxdoc: variant; const _record: variant; const _recpos: integer): boolean;
function php_px_retrieve_record(const _pxdoc: variant; const _num: integer; const _mode: integer): variant;
function php_px_set_blob_file(const _pxdoc: variant; const _filename: string): boolean;
function php_px_set_parameter(const _pxdoc: variant; const _name: string; const _value: string): boolean;
procedure php_px_set_tablename(const _pxdoc: variant; const _name: string);
function php_px_set_targetencoding(const _pxdoc: variant; const _encoding: string): boolean;
function php_px_set_value(const _pxdoc: variant; const _name: string; const _value: extended): boolean;
function php_px_timestamp2string(const _pxdoc: variant; const _value: extended; const _format: string): string;
function php_px_update_record(const _pxdoc: variant; const _data: variant; const _num: integer): boolean;
function php_pg_affected_rows(const _result: variant): integer;
function php_pg_cancel_query(const _connection: variant): boolean;
function php_pg_client_encoding(const _connection: variant): string;
function php_pg_close(const _connection: variant): boolean;
function php_pg_connect_poll(const _connection: variant): integer;
function php_pg_connect(const _connection_string: string; const _connect_type: integer): variant;
function php_pg_connection_busy(const _connection: variant): boolean;
function php_pg_connection_reset(const _connection: variant): boolean;
function php_pg_connection_status(const _connection: variant): integer;
function php_pg_consume_input(const _connection: variant): boolean;
function php_pg_convert(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant;
function php_pg_copy_from(const _connection: variant; const _table_name: string; const _rows: variant; const _delimiter: string; const _null_as: string): boolean;
function php_pg_copy_to(const _connection: variant; const _table_name: string; const _delimiter: string; const _null_as: string): variant;
function php_pg_dbname(const _connection: variant): string;
function php_pg_delete(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant;
function php_pg_end_copy(const _connection: variant): boolean;
function php_pg_escape_bytea(const _connection: variant; const _data: string): string;
function php_pg_escape_identifier(const _connection: variant; const _data: string): string;
function php_pg_escape_literal(const _connection: variant; const _data: string): string;
function php_pg_escape_string(const _connection: variant; const _data: string): string;
function php_pg_execute(const _connection: variant; const _stmtname: string; const _params: variant): variant;
function php_pg_fetch_all_columns(const _result: variant; const _column: integer): variant;
function php_pg_fetch_all(const _result: variant): variant;
function php_pg_fetch_array(const _result: variant; const _row: integer; const _result_type: integer): variant;
function php_pg_fetch_assoc(const _result: variant; const _row: integer): variant;
function php_pg_fetch_object(const _result: variant; const _row: integer; const _result_type: integer): variant;
function php_pg_fetch_object(const _result: variant; const _row: integer; const _class_name: string; const _params: variant): variant;
function php_pg_fetch_result(const _result: variant; const _row: integer; const _field: variant): string;
function php_pg_fetch_result(const _result: variant; const _field: variant): string;
function php_pg_fetch_row(const _result: variant; const _row: integer): variant;
function php_pg_field_is_null(const _result: variant; const _row: integer; const _field: variant): integer;
function php_pg_field_is_null(const _result: variant; const _field: variant): integer;
function php_pg_field_name(const _result: variant; const _field_number: integer): string;
function php_pg_field_num(const _result: variant; const _field_name: string): integer;
function php_pg_field_prtlen(const _result: variant; const _row_number: integer; const _field_name_or_number: variant): integer;
function php_pg_field_prtlen(const _result: variant; const _field_name_or_number: variant): integer;
function php_pg_field_size(const _result: variant; const _field_number: integer): integer;
function php_pg_field_table(const _result: variant; const _field_number: integer; const _oid_only: boolean): variant;
function php_pg_field_type_oid(const _result: variant; const _field_number: integer): integer;
function php_pg_field_type(const _result: variant; const _field_number: integer): string;
function php_pg_flush(const _connection: variant): variant;
function php_pg_free_result(const _result: variant): boolean;
function php_pg_get_notify(const _connection: variant; const _result_type: integer): variant;
function php_pg_get_pid(const _connection: variant): integer;
function php_pg_get_result(const _connection: variant): variant;
function php_pg_host(const _connection: variant): string;
function php_pg_insert(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant;
function php_pg_last_error(const _connection: variant): string;
function php_pg_last_notice(const _connection: variant): string;
function php_pg_last_oid(const _result: variant): string;
function php_pg_lo_close(const _large_object: variant): boolean;
function php_pg_lo_create(const _connection: variant; const _object_id: variant): integer;
function php_pg_lo_create(const _object_id: variant): integer;
function php_pg_lo_export(const _connection: variant; const _oid: integer; const _pathname: string): boolean;
function php_pg_lo_import(const _connection: variant; const _pathname: string; const _object_id: variant): integer;
function php_pg_lo_open(const _connection: variant; const _oid: integer; const _mode: string): variant;
function php_pg_lo_read_all(const _large_object: variant): integer;
function php_pg_lo_read(const _large_object: variant; const _len: integer): string;
function php_pg_lo_seek(const _large_object: variant; const _offset: integer; const _whence: integer): boolean;
function php_pg_lo_tell(const _large_object: variant): integer;
function php_pg_lo_truncate(const _large_object: variant; const _size: integer): boolean;
function php_pg_lo_unlink(const _connection: variant; const _oid: integer): boolean;
function php_pg_lo_write(const _large_object: variant; const _data: string; const _len: integer): integer;
function php_pg_meta_data(const _connection: variant; const _table_name: string; const _extended: boolean): variant;
function php_pg_num_fields(const _result: variant): integer;
function php_pg_num_rows(const _result: variant): integer;
function php_pg_options(const _connection: variant): string;
function php_pg_parameter_status(const _connection: variant; const _param_name: string): string;
function php_pg_pconnect(const _connection_string: string; const _connect_type: integer): variant;
function php_pg_ping(const _connection: variant): boolean;
function php_pg_port(const _connection: variant): integer;
function php_pg_prepare(const _connection: variant; const _stmtname: string; const _query: string): variant;
function php_pg_put_line(const _connection: variant; const _data: string): boolean;
function php_pg_query_params(const _connection: variant; const _query: string; const _params: variant): variant;
function php_pg_query(const _connection: variant; const _query: string): variant;
function php_pg_result_error_field(const _result: variant; const _fieldcode: integer): string;
function php_pg_result_error(const _result: variant): string;
function php_pg_result_seek(const _result: variant; const _offset: integer): boolean;
function php_pg_result_status(const _result: variant; const _type: integer): variant;
function php_pg_select(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant;
function php_pg_send_execute(const _connection: variant; const _stmtname: string; const _params: variant): boolean;
function php_pg_send_prepare(const _connection: variant; const _stmtname: string; const _query: string): boolean;
function php_pg_send_query_params(const _connection: variant; const _query: string; const _params: variant): boolean;
function php_pg_send_query(const _connection: variant; const _query: string): boolean;
function php_pg_set_client_encoding(const _connection: variant; const _encoding: string): integer;
function php_pg_set_error_verbosity(const _connection: variant; const _verbosity: integer): integer;
function php_pg_socket(const _connection: variant): variant;
function php_pg_trace(const _pathname: string; const _mode: string; const _connection: variant): boolean;
function php_pg_transaction_status(const _connection: variant): integer;
function php_pg_tty(const _connection: variant): string;
function php_pg_unescape_bytea(const _data: string): string;
function php_pg_untrace(const _connection: variant): boolean;
function php_pg_update(const _connection: variant; const _table_name: string; const _data: variant; const _condition: variant; const _options: integer): variant;
function php_pg_version(const _connection: variant): variant;
function php_sqlite_array_query(const _dbhandle: variant; const _query: string; const _result_type: integer; const _decode_binary: boolean): variant;
function php_sqlite_array_query(const _query: string; const _dbhandle: variant; const _result_type: integer; const _decode_binary: boolean): variant;
procedure php_sqlite_busy_timeout(const _dbhandle: variant; const _milliseconds: integer);
function php_sqlite_changes(const _dbhandle: variant): integer;
procedure php_sqlite_close(const _dbhandle: variant);
function php_sqlite_column(const _result: variant; const _index_or_name: variant; const _decode_binary: boolean): variant;
procedure php_sqlite_create_aggregate(const _dbhandle: variant; const _function_name: string; const _step_func: variant; const _finalize_func: variant; const _num_args: integer);
procedure php_sqlite_create_function(const _dbhandle: variant; const _function_name: string; const _callback: variant; const _num_args: integer);
function php_sqlite_current(const _result: variant; const _result_type: integer; const _decode_binary: boolean): variant;
function php_sqlite_error_string(const _error_code: integer): string;
function php_sqlite_escape_string(const _item: string): string;
function php_sqlite_exec(const _dbhandle: variant; const _query: string; var _error_msg: string): boolean;
function php_sqlite_exec(const _query: string; const _dbhandle: variant): boolean;
function php_sqlite_fetch_all(const _result: variant; const _result_type: integer; const _decode_binary: boolean): variant;
function php_sqlite_fetch_array(const _result: variant; const _result_type: integer; const _decode_binary: boolean): variant;
function php_sqlite_fetch_column_types(const _table_name: string; const _dbhandle: variant; const _result_type: integer): variant;
function php_sqlite_fetch_object(const _result: variant; const _class_name: string; const _ctor_params: variant; const _decode_binary: boolean): variant;
function php_sqlite_fetch_single(const _result: variant; const _decode_binary: boolean): string;
function php_sqlite_field_name(const _result: variant; const _field_index: integer): string;
function php_sqlite_has_more(const _result: variant): boolean;
function php_sqlite_has_prev(const _result: variant): boolean;
function php_sqlite_last_error(const _dbhandle: variant): integer;
function php_sqlite_last_insert_rowid(const _dbhandle: variant): integer;
function php_sqlite_libencoding(): string;
function php_sqlite_libversion(): string;
function php_sqlite_next(const _result: variant): boolean;
function php_sqlite_num_fields(const _result: variant): integer;
function php_sqlite_num_rows(const _result: variant): integer;
function php_sqlite_open(const _filename: string; const _mode: integer; var _error_message: string): variant;
function php_sqlite_popen(const _filename: string; const _mode: integer; var _error_message: string): variant;
function php_sqlite_prev(const _result: variant): boolean;
function php_sqlite_query(const _dbhandle: variant; const _query: string; const _result_type: integer; var _error_msg: string): variant;
function php_sqlite_query(const _query: string; const _dbhandle: variant; const _result_type: integer; var _error_msg: string): variant;
function php_sqlite_rewind(const _result: variant): boolean;
function php_sqlite_seek(const _result: variant; const _rownum: integer): boolean;
function php_sqlite_single_query(const _db: variant; const _query: string; const _first_row_only: boolean; const _decode_binary: boolean): variant;
function php_sqlite_udf_decode_binary(const _data: string): string;
function php_sqlite_udf_encode_binary(const _data: string): string;
function php_sqlite_unbuffered_query(const _dbhandle: variant; const _query: string; const _result_type: integer; var _error_msg: string): variant;
function php_sqlite_unbuffered_query(const _query: string; const _dbhandle: variant; const _result_type: integer; var _error_msg: string): variant;
function php_sqlite_valid(const _result: variant): boolean;
function php_busyTimeout(const _msecs: integer): boolean;
function php_changes(): integer;
function php_createAggregate(const _name: string; const _step_callback: variant; const _final_callback: variant; const _argument_count: integer): boolean;
function php_createCollation(const _name: string; const _callback: variant): boolean;
function php_createFunction(const _name: string; const _callback: variant; const _argument_count: integer): boolean;
function php_enableExceptions(const _enableExceptions: boolean): boolean;
function php_escapeString(const _value: string): string;
function php_lastErrorCode(): integer;
function php_lastErrorMsg(): string;
function php_lastInsertRowID(): integer;
function php_loadExtension(const _shared_library: string): boolean;
procedure php_open(const _filename: string; const _flags: integer; const _encryption_key: string);
function php_querySingle(const _query: string; const _entire_row: boolean): variant;
function php_version(): variant;
function php_bindParam(const _sql_param: string; var _param: variant; const _type: integer): boolean;
function php_bindValue(const _sql_param: string; const _value: variant; const _type: integer): boolean;
function php_clear(): boolean;
function php_paramCount(): integer;
function php_columnName(const _column_number: integer): string;
function php_columnType(const _column_number: integer): integer;
function php_fetchArray(const _mode: integer): variant;
function php_finalize(): boolean;
function php_numColumns(): integer;
function php_sqlsrv_begin_transaction(const _conn: variant): boolean;
function php_sqlsrv_cancel(const _stmt: variant): boolean;
function php_sqlsrv_client_info(const _conn: variant): variant;
function php_sqlsrv_close(const _conn: variant): boolean;
function php_sqlsrv_commit(const _conn: variant): boolean;
function php_sqlsrv_configure(const _setting: string; const _value: variant): boolean;
function php_sqlsrv_connect(const _serverName: string; const _connectionInfo: variant): variant;
function php_sqlsrv_errors(const _errorsOrWarnings: integer): variant;
function php_sqlsrv_execute(const _stmt: variant): boolean;
function php_sqlsrv_fetch_array(const _stmt: variant; const _fetchType: integer; const _row: integer; const _offset: integer): variant;
function php_sqlsrv_fetch_object(const _stmt: variant; const _className: string; const _ctorParams: variant; const _row: integer; const _offset: integer): variant;
function php_sqlsrv_fetch(const _stmt: variant; const _row: integer; const _offset: integer): variant;
function php_sqlsrv_field_metadata(const _stmt: variant): variant;
function php_sqlsrv_free_stmt(const _stmt: variant): boolean;
function php_sqlsrv_get_config(const _setting: string): variant;
function php_sqlsrv_get_field(const _stmt: variant; const _fieldIndex: integer; const _getAsType: integer): variant;
function php_sqlsrv_has_rows(const _stmt: variant): boolean;
function php_sqlsrv_next_result(const _stmt: variant): variant;
function php_sqlsrv_num_fields(const _stmt: variant): variant;
function php_sqlsrv_num_rows(const _stmt: variant): variant;
function php_sqlsrv_prepare(const _conn: variant; const _sql: string; const _params: variant; const _options: variant): variant;
function php_sqlsrv_query(const _conn: variant; const _sql: string; const _params: variant; const _options: variant): variant;
function php_sqlsrv_rollback(const _conn: variant): boolean;
function php_sqlsrv_rows_affected(const _stmt: variant): integer;
function php_sqlsrv_send_stream_data(const _stmt: variant): boolean;
function php_sqlsrv_server_info(const _conn: variant): variant;
function php_sybase_affected_rows(const _link_identifier: variant): integer;
function php_sybase_close(const _link_identifier: variant): boolean;
function php_sybase_connect(const _servername: string; const _username: string; const _password: string; const _charset: string; const _appname: string; const _new: boolean): variant;
function php_sybase_data_seek(const _result_identifier: variant; const _row_number: integer): boolean;
procedure php_sybase_deadlock_retry_count(const _retry_count: integer);
function php_sybase_fetch_array(const _result: variant): variant;
function php_sybase_fetch_assoc(const _result: variant): variant;
function php_sybase_fetch_field(const _result: variant; const _field_offset: integer): variant;
function php_sybase_fetch_object(const _result: variant; const _object: variant): variant;
function php_sybase_fetch_row(const _result: variant): variant;
function php_sybase_field_seek(const _result: variant; const _field_offset: integer): boolean;
function php_sybase_free_result(const _result: variant): boolean;
function php_sybase_get_last_message(): string;
procedure php_sybase_min_client_severity(const _severity: integer);
procedure php_sybase_min_error_severity(const _severity: integer);
procedure php_sybase_min_message_severity(const _severity: integer);
procedure php_sybase_min_server_severity(const _severity: integer);
function php_sybase_num_fields(const _result: variant): integer;
function php_sybase_num_rows(const _result: variant): integer;
function php_sybase_pconnect(const _servername: string; const _username: string; const _password: string; const _charset: string; const _appname: string): variant;
function php_sybase_query(const _query: string; const _link_identifier: variant): variant;
function php_sybase_result(const _result: variant; const _row: integer; const _field: variant): string;
function php_sybase_select_db(const _database_name: string; const _link_identifier: variant): boolean;
function php_sybase_set_message_handler(const _handler: variant; const _link_identifier: variant): boolean;
function php_sybase_unbuffered_query(const _query: string; const _link_identifier: variant; const _store_result: boolean): variant;
function php_add(const _key: string; const _increment: variant; const _type: integer): variant;
function php_ext(const _name: string; const _options: integer; const _key: string; const _value: string): string;
function php_fwmKeys(const _prefix: string; const _max_recs: integer): variant;
function php_get(const _keys: variant): variant;
function php_num(): integer;
function php_putShl(const _key: string; const _value: string; const _width: integer): variant;
function php_restore(const _log_dir: string; const _timestamp: integer; const _check_consistency: boolean): variant;
function php_setMaster(const _host: string; const _port: integer; const _timestamp: integer; const _check_consistency: boolean): variant;
function php_size(const _key: string): integer;
function php_sync(): variant;
function php_vanish(): variant;
procedure php_add(const _key: string; const _increment: variant; const _type: string);
function php_genUid(): integer;
procedure php_out(const _keys: variant);
procedure php_putCat(const _key: string; const _columns: variant);
procedure php_putKeep(const _key: string; const _columns: variant);
procedure php_putNr(const _keys: variant; const _value: string);
function php_setIndex(const _column: string; const _type: integer): variant;
function php_addCond(const _name: string; const _op: integer; const _expr: string): variant;
function php_hint(): string;
function php_metaSearch(const _queries: variant; const _type: integer): variant;
function php_search(): variant;
function php_setLimit(const _max: integer; const _skip: integer): variant;
function php_setOrder(const _name: string; const _type: integer): variant;
function php_cal_days_in_month(const _calendar: integer; const _month: integer; const _year: integer): integer;
function php_cal_from_jd(const _jd: integer; const _calendar: integer): variant;
function php_cal_info(const _calendar: integer): variant;
function php_cal_to_jd(const _calendar: integer; const _month: integer; const _day: integer; const _year: integer): integer;
function php_easter_date(const _year: integer): integer;
function php_easter_days(const _year: integer): integer;
function php_frenchtojd(const _month: integer; const _day: integer; const _year: integer): integer;
function php_gregoriantojd(const _month: integer; const _day: integer; const _year: integer): integer;
function php_jddayofweek(const _julianday: integer; const _mode: integer): variant;
function php_jdmonthname(const _julianday: integer; const _mode: integer): string;
function php_jdtofrench(const _juliandaycount: integer): string;
function php_jdtogregorian(const _julianday: integer): string;
function php_jdtojewish(const _juliandaycount: integer; const _hebrew: boolean; const _fl: integer): string;
function php_jdtojulian(const _julianday: integer): string;
function php_jdtounix(const _jday: integer): integer;
function php_jewishtojd(const _month: integer; const _day: integer; const _year: integer): integer;
function php_juliantojd(const _month: integer; const _day: integer; const _year: integer): integer;
function php_unixtojd(const _timestamp: integer): integer;
function php_getLastErrors(): variant;
function php_format(const _format: string): string;
function php_getOffset(): integer;
function php_date_get_last_errors(): variant;
function php_date_format(const _object: variant; const _format: string): string;
function php_date_offset_get(const _object: variant): integer;
function php_date_timestamp_get(const _object: variant): integer;
function php_getLocation(): variant;
function php_getOffset(const _datetime: variant): integer;
function php_getTransitions(const _timestamp_begin: integer; const _timestamp_end: integer): variant;
function php_listAbbreviations(): variant;
function php_listIdentifiers(const _what: integer; const _country: string): variant;
function php_timezone_location_get(const _object: variant): variant;
function php_timezone_name_get(const _object: variant): string;
function php_timezone_offset_get(const _object: variant; const _datetime: variant): integer;
function php_timezone_transitions_get(const _object: variant; const _timestamp_begin: integer; const _timestamp_end: integer): variant;
function php_timezone_abbreviations_list(): variant;
function php_timezone_identifiers_list(const _what: integer; const _country: string): variant;
function php_checkdate(const _month: integer; const _day: integer; const _year: integer): boolean;
function php_date_default_timezone_get(): string;
function php_date_default_timezone_set(const _timezone_identifier: string): boolean;
function php_date_parse_from_format(const _format: string; const _date: string): variant;
function php_date_parse(const _date: string): variant;
function php_date_sun_info(const _time: integer; const _latitude: extended; const _longitude: extended): variant;
function php_date_sunrise(const _timestamp: integer; const _format: integer; const _latitude: extended): variant;
function php_date_sunset(const _timestamp: integer; const _format: integer; const _latitude: extended): variant;
function php_date(const _format: string; const _timestamp: integer): string;
function php_getdate(const _timestamp: integer): variant;
function php_gettimeofday(const _return_float: boolean): variant;
function php_gmdate(const _format: string; const _timestamp: integer): string;
function php_gmmktime(const _hour: integer): integer;
function php_gmstrftime(const _format: string; const _timestamp: integer): string;
function php_idate(const _format: string; const _timestamp: integer): integer;
function php_localtime(const _timestamp: integer): variant;
function php_microtime(const _get_as_float: boolean): variant;
function php_mktime(const _hour: integer): integer;
function php_strftime(const _format: string; const _timestamp: integer): string;
function php_strptime(const _date: string; const _format: string): variant;
function php_strtotime(const _time: string; const _now: integer): integer;
function php_time(): integer;
function php_timezone_name_from_abbr(const _abbr: string; const _gmtOffset: integer; const _isdst: integer): string;
function php_timezone_version_get(): string;
function php_getElapsedTicks(): integer;
function php_getFrequency(): integer;
function php_getLastElapsedTicks(): integer;
function php_isRunning(): boolean;
procedure php_start();
procedure php_stop();
function php_getElapsedTime(const _unit: integer): extended;
function php_getLastElapsedTime(const _unit: integer): extended;
procedure php_dio_close(const _fd: variant);
function php_dio_fcntl(const _fd: variant; const _cmd: integer; const _args: variant): variant;
function php_dio_open(const _filename: string; const _flags: integer; const _mode: integer): variant;
function php_dio_read(const _fd: variant; const _len: integer): string;
function php_dio_seek(const _fd: variant; const _pos: integer; const _whence: integer): integer;
function php_dio_stat(const _fd: variant): variant;
function php_dio_tcsetattr(const _fd: variant; const _options: variant): boolean;
function php_dio_truncate(const _fd: variant; const _offset: integer): boolean;
function php_dio_write(const _fd: variant; const _data: string; const _len: integer): integer;
function php_read(const _dir_handle: variant): string;
procedure php_rewind(const _dir_handle: variant);
function php_chdir(const _directory: string): boolean;
function php_chroot(const _directory: string): boolean;
procedure php_closedir(const _dir_handle: variant);
function php_getcwd(): string;
function php_opendir(const _path: string; const _context: variant): variant;
function php_readdir(const _dir_handle: variant): string;
procedure php_rewinddir(const _dir_handle: variant);
function php_scandir(const _directory: string; const _sorting_order: integer; const _context: variant): variant;
function php_finfo_buffer(const _finfo: variant; const _string: string; const _options: integer; const _context: variant): string;
function php_finfo_close(const _finfo: variant): boolean;
function php_finfo_file(const _finfo: variant; const _file_name: string; const _options: integer; const _context: variant): string;
function php_finfo_open(const _options: integer; const _magic_file: string): variant;
function php_finfo_set_flags(const _finfo: variant; const _options: integer): boolean;
function php_mime_content_type(const _filename: string): string;
function php_buffer(const _string: string; const _options: integer; const _context: variant): string;
function php_file(const _file_name: string; const _options: integer; const _context: variant): string;
function php_set_flags(const _options: integer): boolean;
function php_basename(const _path: string; const _suffix: string): string;
function php_chgrp(const _filename: string; const _group: variant): boolean;
function php_chmod(const _filename: string; const _mode: integer): boolean;
function php_chown(const _filename: string; const _user: variant): boolean;
procedure php_clearstatcache(const _clear_realpath_cache: boolean; const _filename: string);
function php_copy(const _source: string; const _dest: string; const _context: variant): boolean;
function php_dirname(const _path: string; const _levels: integer): string;
function php_disk_free_space(const _directory: string): extended;
function php_disk_total_space(const _directory: string): extended;
function php_fclose(const _handle: variant): boolean;
function php_feof(const _handle: variant): boolean;
function php_fflush(const _handle: variant): boolean;
function php_fgetc(const _handle: variant): string;
function php_fgetcsv(const _handle: variant; const _length: integer; const _delimiter: string; const _enclosure: string; const _escape: string): variant;
function php_fgets(const _handle: variant; const _length: integer): string;
function php_fgetss(const _handle: variant; const _length: integer; const _allowable_tags: string): string;
function php_file_exists(const _filename: string): boolean;
function php_file_get_contents(const _filename: string; const _use_include_path: boolean; const _context: variant; const _offset: integer; const _maxlen: integer): string;
function php_file_put_contents(const _filename: string; const _data: variant; const _flags: integer; const _context: variant): integer;
function php_fileatime(const _filename: string): integer;
function php_filectime(const _filename: string): integer;
function php_filegroup(const _filename: string): integer;
function php_fileinode(const _filename: string): integer;
function php_filemtime(const _filename: string): integer;
function php_fileowner(const _filename: string): integer;
function php_fileperms(const _filename: string): integer;
function php_filesize(const _filename: string): integer;
function php_filetype(const _filename: string): string;
function php_flock(const _handle: variant; const _operation: integer; var _wouldblock: integer): boolean;
function php_fnmatch(const _pattern: string; const _string: string; const _flags: integer): boolean;
function php_fopen(const _filename: string; const _mode: string; const _use_include_path: boolean; const _context: variant): variant;
function php_fpassthru(const _handle: variant): integer;
function php_fputcsv(const _handle: variant; const _fields: variant; const _delimiter: string; const _enclosure: string; const _escape_char: string): integer;
function php_fread(const _handle: variant; const _length: integer): string;
function php_fscanf(const _handle: variant; const _format: string): variant;
function php_fseek(const _handle: variant; const _offset: integer; const _whence: integer): integer;
function php_fstat(const _handle: variant): variant;
function php_ftell(const _handle: variant): integer;
function php_ftruncate(const _handle: variant; const _size: integer): boolean;
function php_fwrite(const _handle: variant; const _string: string; const _length: integer): integer;
function php_glob(const _pattern: string; const _flags: integer): variant;
function php_is_dir(const _filename: string): boolean;
function php_is_executable(const _filename: string): boolean;
function php_is_file(const _filename: string): boolean;
function php_is_link(const _filename: string): boolean;
function php_is_readable(const _filename: string): boolean;
function php_is_uploaded_file(const _filename: string): boolean;
function php_is_writable(const _filename: string): boolean;
function php_lchgrp(const _filename: string; const _group: variant): boolean;
function php_lchown(const _filename: string; const _user: variant): boolean;
function php_link(const _target: string; const _link: string): boolean;
function php_linkinfo(const _path: string): integer;
function php_lstat(const _filename: string): variant;
function php_mkdir(const _pathname: string; const _mode: integer; const _recursive: boolean; const _context: variant): boolean;
function php_move_uploaded_file(const _filename: string; const _destination: string): boolean;
function php_parse_ini_file(const _filename: string; const _process_sections: boolean; const _scanner_mode: integer): variant;
function php_parse_ini_string(const _ini: string; const _process_sections: boolean; const _scanner_mode: integer): variant;
function php_pathinfo(const _path: string; const _options: integer): variant;
function php_pclose(const _handle: variant): integer;
function php_popen(const _command: string; const _mode: string): variant;
function php_readfile(const _filename: string; const _use_include_path: boolean; const _context: variant): integer;
function php_readlink(const _path: string): string;
function php_realpath_cache_get(): variant;
function php_realpath_cache_size(): integer;
function php_realpath(const _path: string): string;
function php_rename(const _oldname: string; const _newname: string; const _context: variant): boolean;
function php_rmdir(const _dirname: string; const _context: variant): boolean;
function php_stat(const _filename: string): variant;
function php_symlink(const _target: string; const _link: string): boolean;
function php_tempnam(const _dir: string; const _prefix: string): string;
function php_tmpfile(): variant;
function php_touch(const _filename: string; const _time: integer): boolean;
function php_umask(const _mask: integer): integer;
function php_unlink(const _filename: string; const _context: variant): boolean;
function php_inotify_add_watch(const _inotify_instance: variant; const _pathname: string; const _mask: integer): integer;
function php_inotify_init(): variant;
function php_inotify_queue_len(const _inotify_instance: variant): integer;
function php_inotify_read(const _inotify_instance: variant): variant;
function php_inotify_rm_watch(const _inotify_instance: variant; const _watch_descriptor: integer): boolean;
procedure php_setproctitle(const _title: string);
function php_setthreadtitle(const _title: string): boolean;
function php_xattr_get(const _filename: string; const _name: string; const _flags: integer): string;
function php_xattr_list(const _filename: string; const _flags: integer): variant;
function php_xattr_remove(const _filename: string; const _name: string; const _flags: integer): boolean;
function php_xattr_set(const _filename: string; const _name: string; const _value: string; const _flags: integer): boolean;
function php_xattr_supported(const _filename: string; const _flags: integer): boolean;
function php_xdiff_file_bdiff_size(const _file: string): integer;
function php_xdiff_file_bdiff(const _old_file: string; const _new_file: string; const _dest: string): boolean;
function php_xdiff_file_bpatch(const _file: string; const _patch: string; const _dest: string): boolean;
function php_xdiff_file_diff_binary(const _old_file: string; const _new_file: string; const _dest: string): boolean;
function php_xdiff_file_diff(const _old_file: string; const _new_file: string; const _dest: string; const _context: integer; const _minimal: boolean): boolean;
function php_xdiff_file_merge3(const _old_file: string; const _new_file1: string; const _new_file2: string; const _dest: string): variant;
function php_xdiff_file_patch_binary(const _file: string; const _patch: string; const _dest: string): boolean;
function php_xdiff_file_patch(const _file: string; const _patch: string; const _dest: string; const _flags: integer): variant;
function php_xdiff_file_rabdiff(const _old_file: string; const _new_file: string; const _dest: string): boolean;
function php_xdiff_string_bdiff_size(const _patch: string): integer;
function php_xdiff_string_bdiff(const _old_data: string; const _new_data: string): string;
function php_xdiff_string_bpatch(const _str: string; const _patch: string): string;
function php_xdiff_string_diff(const _old_data: string; const _new_data: string; const _context: integer; const _minimal: boolean): string;
function php_xdiff_string_merge3(const _old_data: string; const _new_data1: string; const _new_data2: string; var _error: string): variant;
function php_xdiff_string_patch_binary(const _str: string; const _patch: string): string;
function php_xdiff_string_patch(const _str: string; const _patch: string; const _flags: integer; var _error: string): string;
function php_enchant_broker_describe(const _broker: variant): variant;
function php_enchant_broker_dict_exists(const _broker: variant; const _tag: string): boolean;
function php_enchant_broker_free_dict(const _dict: variant): boolean;
function php_enchant_broker_free(const _broker: variant): boolean;
function php_enchant_broker_get_dict_path(const _broker: variant; const _dict_type: integer): boolean;
function php_enchant_broker_get_error(const _broker: variant): string;
function php_enchant_broker_init(): variant;
function php_enchant_broker_list_dicts(const _broker: variant): variant;
function php_enchant_broker_request_dict(const _broker: variant; const _tag: string): variant;
function php_enchant_broker_request_pwl_dict(const _broker: variant; const _filename: string): variant;
function php_enchant_broker_set_dict_path(const _broker: variant; const _dict_type: integer; const _value: string): boolean;
function php_enchant_broker_set_ordering(const _broker: variant; const _tag: string; const _ordering: string): boolean;
procedure php_enchant_dict_add_to_personal(const _dict: variant; const _word: string);
procedure php_enchant_dict_add_to_session(const _dict: variant; const _word: string);
function php_enchant_dict_check(const _dict: variant; const _word: string): boolean;
function php_enchant_dict_describe(const _dict: variant): variant;
function php_enchant_dict_get_error(const _dict: variant): string;
function php_enchant_dict_is_in_session(const _dict: variant; const _word: string): boolean;
function php_enchant_dict_quick_check(const _dict: variant; const _word: string; var _suggestions: variant): boolean;
procedure php_enchant_dict_store_replacement(const _dict: variant; const _mis: string; const _cor: string);
function php_enchant_dict_suggest(const _dict: variant; const _word: string): variant;
function php_fribidi_log2vis(const _str: string; const _direction: string; const _charset: integer): string;
function php_connect(const _dsn: string): boolean;
function php_country(const _country: integer): variant;
function php_get(const _name: string; const _country: integer): integer;
function php_isNick(const _name0: string; const _name1: string; const _country: integer): variant;
function php_similarNames(const _name: string; const _country: integer): variant;
function php_bind_textdomain_codeset(const _domain: string; const _codeset: string): string;
function php_bindtextdomain(const _domain: string; const _directory: string): string;
function php_dcgettext(const _domain: string; const _message: string; const _category: integer): string;
function php_dcngettext(const _domain: string; const _msgid1: string; const _msgid2: string; const _n: integer; const _category: integer): string;
function php_dgettext(const _domain: string; const _message: string): string;
function php_dngettext(const _domain: string; const _msgid1: string; const _msgid2: string; const _n: integer): string;
function php_gettext(const _message: string): string;
function php_ngettext(const _msgid1: string; const _msgid2: string; const _n: integer): string;
function php_textdomain(const _text_domain: string): string;
function php_iconv_get_encoding(const _type: string): variant;
function php_iconv_mime_decode_headers(const _encoded_headers: string; const _mode: integer; const _charset: string): variant;
function php_iconv_mime_decode(const _encoded_header: string; const _mode: integer; const _charset: string): string;
function php_iconv_mime_encode(const _field_name: string; const _field_value: string; const _preferences: variant): string;
function php_iconv_set_encoding(const _type: string; const _charset: string): boolean;
function php_iconv_strlen(const _str: string; const _charset: string): integer;
function php_iconv_strpos(const _haystack: string; const _needle: string; const _offset: integer; const _charset: string): integer;
function php_iconv_strrpos(const _haystack: string; const _needle: string; const _charset: string): integer;
function php_iconv_substr(const _str: string; const _offset: integer; const _length: integer): string;
function php_iconv(const _in_charset: string; const _out_charset: string; const _str: string): string;
function php_ob_iconv_handler(const _contents: string; const _status: integer): string;
function php_asort(var _arr: variant; const _sort_flag: integer): boolean;
function php_compare(const _str1: string; const _str2: string): integer;
function php_getErrorCode(): integer;
function php_getErrorMessage(): string;
function php_getLocale(const _type: integer): string;
function php_getSortKey(const _str: string): string;
function php_getStrength(): integer;
function php_setAttribute(const _attr: integer; const _val: integer): boolean;
function php_setStrength(const _strength: integer): boolean;
function php_sortWithSortKeys(var _arr: variant): boolean;
function php_sort(var _arr: variant; const _sort_flag: integer): boolean;
function php_collator_asort(const _coll: variant; var _arr: variant; const _sort_flag: integer): boolean;
function php_collator_compare(const _coll: variant; const _str1: string; const _str2: string): integer;
function php_collator_get_attribute(const _coll: variant; const _attr: integer): integer;
function php_collator_get_error_code(const _coll: variant): integer;
function php_collator_get_error_message(const _coll: variant): string;
function php_collator_get_locale(const _coll: variant; const _type: integer): string;
function php_collator_get_sort_key(const _coll: variant; const _str: string): string;
function php_collator_get_strength(const _coll: variant): integer;
function php_collator_set_attribute(const _coll: variant; const _attr: integer; const _val: integer): boolean;
function php_collator_set_strength(const _coll: variant; const _strength: integer): boolean;
function php_collator_sort_with_sort_keys(const _coll: variant; var _arr: variant): boolean;
function php_collator_sort(const _coll: variant; var _arr: variant; const _sort_flag: integer): boolean;
function php_formatCurrency(const _value: extended; const _currency: string): string;
function php_format(const _value: variant; const _type: integer): string;
function php_getSymbol(const _attr: integer): string;
function php_getTextAttribute(const _attr: integer): string;
function php_parseCurrency(const _value: string; var _currency: string; var _position: integer): extended;
function php_parse(const _value: string; const _type: integer; var _position: integer): variant;
function php_setPattern(const _pattern: string): boolean;
function php_setSymbol(const _attr: integer; const _value: string): boolean;
function php_setTextAttribute(const _attr: integer; const _value: string): boolean;
function php_numfmt_format_currency(const _fmt: variant; const _value: extended; const _currency: string): string;
function php_numfmt_format(const _fmt: variant; const _value: variant; const _type: integer): string;
function php_numfmt_get_attribute(const _fmt: variant; const _attr: integer): integer;
function php_numfmt_get_error_code(const _fmt: variant): integer;
function php_numfmt_get_error_message(const _fmt: variant): string;
function php_numfmt_get_locale(const _fmt: variant; const _type: integer): string;
function php_numfmt_get_pattern(const _fmt: variant): string;
function php_numfmt_get_symbol(const _fmt: variant; const _attr: integer): string;
function php_numfmt_get_text_attribute(const _fmt: variant; const _attr: integer): string;
function php_numfmt_parse_currency(const _fmt: variant; const _value: string; var _currency: string; var _position: integer): extended;
function php_numfmt_parse(const _fmt: variant; const _value: string; const _type: integer; var _position: integer): variant;
function php_numfmt_set_attribute(const _fmt: variant; const _attr: integer; const _value: integer): boolean;
function php_numfmt_set_pattern(const _fmt: variant; const _pattern: string): boolean;
function php_numfmt_set_symbol(const _fmt: variant; const _attr: integer; const _value: string): boolean;
function php_numfmt_set_text_attribute(const _fmt: variant; const _attr: integer; const _value: string): boolean;
function php_acceptFromHttp(const _header: string): string;
function php_canonicalize(const _locale: string): string;
function php_composeLocale(const _subtags: variant): string;
function php_filterMatches(const _langtag: string; const _locale: string; const _canonicalize: boolean): boolean;
function php_getAllVariants(const _locale: string): variant;
function php_getDefault(): string;
function php_getDisplayLanguage(const _locale: string; const _in_locale: string): string;
function php_getDisplayName(const _locale: string; const _in_locale: string): string;
function php_getDisplayRegion(const _locale: string; const _in_locale: string): string;
function php_getDisplayScript(const _locale: string; const _in_locale: string): string;
function php_getDisplayVariant(const _locale: string; const _in_locale: string): string;
function php_getKeywords(const _locale: string): variant;
function php_getPrimaryLanguage(const _locale: string): string;
function php_getRegion(const _locale: string): string;
function php_getScript(const _locale: string): string;
function php_lookup(const _langtag: variant; const _locale: string; const _canonicalize: boolean; const _default: string): string;
function php_parseLocale(const _locale: string): variant;
function php_setDefault(const _locale: string): boolean;
function php_locale_accept_from_http(const _header: string): string;
function php_locale_compose(const _subtags: variant): string;
function php_locale_filter_matches(const _langtag: string; const _locale: string; const _canonicalize: boolean): boolean;
function php_locale_get_all_variants(const _locale: string): variant;
function php_locale_get_default(): string;
function php_locale_get_display_language(const _locale: string; const _in_locale: string): string;
function php_locale_get_display_name(const _locale: string; const _in_locale: string): string;
function php_locale_get_display_region(const _locale: string; const _in_locale: string): string;
function php_locale_get_display_script(const _locale: string; const _in_locale: string): string;
function php_locale_get_display_variant(const _locale: string; const _in_locale: string): string;
function php_locale_get_keywords(const _locale: string): variant;
function php_locale_get_primary_language(const _locale: string): string;
function php_locale_get_region(const _locale: string): string;
function php_locale_get_script(const _locale: string): string;
function php_locale_lookup(const _langtag: variant; const _locale: string; const _canonicalize: boolean; const _default: string): string;
function php_locale_parse(const _locale: string): variant;
function php_locale_set_default(const _locale: string): boolean;
function php_isNormalized(const _input: string; const _form: integer): boolean;
function php_normalize(const _input: string; const _form: integer): string;
function php_normalizer_is_normalized(const _input: string; const _form: integer): boolean;
function php_normalizer_normalize(const _input: string; const _form: integer): string;
function php_formatMessage(const _locale: string; const _pattern: string; const _args: variant): string;
function php_format(const _args: variant): string;
function php_getLocale(): string;
function php_parseMessage(const _locale: string; const _pattern: string; const _source: string): variant;
function php_parse(const _value: string): variant;
function php_msgfmt_format_message(const _locale: string; const _pattern: string; const _args: variant): string;
function php_msgfmt_format(const _fmt: variant; const _args: variant): string;
function php_msgfmt_get_error_code(const _fmt: variant): integer;
function php_msgfmt_get_error_message(const _fmt: variant): string;
function php_msgfmt_get_locale(const _formatter: variant): string;
function php_msgfmt_get_pattern(const _fmt: variant): string;
function php_msgfmt_parse_message(const _locale: string; const _pattern: string; const _value: string): variant;
function php_msgfmt_parse(const _fmt: variant; const _value: string): variant;
function php_msgfmt_set_pattern(const _fmt: variant; const _pattern: string): boolean;
function php_add(const _field: integer; const _amount: integer): boolean;
function php_intlcal_add(const _cal: variant; const _field: integer; const _amount: integer): boolean;
function php_after(const _other: variant): boolean;
function php_intlcal_after(const _cal: variant; const _other: variant): boolean;
function php_before(const _other: variant): boolean;
function php_intlcal_before(const _cal: variant; const _other: variant): boolean;
function php_clear(const _field: integer): boolean;
function php_intlcal_clear(const _cal: variant; const _field: integer): boolean;
function php_equals(const _other: variant): boolean;
function php_intlcal_equals(const _cal: variant; const _other: variant): boolean;
function php_fieldDifference(const _when: extended; const _field: integer): integer;
function php_intlcal_field_difference(const _cal: variant; const _when: extended; const _field: integer): integer;
function php_get(const _field: integer): integer;
function php_intlcal_get(const _cal: variant; const _field: integer): integer;
function php_getActualMaximum(const _field: integer): integer;
function php_intlcal_get_actual_maximum(const _cal: variant; const _field: integer): integer;
function php_getActualMinimum(const _field: integer): integer;
function php_intlcal_get_actual_minimum(const _cal: variant; const _field: integer): integer;
function php_getAvailableLocales(): variant;
function php_intlcal_get_available_locales(): variant;
function php_getDayOfWeekType(const _dayOfWeek: integer): integer;
function php_intlcal_get_day_of_week_type(const _cal: variant; const _dayOfWeek: integer): integer;
function php_getFirstDayOfWeek(): integer;
function php_intlcal_get_first_day_of_week(const _cal: variant): integer;
function php_getGreatestMinimum(const _field: integer): integer;
function php_intlcal_get_greatest_minimum(const _cal: variant; const _field: integer): integer;
function php_getLeastMaximum(const _field: integer): integer;
function php_intlcal_get_least_maximum(const _cal: variant; const _field: integer): integer;
function php_intlcal_get_locale(const _cal: variant; const _localeType: integer): string;
function php_getMaximum(const _field: integer): integer;
function php_intlcal_get_maximum(const _cal: variant; const _field: integer): integer;
function php_getMinimalDaysInFirstWeek(): integer;
function php_intlcal_get_minimal_days_in_first_week(const _cal: variant): integer;
function php_getMinimum(const _field: integer): integer;
function php_intlcal_get_minimum(const _cal: variant; const _field: integer): integer;
function php_getNow(): extended;
function php_intlcal_get_now(): extended;
function php_getRepeatedWallTimeOption(): integer;
function php_intlcal_get_repeated_wall_time_option(const _cal: variant): integer;
function php_getSkippedWallTimeOption(): integer;
function php_intlcal_get_skipped_wall_time_option(const _cal: variant): integer;
function php_getTime(): extended;
function php_intlcal_get_time(const _cal: variant): extended;
function php_intlcal_get_type(const _cal: variant): string;
function php_getWeekendTransition(const _dayOfWeek: string): integer;
function php_intlcal_get_weekend_transition(const _cal: variant; const _dayOfWeek: string): integer;
function php_inDaylightTime(): boolean;
function php_intlcal_in_daylight_time(const _cal: variant): boolean;
function php_isEquivalentTo(const _other: variant): boolean;
function php_intlcal_is_equivalent_to(const _cal: variant; const _other: variant): boolean;
function php_isLenient(): boolean;
function php_intlcal_is_lenient(const _cal: variant): boolean;
function php_isSet(const _field: integer): boolean;
function php_intlcal_is_set(const _cal: variant; const _field: integer): boolean;
function php_isWeekend(const _date: extended): boolean;
function php_intlcal_is_weekend(const _cal: variant; const _date: extended): boolean;
function php_roll(const _field: integer; const _amountOrUpOrDown: variant): boolean;
function php_intlcal_roll(const _cal: variant; const _field: integer; const _amountOrUpOrDown: variant): boolean;
function php_set(const _field: integer; const _value: integer): boolean;
function php_set(const _year: integer; const _month: integer; const _dayOfMonth: integer; const _hour: integer; const _minute: integer; const _second: integer): boolean;
function php_intlcal_set(const _cal: variant; const _field: integer; const _value: integer): boolean;
function php_intlcal_set(const _cal: variant; const _year: integer; const _month: integer; const _dayOfMonth: integer; const _hour: integer; const _minute: integer; const _second: integer): boolean;
function php_setFirstDayOfWeek(const _dayOfWeek: integer): boolean;
function php_intlcal_set_first_day_of_week(const _cal: variant; const _dayOfWeek: integer): boolean;
function php_setMinimalDaysInFirstWeek(const _minimalDays: integer): boolean;
function php_intlcal_get_minimal_days_in_first_week(const _cal: variant; const _minimalDays: integer): boolean;
function php_setRepeatedWallTimeOption(const _wallTimeOption: integer): boolean;
function php_intlcal_set_repeated_wall_time_option(const _cal: variant; const _wallTimeOption: integer): boolean;
function php_setSkippedWallTimeOption(const _wallTimeOption: integer): boolean;
function php_intlcal_set_skipped_wall_time_option(const _cal: variant; const _wallTimeOption: integer): boolean;
function php_setTime(const _date: extended): boolean;
function php_intlcal_set_time(const _cal: variant; const _date: extended): boolean;
function php_setTimeZone(const _timeZone: variant): boolean;
function php_intlcal_set_time_zone(const _cal: variant; const _timeZone: variant): boolean;
function php_intlcal_get_error_code(const _calendar: variant): integer;
function php_intlcal_get_error_message(const _calendar: variant): string;
function php_countEquivalentIDs(const _zoneId: string): integer;
function php_getCanonicalID(const _zoneId: string; var _isSystemID: boolean): string;
function php_getDisplayName(const _isDaylight: boolean; const _style: integer; const _locale: string): string;
function php_getDSTSavings(): integer;
function php_getEquivalentID(const _zoneId: string; const _index: integer): string;
function php_getID(): string;
function php_getOffset(const _date: extended; const _local: boolean; var _rawOffset: integer; var _dstOffset: integer): integer;
function php_getRawOffset(): integer;
function php_getTZDataVersion(): string;
function php_hasSameRules(const _otherTimeZone: variant): boolean;
function php_useDaylightTime(): boolean;
function php_intltz_get_error_code(): integer;
function php_intltz_get_error_message(): string;
function php_formatObject(const _object: variant; const _format: variant; const _locale: string): string;
function php_getCalendar(): integer;
function php_getDateType(): integer;
function php_getTimeType(): integer;
function php_getTimeZoneId(): string;
function php_localtime(const _value: string; var _position: integer): variant;
function php_parse(const _value: string; var _position: integer): integer;
function php_setCalendar(const _which: variant): boolean;
function php_setLenient(const _lenient: boolean): boolean;
function php_setTimeZoneId(const _zone: string): boolean;
function php_datefmt_format(const _fmt: variant; const _value: variant): string;
function php_datefmt_format_object(const _object: variant; const _format: variant; const _locale: string): string;
function php_datefmt_get_calendar(const _fmt: variant): integer;
function php_datefmt_get_datetype(const _fmt: variant): integer;
function php_datefmt_get_error_code(const _fmt: variant): integer;
function php_datefmt_get_error_message(const _fmt: variant): string;
function php_datefmt_get_locale(const _fmt: variant; const _which: integer): string;
function php_datefmt_get_pattern(const _fmt: variant): string;
function php_datefmt_get_timetype(const _fmt: variant): integer;
function php_datefmt_get_timezone_id(const _fmt: variant): string;
function php_datefmt_is_lenient(const _fmt: variant): boolean;
function php_datefmt_localtime(const _fmt: variant; const _value: string; var _position: integer): variant;
function php_datefmt_parse(const _fmt: variant; const _value: string; var _position: integer): integer;
function php_datefmt_set_calendar(const _fmt: variant; const _which: variant): boolean;
function php_datefmt_set_lenient(const _fmt: variant; const _lenient: boolean): boolean;
function php_datefmt_set_pattern(const _fmt: variant; const _pattern: string): boolean;
function php_datefmt_set_timezone_id(const _fmt: variant; const _zone: string): boolean;
function php_datefmt_set_timezone(const _zone: variant): boolean;
function php_getLocales(const _bundlename: string): variant;
function php_resourcebundle_count(const _r: variant): integer;
function php_resourcebundle_get_error_code(const _r: variant): integer;
function php_resourcebundle_get_error_message(const _r: variant): string;
function php_resourcebundle_get(const _r: variant; const _index: variant): variant;
function php_resourcebundle_locales(const _bundlename: string): variant;
function php_areConfusable(const _s1: string; const _s2: string; var _error: string): boolean;
function php_isSuspicious(const _text: string; var _error: string): boolean;
procedure php_setAllowedLocales(const _locale_list: string);
procedure php_setChecks(const _checks: integer);
function php_listIDs(): variant;
function php_transliterate(const _subject: string; const _start: integer; const _end: integer): string;
function php_transliterator_get_error_code(): integer;
function php_transliterator_get_error_message(): string;
function php_transliterator_list_ids(): variant;
function php_convert(const _str: string; const _reverse: boolean): string;
function php_fromUCallback(const _reason: integer; const _source: string; const _codePoint: string; var _error: integer): variant;
function php_getAliases(const _name: string): variant;
function php_getAvailable(): variant;
function php_getDestinationEncoding(): string;
function php_getDestinationType(): integer;
function php_getSourceEncoding(): string;
function php_getSourceType(): integer;
function php_getStandards(): variant;
function php_getSubstChars(): string;
function php_reasonText(const _reason: integer): string;
procedure php_setDestinationEncoding(const _encoding: string);
procedure php_setSourceEncoding(const _encoding: string);
procedure php_setSubstChars(const _chars: string);
function php_toUCallback(const _reason: integer; const _source: string; const _codeUnits: string; var _error: integer): variant;
function php_transcode(const _str: string; const _toEncoding: string; const _fromEncoding: string; const _options: variant): string;
function php_grapheme_extract(const _haystack: string; const _size: integer; const _extract_type: integer; const _start: integer; var _next: integer): string;
function php_grapheme_stripos(const _haystack: string; const _needle: string; const _offset: integer): integer;
function php_grapheme_stristr(const _haystack: string; const _needle: string; const _before_needle: boolean): string;
function php_grapheme_strlen(const _input: string): integer;
function php_grapheme_strpos(const _haystack: string; const _needle: string; const _offset: integer): integer;
function php_grapheme_strripos(const _haystack: string; const _needle: string; const _offset: integer): integer;
function php_grapheme_strrpos(const _haystack: string; const _needle: string; const _offset: integer): integer;
function php_grapheme_strstr(const _haystack: string; const _needle: string; const _before_needle: boolean): string;
function php_grapheme_substr(const _string: string; const _start: integer; const _length: integer): integer;
function php_idn_to_ascii(const _domain: string; const _options: integer; const _variant: integer; var _idna_info: variant): string;
function php_idn_to_utf8(const _domain: string; const _options: integer; const _variant: integer; var _idna_info: variant): string;
function php_charAge(const _codepoint: variant): variant;
function php_charDigitValue(const _codepoint: variant): integer;
function php_charDirection(const _codepoint: variant): integer;
function php_charFromName(const _characterName: string; const _nameChoice: integer): integer;
function php_charMirror(const _codepoint: variant): variant;
function php_charName(const _codepoint: variant; const _nameChoice: integer): string;
function php_charType(const _codepoint: variant): integer;
function php_chr(const _codepoint: variant): string;
function php_digit(const _codepoint: string; const _radix: integer): integer;
procedure php_enumCharNames(const _start: variant; const _limit: variant; const _callback: variant; const _nameChoice: integer);
procedure php_enumCharTypes(const _callback: variant);
function php_foldCase(const _codepoint: variant; const _options: integer): variant;
function php_forDigit(const _digit: integer; const _radix: integer): integer;
function php_getBidiPairedBracket(const _codepoint: variant): variant;
function php_getBlockCode(const _codepoint: variant): integer;
function php_getCombiningClass(const _codepoint: variant): integer;
function php_getFC_NFKC_Closure(const _codepoint: variant): string;
function php_getIntPropertyMaxValue(const _property: integer): integer;
function php_getIntPropertyMinValue(const _property: integer): integer;
function php_getIntPropertyValue(const _codepoint: variant; const _property: integer): integer;
function php_getNumericValue(const _codepoint: variant): extended;
function php_getPropertyEnum(const _alias: string): integer;
function php_getPropertyName(const _property: integer; const _nameChoice: integer): string;
function php_getPropertyValueEnum(const _property: integer; const _name: string): integer;
function php_getPropertyValueName(const _property: integer; const _value: integer; const _nameChoice: integer): string;
function php_getUnicodeVersion(): variant;
function php_hasBinaryProperty(const _codepoint: variant; const _property: integer): boolean;
function php_isalnum(const _codepoint: variant): boolean;
function php_isalpha(const _codepoint: variant): boolean;
function php_isbase(const _codepoint: variant): boolean;
function php_isblank(const _codepoint: variant): boolean;
function php_iscntrl(const _codepoint: variant): boolean;
function php_isdefined(const _codepoint: variant): boolean;
function php_isdigit(const _codepoint: variant): boolean;
function php_isgraph(const _codepoint: variant): boolean;
function php_isIDIgnorable(const _codepoint: variant): boolean;
function php_isIDPart(const _codepoint: variant): boolean;
function php_isIDStart(const _codepoint: variant): boolean;
function php_isISOControl(const _codepoint: variant): boolean;
function php_isJavaIDPart(const _codepoint: variant): boolean;
function php_isJavaIDStart(const _codepoint: variant): boolean;
function php_isJavaSpaceChar(const _codepoint: variant): boolean;
function php_islower(const _codepoint: variant): boolean;
function php_isMirrored(const _codepoint: variant): boolean;
function php_isprint(const _codepoint: variant): boolean;
function php_ispunct(const _codepoint: variant): boolean;
function php_isspace(const _codepoint: variant): boolean;
function php_istitle(const _codepoint: variant): boolean;
function php_isUAlphabetic(const _codepoint: variant): boolean;
function php_isULowercase(const _codepoint: variant): boolean;
function php_isupper(const _codepoint: variant): boolean;
function php_isUUppercase(const _codepoint: variant): boolean;
function php_isUWhiteSpace(const _codepoint: variant): boolean;
function php_isWhitespace(const _codepoint: variant): boolean;
function php_isxdigit(const _codepoint: variant): boolean;
function php_ord(const _character: variant): integer;
function php_tolower(const _codepoint: variant): variant;
function php_totitle(const _codepoint: variant): variant;
function php_toupper(const _codepoint: variant): variant;
function php_intl_error_name(const _error_code: integer): string;
function php_intl_get_error_code(): integer;
function php_intl_get_error_message(): string;
function php_intl_is_failure(const _error_code: integer): boolean;
function php_mb_check_encoding(const _var: string; const _encoding: string): boolean;
function php_mb_convert_case(const _str: string; const _mode: integer; const _encoding: string): string;
function php_mb_convert_encoding(const _str: string; const _to_encoding: string; const _from_encoding: variant): string;
function php_mb_convert_kana(const _str: string; const _option: string; const _encoding: string): string;
function php_mb_convert_variables(const _to_encoding: string; const _from_encoding: variant; var _vars: variant): string;
function php_mb_decode_mimeheader(const _str: string): string;
function php_mb_decode_numericentity(const _str: string; const _convmap: variant; const _encoding: string): string;
function php_mb_detect_encoding(const _str: string; const _encoding_list: variant): string;
function php_mb_detect_order(const _encoding_list: variant): variant;
function php_mb_encode_mimeheader(const _str: string; const _charset: string): string;
function php_mb_encode_numericentity(const _str: string; const _convmap: variant; const _encoding: string): string;
function php_mb_encoding_aliases(const _encoding: string): variant;
function php_mb_ereg_match(const _pattern: string; const _string: string; const _option: string): boolean;
function php_mb_ereg_replace_callback(const _pattern: string; const _callback: variant; const _string: string; const _option: string): string;
function php_mb_ereg_replace(const _pattern: string; const _replacement: string; const _string: string; const _option: string): string;
function php_mb_ereg_search_getpos(): integer;
function php_mb_ereg_search_getregs(): variant;
function php_mb_ereg_search_init(const _string: string; const _pattern: string; const _option: string): boolean;
function php_mb_ereg_search_pos(const _pattern: string; const _option: string): variant;
function php_mb_ereg_search_regs(const _pattern: string; const _option: string): variant;
function php_mb_ereg_search_setpos(const _position: integer): boolean;
function php_mb_ereg_search(const _pattern: string; const _option: string): boolean;
function php_mb_ereg(const _pattern: string; const _string: string; var _regs: variant): integer;
function php_mb_eregi_replace(const _pattern: string; const _replace: string; const _string: string; const _option: string): string;
function php_mb_eregi(const _pattern: string; const _string: string; var _regs: variant): integer;
function php_mb_get_info(const _type: string): variant;
function php_mb_http_input(const _type: string): variant;
function php_mb_http_output(const _encoding: string): variant;
function php_mb_internal_encoding(const _encoding: string): variant;
function php_mb_language(const _language: string): variant;
function php_mb_list_encodings(): variant;
function php_mb_output_handler(const _contents: string; const _status: integer): string;
function php_mb_parse_str(const _encoded_string: string; var _result: variant): boolean;
function php_mb_preferred_mime_name(const _encoding: string): string;
function php_mb_regex_encoding(const _encoding: string): variant;
function php_mb_regex_set_options(const _options: string): string;
function php_mb_send_mail(const _to: string; const _subject: string; const _message: string; const _additional_headers: string; const _additional_parameter: string): boolean;
function php_mb_split(const _pattern: string; const _string: string; const _limit: integer): variant;
function php_mb_strcut(const _str: string; const _start: integer; const _length: integer; const _encoding: string): string;
function php_mb_strimwidth(const _str: string; const _start: integer; const _width: integer; const _trimmarker: string; const _encoding: string): string;
function php_mb_stripos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer;
function php_mb_stristr(const _haystack: string; const _needle: string; const _before_needle: boolean; const _encoding: string): string;
function php_mb_strlen(const _str: string; const _encoding: string): variant;
function php_mb_strpos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer;
function php_mb_strrchr(const _haystack: string; const _needle: string; const _part: boolean; const _encoding: string): string;
function php_mb_strrichr(const _haystack: string; const _needle: string; const _part: boolean; const _encoding: string): string;
function php_mb_strripos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer;
function php_mb_strrpos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer;
function php_mb_strstr(const _haystack: string; const _needle: string; const _before_needle: boolean; const _encoding: string): string;
function php_mb_strtolower(const _str: string; const _encoding: string): string;
function php_mb_strtoupper(const _str: string; const _encoding: string): string;
function php_mb_strwidth(const _str: string; const _encoding: string): integer;
function php_mb_substitute_character(const _substrchar: variant): variant;
function php_mb_substr_count(const _haystack: string; const _needle: string; const _encoding: string): integer;
function php_mb_substr(const _str: string; const _start: integer; const _length: integer; const _encoding: string): string;
function php_pspell_add_to_personal(const _dictionary_link: integer; const _word: string): boolean;
function php_pspell_add_to_session(const _dictionary_link: integer; const _word: string): boolean;
function php_pspell_check(const _dictionary_link: integer; const _word: string): boolean;
function php_pspell_clear_session(const _dictionary_link: integer): boolean;
function php_pspell_config_create(const _language: string; const _spelling: string; const _jargon: string; const _encoding: string): integer;
function php_pspell_config_data_dir(const _conf: integer; const _directory: string): boolean;
function php_pspell_config_dict_dir(const _conf: integer; const _directory: string): boolean;
function php_pspell_config_ignore(const _dictionary_link: integer; const _n: integer): boolean;
function php_pspell_config_mode(const _dictionary_link: integer; const _mode: integer): boolean;
function php_pspell_config_personal(const _dictionary_link: integer; const _file: string): boolean;
function php_pspell_config_repl(const _dictionary_link: integer; const _file: string): boolean;
function php_pspell_config_runtogether(const _dictionary_link: integer; const _flag: boolean): boolean;
function php_pspell_config_save_repl(const _dictionary_link: integer; const _flag: boolean): boolean;
function php_pspell_new_config(const _config: integer): integer;
function php_pspell_new_personal(const _personal: string; const _language: string; const _spelling: string; const _jargon: string; const _encoding: string; const _mode: integer): integer;
function php_pspell_new(const _language: string; const _spelling: string; const _jargon: string; const _encoding: string; const _mode: integer): integer;
function php_pspell_save_wordlist(const _dictionary_link: integer): boolean;
function php_pspell_store_replacement(const _dictionary_link: integer; const _misspelled: string; const _correct: string): boolean;
function php_pspell_suggest(const _dictionary_link: integer; const _word: string): variant;
function php_recode_file(const _request: string; const _input: variant; const _output: variant): boolean;
function php_recode_string(const _request: string; const _string: string): string;
function php_cairo_font_face_get_type(const _fontface: variant): integer;
function php_cairo_font_face_status(const _fontface: variant): integer;
function php_cairo_font_options_equal(const _options: variant; const _other: variant): boolean;
function php_cairo_font_options_get_antialias(const _options: variant): integer;
function php_cairo_font_options_get_hint_metrics(const _options: variant): integer;
function php_cairo_font_options_get_hint_style(const _options: variant): integer;
function php_cairo_font_options_get_subpixel_order(const _options: variant): integer;
function php_cairo_font_options_hash(const _options: variant): integer;
procedure php_cairo_font_options_merge(const _options: variant; const _other: variant);
procedure php_cairo_font_options_set_antialias(const _options: variant; const _antialias: integer);
procedure php_cairo_font_options_set_hint_metrics(const _options: variant; const _hint_metrics: integer);
procedure php_cairo_font_options_set_hint_style(const _options: variant; const _hint_style: integer);
procedure php_cairo_font_options_set_subpixel_order(const _options: variant; const _subpixel_order: integer);
function php_cairo_font_options_status(const _options: variant): integer;
function php_cairo_format_stride_for_width(const _format: integer; const _width: integer): integer;
function php_cairo_image_surface_get_data(const _surface: variant): string;
function php_cairo_image_surface_get_format(const _surface: variant): integer;
function php_cairo_image_surface_get_height(const _surface: variant): integer;
function php_cairo_image_surface_get_stride(const _surface: variant): integer;
function php_cairo_image_surface_get_width(const _surface: variant): integer;
procedure php_cairo_matrix_invert(const _matrix: variant);
procedure php_cairo_matrix_rotate(const _matrix: variant; const _radians: extended);
function php_cairo_matrix_transform_distance(const _matrix: variant; const _dx: extended; const _dy: extended): variant;
function php_cairo_matrix_transform_point(const _matrix: variant; const _dx: extended; const _dy: extended): variant;
procedure php_cairo_matrix_translate(const _matrix: variant; const _tx: extended; const _ty: extended);
procedure php_cairo_pattern_add_color_stop_rgb(const _pattern: variant; const _offset: extended; const _red: extended; const _green: extended; const _blue: extended);
procedure php_cairo_pattern_add_color_stop_rgba(const _pattern: variant; const _offset: extended; const _red: extended; const _green: extended; const _blue: extended; const _alpha: extended);
function php_cairo_pattern_get_color_stop_count(const _pattern: variant): integer;
function php_cairo_pattern_get_color_stop_rgba(const _pattern: variant; const _index: integer): variant;
function php_cairo_pattern_get_extend(const _pattern: string): integer;
function php_cairo_pattern_get_filter(const _pattern: variant): integer;
function php_cairo_pattern_get_linear_points(const _pattern: variant): variant;
function php_cairo_pattern_get_radial_circles(const _pattern: variant): variant;
function php_cairo_pattern_get_rgba(const _pattern: variant): variant;
function php_cairo_pattern_get_type(const _pattern: variant): integer;
procedure php_cairo_pattern_set_extend(const _pattern: string; const _extend: string);
procedure php_cairo_pattern_set_filter(const _pattern: variant; const _filter: integer);
procedure php_cairo_pattern_set_matrix(const _pattern: variant; const _matrix: variant);
function php_cairo_pattern_status(const _pattern: variant): integer;
procedure php_cairo_pdf_surface_set_size(const _surface: variant; const _width: extended; const _height: extended);
function php_cairo_ps_get_levels(): variant;
function php_cairo_ps_level_to_string(const _level: integer): string;
procedure php_cairo_ps_surface_dsc_begin_page_setup(const _surface: variant);
procedure php_cairo_ps_surface_dsc_begin_setup(const _surface: variant);
procedure php_cairo_ps_surface_dsc_comment(const _surface: variant; const _comment: string);
function php_cairo_ps_surface_get_eps(const _surface: variant): boolean;
procedure php_cairo_ps_surface_restrict_to_level(const _surface: variant; const _level: integer);
procedure php_cairo_ps_surface_set_eps(const _surface: variant; const _level: boolean);
procedure php_cairo_ps_surface_set_size(const _surface: variant; const _width: extended; const _height: extended);
function php_cairo_scaled_font_extents(const _scaledfont: variant): variant;
function php_cairo_scaled_font_get_type(const _scaledfont: variant): integer;
function php_cairo_scaled_font_glyph_extents(const _scaledfont: variant; const _glyphs: variant): variant;
function php_cairo_scaled_font_status(const _scaledfont: variant): integer;
function php_cairo_scaled_font_text_extents(const _scaledfont: variant; const _text: string): variant;
procedure php_cairo_surface_copy_page(const _surface: variant);
procedure php_cairo_surface_finish(const _surface: variant);
procedure php_cairo_surface_flush(const _surface: variant);
function php_cairo_surface_get_content(const _surface: variant): integer;
function php_cairo_surface_get_device_offset(const _surface: variant): variant;
function php_cairo_surface_get_type(const _surface: variant): integer;
procedure php_cairo_surface_mark_dirty_rectangle(const _surface: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended);
procedure php_cairo_surface_mark_dirty(const _surface: variant);
procedure php_cairo_surface_set_device_offset(const _surface: variant; const _x: extended; const _y: extended);
procedure php_cairo_surface_set_fallback_resolution(const _surface: variant; const _x: extended; const _y: extended);
procedure php_cairo_surface_show_page(const _surface: variant);
function php_cairo_surface_status(const _surface: variant): integer;
procedure php_cairo_surface_write_to_png(const _surface: variant; const _stream: variant);
procedure php_cairo_svg_surface_restrict_to_version(const _surface: variant; const _version: integer);
function php_cairo_svg_version_to_string(const _version: integer): string;
function php_availableFonts(): variant;
function php_availableSurfaces(): variant;
function php_statusToString(const _status: integer): string;
function php_versionString(): string;
function php_cairo_available_fonts(): variant;
function php_cairo_available_surfaces(): variant;
function php_cairo_status_to_string(const _status: integer): string;
function php_cairo_version(): integer;
function php_cairo_version_string(): string;
procedure php_appendPath(const _path: variant);
procedure php_arc(const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended);
procedure php_arcNegative(const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended);
procedure php_clip();
function php_clipExtents(): variant;
procedure php_clipPreserve();
function php_clipRectangleList(): variant;
procedure php_closePath();
procedure php_copyPage();
procedure php_curveTo(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended);
function php_deviceToUser(const _x: extended; const _y: extended): variant;
function php_deviceToUserDistance(const _x: extended; const _y: extended): variant;
procedure php_fill();
function php_fillExtents(): variant;
procedure php_fillPreserve();
function php_fontExtents(): variant;
function php_getAntialias(): integer;
function php_getCurrentPoint(): variant;
function php_getDash(): variant;
function php_getDashCount(): integer;
function php_getFillRule(): integer;
procedure php_getFontFace();
procedure php_getFontMatrix();
procedure php_getFontOptions();
procedure php_getGroupTarget();
function php_getLineCap(): integer;
function php_getLineJoin(): integer;
function php_getLineWidth(): extended;
procedure php_getMatrix();
function php_getMiterLimit(): extended;
function php_getOperator(): integer;
procedure php_getScaledFont();
procedure php_getSource();
procedure php_getTarget();
function php_getTolerance(): extended;
procedure php_glyphPath(const _glyphs: variant);
function php_hasCurrentPoint(): boolean;
procedure php_identityMatrix();
function php_inFill(const _x: string; const _y: string): boolean;
function php_inStroke(const _x: string; const _y: string): boolean;
procedure php_lineTo(const _x: string; const _y: string);
procedure php_mask(const _pattern: string);
procedure php_maskSurface(const _surface: string; const _x: string; const _y: string);
procedure php_moveTo(const _x: string; const _y: string);
procedure php_newPath();
procedure php_newSubPath();
procedure php_paint();
procedure php_paintWithAlpha(const _alpha: string);
function php_pathExtents(): variant;
procedure php_popGroup();
procedure php_popGroupToSource();
procedure php_pushGroup();
procedure php_pushGroupWithContent(const _content: string);
procedure php_rectangle(const _x: string; const _y: string; const _width: string; const _height: string);
procedure php_relCurveTo(const _x1: string; const _y1: string; const _x2: string; const _y2: string; const _x3: string; const _y3: string);
procedure php_relLineTo(const _x: string; const _y: string);
procedure php_relMoveTo(const _x: string; const _y: string);
procedure php_resetClip();
procedure php_restore();
procedure php_rotate(const _angle: string);
procedure php_save();
procedure php_scale(const _x: string; const _y: string);
procedure php_selectFontFace(const _family: string; const _slant: string; const _weight: string);
procedure php_setAntialias(const _antialias: string);
procedure php_setDash(const _dashes: string; const _offset: string);
procedure php_setFillRule(const _setting: string);
procedure php_setFontFace(const _fontface: variant);
procedure php_setFontMatrix(const _matrix: string);
procedure php_setFontOptions(const _fontoptions: string);
procedure php_setFontSize(const _size: string);
procedure php_setLineCap(const _setting: string);
procedure php_setLineJoin(const _setting: string);
procedure php_setLineWidth(const _width: string);
procedure php_setMatrix(const _matrix: string);
procedure php_setMiterLimit(const _limit: string);
procedure php_setOperator(const _setting: string);
procedure php_setScaledFont(const _scaledfont: string);
procedure php_setSource(const _pattern: string);
procedure php_setSourceRGB(const _red: string; const _green: string; const _blue: string);
procedure php_setSourceRGBA(const _red: string; const _green: string; const _blue: string; const _alpha: string);
procedure php_setSourceSurface(const _surface: string; const _x: string; const _y: string);
procedure php_setTolerance(const _tolerance: string);
procedure php_showPage();
procedure php_showText(const _text: string);
function php_status(): integer;
procedure php_stroke();
function php_strokeExtents(): variant;
procedure php_strokePreserve();
function php_textExtents(const _text: string): variant;
procedure php_textPath(const _string: string);
procedure php_transform(const _matrix: string);
procedure php_translate(const _x: string; const _y: string);
function php_userToDevice(const _x: string; const _y: string): variant;
function php_userToDeviceDistance(const _x: string; const _y: string): variant;
procedure php_cairo_append_path(const _context: variant; const _path: variant);
procedure php_cairo_arc(const _context: variant; const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended);
procedure php_cairo_arc_negative(const _context: variant; const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended);
procedure php_cairo_clip(const _context: variant);
function php_cairo_clip_extents(const _context: variant): variant;
procedure php_cairo_clip_preserve(const _context: variant);
function php_cairo_clip_rectangle_list(const _context: variant): variant;
procedure php_cairo_close_path(const _context: variant);
procedure php_cairo_copy_page(const _context: variant);
procedure php_cairo_curve_to(const _context: variant; const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended);
function php_cairo_device_to_user(const _context: variant; const _x: extended; const _y: extended): variant;
function php_cairo_device_to_user_distance(const _context: variant; const _x: extended; const _y: extended): variant;
procedure php_cairo_fill(const _context: variant);
function php_cairo_fill_extents(const _context: variant): variant;
procedure php_cairo_fill_preserve(const _context: variant);
function php_cairo_font_extents(const _context: variant): variant;
function php_cairo_get_antialias(const _context: variant): integer;
function php_cairo_get_current_point(const _context: variant): variant;
function php_cairo_get_dash(const _context: variant): variant;
function php_cairo_get_dash_count(const _context: variant): integer;
function php_cairo_get_fill_rule(const _context: variant): integer;
procedure php_cairo_get_font_face(const _context: variant);
procedure php_cairo_get_font_matrix(const _context: variant);
procedure php_cairo_get_font_options(const _context: variant);
procedure php_cairo_get_group_target(const _context: variant);
function php_cairo_get_line_cap(const _context: variant): integer;
function php_cairo_get_line_join(const _context: variant): integer;
function php_cairo_get_line_width(const _context: variant): extended;
procedure php_cairo_get_matrix(const _context: variant);
function php_cairo_get_miter_limit(const _context: variant): extended;
function php_cairo_get_operator(const _context: variant): integer;
procedure php_cairo_get_scaled_font(const _context: variant);
procedure php_cairo_get_source(const _context: variant);
procedure php_cairo_get_target(const _context: variant);
function php_cairo_get_tolerance(const _context: variant): extended;
procedure php_cairo_glyph_path(const _context: variant; const _glyphs: variant);
function php_cairo_has_current_point(const _context: variant): boolean;
procedure php_cairo_identity_matrix(const _context: variant);
function php_cairo_in_fill(const _context: variant; const _x: string; const _y: string): boolean;
function php_cairo_in_stroke(const _context: variant; const _x: string; const _y: string): boolean;
procedure php_cairo_line_to(const _context: variant; const _x: string; const _y: string);
procedure php_cairo_mask(const _context: variant; const _pattern: variant);
procedure php_cairo_mask_surface(const _context: variant; const _surface: variant; const _x: string; const _y: string);
procedure php_cairo_move_to(const _context: variant; const _x: string; const _y: string);
procedure php_cairo_new_path(const _context: variant);
procedure php_cairo_new_sub_path(const _context: variant);
procedure php_cairo_paint(const _context: variant);
procedure php_cairo_paint_with_alpha(const _context: variant; const _alpha: string);
function php_cairo_path_extents(const _context: variant): variant;
procedure php_cairo_pop_group(const _context: variant);
procedure php_cairo_pop_group_to_source(const _context: variant);
procedure php_cairo_push_group(const _context: variant);
procedure php_cairo_push_group_with_content(const _context: variant; const _content: string);
procedure php_cairo_rectangle(const _context: variant; const _x: string; const _y: string; const _width: string; const _height: string);
procedure php_cairo_rel_curve_to(const _context: variant; const _x1: string; const _y1: string; const _x2: string; const _y2: string; const _x3: string; const _y3: string);
procedure php_cairo_rel_line_to(const _context: variant; const _x: string; const _y: string);
procedure php_cairo_rel_move_to(const _context: variant; const _x: string; const _y: string);
procedure php_cairo_reset_clip(const _context: variant);
procedure php_cairo_restore(const _context: variant);
procedure php_cairo_rotate(const _context: variant; const _angle: string);
procedure php_cairo_save(const _context: variant);
procedure php_cairo_scale(const _context: variant; const _x: string; const _y: string);
procedure php_cairo_select_font_face(const _context: variant; const _family: string; const _slant: string; const _weight: string);
procedure php_cairo_set_antialias(const _context: variant; const _antialias: string);
procedure php_cairo_set_dash(const _context: variant; const _dashes: variant; const _offset: string);
procedure php_cairo_set_fill_rule(const _context: variant; const _setting: string);
procedure php_cairo_set_font_face(const _context: variant; const _fontface: variant);
procedure php_cairo_set_font_matrix(const _context: variant; const _matrix: variant);
procedure php_cairo_set_font_options(const _context: variant; const _fontoptions: variant);
procedure php_cairo_set_font_size(const _context: variant; const _size: string);
procedure php_cairo_set_line_cap(const _context: variant; const _setting: string);
procedure php_cairo_set_line_join(const _context: variant; const _setting: string);
procedure php_cairo_set_line_width(const _context: variant; const _width: string);
procedure php_cairo_set_matrix(const _context: variant; const _matrix: variant);
procedure php_cairo_set_miter_limit(const _context: variant; const _limit: string);
procedure php_cairo_set_operator(const _context: variant; const _setting: string);
procedure php_cairo_set_scaled_font(const _context: variant; const _scaledfont: variant);
procedure php_cairo_set_source(const _context: variant; const _pattern: variant);
procedure php_cairo_set_source_surface(const _context: variant; const _surface: variant; const _x: string; const _y: string);
procedure php_cairo_set_tolerance(const _context: variant; const _tolerance: string);
procedure php_cairo_show_page(const _context: variant);
procedure php_cairo_show_text(const _context: variant; const _text: string);
function php_cairo_status(const _context: variant): integer;
procedure php_cairo_stroke(const _context: variant);
function php_cairo_stroke_extents(const _context: variant): variant;
procedure php_cairo_stroke_preserve(const _context: variant);
function php_cairo_text_extents(const _context: variant): variant;
procedure php_cairo_text_path(const _context: variant; const _text: string);
procedure php_cairo_transform(const _context: variant; const _matrix: variant);
procedure php_cairo_translate(const _context: variant; const _x: string; const _y: string);
function php_cairo_user_to_device(const _context: variant; const _x: string; const _y: string): variant;
function php_cairo_user_to_device_distance(const _context: variant; const _x: string; const _y: string): variant;
procedure php_createSimilar(const _other: variant; const _content: integer; const _width: string; const _height: string);
procedure php_finish();
function php_getContent(): integer;
function php_getDeviceOffset(): variant;
procedure php_markDirty();
procedure php_markDirtyRectangle(const _x: string; const _y: string; const _width: string; const _height: string);
procedure php_setDeviceOffset(const _x: string; const _y: string);
procedure php_setFallbackResolution(const _x: string; const _y: string);
procedure php_writeToPng(const _file: string);
function php_getVersions(): variant;
procedure php_restrictToVersion(const _version: string);
function php_versionToString(const _version: integer): string;
function php_cairo_svg_get_versions(): variant;
procedure php_createForData(const _data: string; const _format: integer; const _width: integer; const _height: integer; const _stride: integer);
function php_getFormat(): integer;
function php_getHeight(): integer;
function php_getStride(): integer;
function php_getWidth(): integer;
procedure php_setSize(const _width: string; const _height: string);
procedure php_dscBeginPageSetup();
procedure php_dscBeginSetup();
procedure php_dscComment(const _comment: string);
function php_getEps(): boolean;
function php_getLevels(): variant;
function php_levelToString(const _level: integer): string;
procedure php_restrictToLevel(const _level: string);
procedure php_setEps(const _level: string);
function php_equal(const _other: string): boolean;
function php_getHintMetrics(): integer;
function php_getHintStyle(): integer;
function php_getSubpixelOrder(): integer;
function php_hash(): integer;
procedure php_merge(const _other: string);
procedure php_setHintMetrics(const _hint_metrics: string);
procedure php_setHintStyle(const _hint_style: string);
procedure php_setSubpixelOrder(const _subpixel_order: string);
function php_extents(): variant;
procedure php_getScaleMatrix();
function php_glyphExtents(const _glyphs: string): variant;
procedure php_addColorStopRgb(const _offset: string; const _red: string; const _green: string; const _blue: string);
procedure php_addColorStopRgba(const _offset: string; const _red: string; const _green: string; const _blue: string; const _alpha: string);
function php_getColorStopCount(): integer;
function php_getColorStopRgba(const _index: string): variant;
function php_getExtend(): integer;
procedure php_setExtend(const _extend: integer);
function php_getRgba(): variant;
function php_getFilter(): integer;
procedure php_getSurface();
procedure php_setFilter(const _filter: string);
function php_getPoints(): variant;
function php_getCircles(): variant;
function php_strideForWidth(const _format: integer; const _width: integer): integer;
procedure php_initIdentity();
procedure php_initRotate(const _radians: extended);
procedure php_initScale(const _sx: extended; const _sy: extended);
procedure php_initTranslate(const _tx: extended; const _ty: extended);
procedure php_invert();
procedure php_rotate(const _sx: string; const _sy: string);
procedure php_scale(const _sx: extended; const _sy: extended);
function php_transformDistance(const _dx: string; const _dy: string): variant;
function php_transformPoint(const _dx: string; const _dy: string): variant;
function php_cairo_matrix_init(const _xx: extended; const _yx: extended; const _xy: extended; const _yy: extended; const _x0: extended; const _y0: extended): variant;
function php_cairo_matrix_init_identity(): variant;
function php_cairo_matrix_init_rotate(const _radians: extended): variant;
function php_cairo_matrix_init_scale(const _sx: extended; const _sy: extended): variant;
function php_cairo_matrix_init_translate(const _tx: extended; const _ty: extended): variant;
procedure php_cairo_matrix_scale(const _context: variant; const _sx: extended; const _sy: extended);
function php_exif_imagetype(const _filename: string): integer;
function php_exif_read_data(const _filename: string; const _sections: string; const _arrays: boolean; const _thumbnail: boolean): variant;
function php_exif_tagname(const _index: integer): string;
function php_exif_thumbnail(const _filename: string; var _width: integer; var _height: integer; var _imagetype: integer): string;
function php_gd_info(): variant;
function php_getimagesize(const _filename: string; var _imageinfo: variant): variant;
function php_getimagesizefromstring(const _imagedata: string; var _imageinfo: variant): variant;
function php_image_type_to_extension(const _imagetype: integer; const _include_dot: boolean): string;
function php_image_type_to_mime_type(const _imagetype: integer): string;
function php_image2wbmp(const _image: variant; const _filename: string; const _threshold: integer): boolean;
function php_imageaffine(const _image: variant; const _affine: variant; const _clip: variant): variant;
function php_imageaffinematrixconcat(const _m1: variant; const _m2: variant): variant;
function php_imageaffinematrixget(const _type: integer; const _options: variant): variant;
function php_imagealphablending(const _image: variant; const _blendmode: boolean): boolean;
function php_imageantialias(const _image: variant; const _enabled: boolean): boolean;
function php_imagearc(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _start: integer; const _end: integer; const _color: integer): boolean;
function php_imagechar(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _c: string; const _color: integer): boolean;
function php_imagecharup(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _c: string; const _color: integer): boolean;
function php_imagecolorallocate(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer;
function php_imagecolorallocatealpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer;
function php_imagecolorat(const _image: variant; const _x: integer; const _y: integer): integer;
function php_imagecolorclosest(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer;
function php_imagecolorclosestalpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer;
function php_imagecolorclosesthwb(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer;
function php_imagecolordeallocate(const _image: variant; const _color: integer): boolean;
function php_imagecolorexact(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer;
function php_imagecolorexactalpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer;
function php_imagecolormatch(const _image1: variant; const _image2: variant): boolean;
function php_imagecolorresolve(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer;
function php_imagecolorresolvealpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer;
procedure php_imagecolorset(const _image: variant; const _index: integer; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer);
function php_imagecolorsforindex(const _image: variant; const _index: integer): variant;
function php_imagecolorstotal(const _image: variant): integer;
function php_imagecolortransparent(const _image: variant; const _color: integer): integer;
function php_imageconvolution(const _image: variant; const _matrix: variant; const _div: extended; const _offset: extended): boolean;
function php_imagecopy(const _dst_im: variant; const _src_im: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _src_w: integer; const _src_h: integer): boolean;
function php_imagecopymerge(const _dst_im: variant; const _src_im: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _src_w: integer; const _src_h: integer; const _pct: integer): boolean;
function php_imagecopymergegray(const _dst_im: variant; const _src_im: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _src_w: integer; const _src_h: integer; const _pct: integer): boolean;
function php_imagecopyresampled(const _dst_image: variant; const _src_image: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _dst_w: integer; const _dst_h: integer; const _src_w: integer; const _src_h: integer): boolean;
function php_imagecopyresized(const _dst_image: variant; const _src_image: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _dst_w: integer; const _dst_h: integer; const _src_w: integer; const _src_h: integer): boolean;
function php_imagecreate(const _width: integer; const _height: integer): variant;
function php_imagecreatefromgd2(const _filename: string): variant;
function php_imagecreatefromgd2part(const _filename: string; const _srcX: integer; const _srcY: integer; const _width: integer; const _height: integer): variant;
function php_imagecreatefromgd(const _filename: string): variant;
function php_imagecreatefromgif(const _filename: string): variant;
function php_imagecreatefromjpeg(const _filename: string): variant;
function php_imagecreatefrompng(const _filename: string): variant;
function php_imagecreatefromstring(const _image: string): variant;
function php_imagecreatefromwbmp(const _filename: string): variant;
function php_imagecreatefromwebp(const _filename: string): variant;
function php_imagecreatefromxbm(const _filename: string): variant;
function php_imagecreatefromxpm(const _filename: string): variant;
function php_imagecreatetruecolor(const _width: integer; const _height: integer): variant;
function php_imagecrop(const _image: variant; const _rect: variant): variant;
function php_imagecropauto(const _image: variant; const _mode: integer; const _threshold: extended; const _color: integer): variant;
function php_imagedashedline(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean;
function php_imagedestroy(const _image: variant): boolean;
function php_imageellipse(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _color: integer): boolean;
function php_imagefill(const _image: variant; const _x: integer; const _y: integer; const _color: integer): boolean;
function php_imagefilledarc(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _start: integer; const _end: integer; const _color: integer; const _style: integer): boolean;
function php_imagefilledellipse(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _color: integer): boolean;
function php_imagefilledpolygon(const _image: variant; const _points: variant; const _num_points: integer; const _color: integer): boolean;
function php_imagefilledrectangle(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean;
function php_imagefilltoborder(const _image: variant; const _x: integer; const _y: integer; const _border: integer; const _color: integer): boolean;
function php_imagefilter(const _image: variant; const _filtertype: integer; const _arg1: integer; const _arg2: integer; const _arg3: integer; const _arg4: integer): boolean;
function php_imageflip(const _image: variant; const _mode: integer): boolean;
function php_imagefontheight(const _font: integer): integer;
function php_imagefontwidth(const _font: integer): integer;
function php_imageftbbox(const _size: extended; const _angle: extended; const _fontfile: string; const _text: string; const _extrainfo: variant): variant;
function php_imagefttext(const _image: variant; const _size: extended; const _angle: extended; const _x: integer; const _y: integer; const _color: integer; const _fontfile: string; const _text: string; const _extrainfo: variant): variant;
function php_imagegammacorrect(const _image: variant; const _inputgamma: extended; const _outputgamma: extended): boolean;
function php_imagegd2(const _image: variant; const _filename: string; const _chunk_size: integer; const _type: integer): boolean;
function php_imagegd(const _image: variant; const _filename: string): boolean;
function php_imagegif(const _image: variant; const _filename: string): boolean;
function php_imagegrabscreen(): variant;
function php_imagegrabwindow(const _window_handle: integer; const _client_area: integer): variant;
function php_imageinterlace(const _image: variant; const _interlace: integer): integer;
function php_imageistruecolor(const _image: variant): boolean;
function php_imagejpeg(const _image: variant; const _filename: string; const _quality: integer): boolean;
function php_imagelayereffect(const _image: variant; const _effect: integer): boolean;
function php_imageline(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean;
function php_imageloadfont(const _file: string): integer;
procedure php_imagepalettecopy(const _destination: variant; const _source: variant);
function php_imagepalettetotruecolor(const _src: variant): boolean;
function php_imagepng(const _image: variant; const _filename: string; const _quality: integer; const _filters: integer): boolean;
function php_imagepolygon(const _image: variant; const _points: variant; const _num_points: integer; const _color: integer): boolean;
function php_imagepsbbox(const _text: string; const _font: variant; const _size: integer): variant;
function php_imagepsbbox(const _text: string; const _font: variant; const _size: integer; const _space: integer; const _tightness: integer; const _angle: extended): variant;
function php_imagepsencodefont(const _font_index: variant; const _encodingfile: string): boolean;
function php_imagepsextendfont(const _font_index: variant; const _extend: extended): boolean;
function php_imagepsfreefont(const _font_index: variant): boolean;
function php_imagepsloadfont(const _filename: string): variant;
function php_imagepsslantfont(const _font_index: variant; const _slant: extended): boolean;
function php_imagepstext(const _image: variant; const _text: string; const _font_index: variant; const _size: integer; const _foreground: integer; const _background: integer; const _x: integer; const _y: integer; const _space: integer; const _tightness: integer; const _angle: extended; const _antialias_steps: integer): variant;
function php_imagerectangle(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean;
function php_imagerotate(const _image: variant; const _angle: extended; const _bgd_color: integer; const _ignore_transparent: integer): variant;
function php_imagesavealpha(const _image: variant; const _saveflag: boolean): boolean;
function php_imagescale(const _image: variant; const _new_width: integer; const _new_height: integer; const _mode: integer): variant;
function php_imagesetbrush(const _image: variant; const _brush: variant): boolean;
function php_imagesetinterpolation(const _image: variant; const _method: integer): boolean;
function php_imagesetpixel(const _image: variant; const _x: integer; const _y: integer; const _color: integer): boolean;
function php_imagesetstyle(const _image: variant; const _style: variant): boolean;
function php_imagesetthickness(const _image: variant; const _thickness: integer): boolean;
function php_imagesettile(const _image: variant; const _tile: variant): boolean;
function php_imagestring(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _string: string; const _color: integer): boolean;
function php_imagestringup(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _string: string; const _color: integer): boolean;
function php_imagesx(const _image: variant): integer;
function php_imagesy(const _image: variant): integer;
function php_imagetruecolortopalette(const _image: variant; const _dither: boolean; const _ncolors: integer): boolean;
function php_imagettfbbox(const _size: extended; const _angle: extended; const _fontfile: string; const _text: string): variant;
function php_imagettftext(const _image: variant; const _size: extended; const _angle: extended; const _x: integer; const _y: integer; const _color: integer; const _fontfile: string; const _text: string): variant;
function php_imagetypes(): integer;
function php_imagewbmp(const _image: variant; const _filename: string; const _foreground: integer): boolean;
function php_imagewebp(const _image: variant; const _filename: string): boolean;
function php_imagexbm(const _image: variant; const _filename: string; const _foreground: integer): boolean;
function php_iptcembed(const _iptcdata: string; const _jpeg_file_name: string; const _spool: integer): variant;
function php_iptcparse(const _iptcblock: string): variant;
function php_jpeg2wbmp(const _jpegname: string; const _wbmpname: string; const _dest_height: integer; const _dest_width: integer; const _threshold: integer): boolean;
function php_png2wbmp(const _pngname: string; const _wbmpname: string; const _dest_height: integer; const _dest_width: integer; const _threshold: integer): boolean;
procedure php_deconstructimages();
function php_destroy(): boolean;
function php_getcopyright(): string;
function php_getimageblueprimary(): variant;
function php_getimagechanneldepth(const _channel_type: integer): integer;
function php_getimagecolors(): integer;
function php_getimagecolorspace(): integer;
function php_getimagecompose(): integer;
function php_getimagedelay(): integer;
function php_getimagedepth(): integer;
function php_getimagedispose(): integer;
function php_getimageextrema(): variant;
function php_getimagefilename(): string;
function php_getimageformat(): string;
function php_getimagegamma(): extended;
function php_getimagegreenprimary(): variant;
function php_getimageheight(): integer;
function php_getimagehistogram(): variant;
function php_getimageindex(): integer;
function php_getimageinterlacescheme(): integer;
function php_getimageiterations(): integer;
function php_getimagematte(): integer;
function php_getimageprofile(const _name: string): string;
function php_getimageredprimary(): variant;
function php_getimagerenderingintent(): integer;
function php_getimageresolution(): variant;
function php_getimagescene(): integer;
function php_getimagesignature(): string;
function php_getimagetype(): integer;
function php_getimageunits(): integer;
function php_getimagewhitepoint(): variant;
function php_getimagewidth(): integer;
function php_getpackagename(): string;
function php_getquantumdepth(): variant;
function php_getreleasedate(): string;
function php_getsamplingfactors(): variant;
function php_hasnextimage(): variant;
function php_haspreviousimage(): variant;
function php_implodeimage(const _radius: extended): variant;
function php_labelimage(const _label: string): variant;
function php_levelimage(const _blackPoint: extended; const _gamma: extended; const _whitePoint: extended; const _channel: integer): variant;
function php_magnifyimage(): variant;
procedure php_medianfilterimage(const _radius: extended);
function php_nextimage(): boolean;
function php_previousimage(): boolean;
function php_queryfontmetrics(const _draw: variant; const _text: string): variant;
function php_queryfonts(const _pattern: string): variant;
function php_queryformats(const _pattern: string): variant;
function php_removeimageprofile(const _name: string): string;
procedure php_getfillcolor();
function php_getfillopacity(): extended;
function php_getfont(): string;
function php_getfontsize(): extended;
function php_getfontstyle(): integer;
function php_getfontweight(): integer;
procedure php_getstrokecolor();
function php_getstrokeopacity(): extended;
function php_getstrokewidth(): extended;
function php_gettextdecoration(): integer;
function php_gettextencoding(): string;
function php_getcolor(const _as_array: boolean; const _normalize_array: boolean): variant;
function php_getcolorcount(): integer;
function php_getcolorvalue(const _color: integer): extended;
function php_adaptiveBlurImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean;
function php_adaptiveResizeImage(const _columns: integer; const _rows: integer; const _bestfit: boolean): boolean;
function php_adaptiveSharpenImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean;
function php_adaptiveThresholdImage(const _width: integer; const _height: integer; const _offset: integer): boolean;
function php_addImage(const _source: variant): boolean;
function php_addNoiseImage(const _noise_type: integer; const _channel: integer): boolean;
function php_affineTransformImage(const _matrix: variant): boolean;
function php_animateImages(const _x_server: string): boolean;
function php_annotateImage(const _draw_settings: variant; const _x: extended; const _y: extended; const _angle: extended; const _text: string): boolean;
procedure php_autoLevelImage(const _CHANNEL: string);
function php_blackThresholdImage(const _threshold: variant): boolean;
procedure php_blueShiftImage(const _factor: extended);
function php_blurImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean;
function php_borderImage(const _bordercolor: variant; const _width: integer; const _height: integer): boolean;
procedure php_brightnessContrastImage(const _brightness: string; const _contrast: string; const _CHANNEL: string);
function php_charcoalImage(const _radius: extended; const _sigma: extended): boolean;
function php_chopImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean;
procedure php_clampImage(const _CHANNEL: string);
function php_clipImage(): boolean;
procedure php_clipImagePath(const _pathname: string; const _inside: string);
function php_clipPathImage(const _pathname: string; const _inside: boolean): boolean;
function php_clutImage(const _lookup_table: variant; const _channel: extended): boolean;
function php_colorFloodfillImage(const _fill: variant; const _fuzz: extended; const _bordercolor: variant; const _x: integer; const _y: integer): boolean;
function php_colorizeImage(const _colorize: variant; const _opacity: variant): boolean;
procedure php_colorMatrixImage(const _color_matrix: string);
function php_commentImage(const _comment: string): boolean;
function php_compareImageChannels(const _image: variant; const _channelType: integer; const _metricType: integer): variant;
function php_compareImages(const _compare: variant; const _metric: integer): variant;
function php_compositeImage(const _composite_object: variant; const _composite: integer; const _x: integer; const _y: integer; const _channel: integer): boolean;
function php_contrastImage(const _sharpen: boolean): boolean;
function php_contrastStretchImage(const _black_point: extended; const _white_point: extended; const _channel: integer): boolean;
function php_convolveImage(const _kernel: variant; const _channel: integer): boolean;
procedure php_count(const _mode: string);
function php_cropImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean;
function php_cropThumbnailImage(const _width: integer; const _height: integer): boolean;
function php_cycleColormapImage(const _displace: integer): boolean;
function php_decipherImage(const _passphrase: string): boolean;
function php_deleteImageArtifact(const _artifact: string): boolean;
procedure php_deleteImageProperty(const _name: string);
function php_deskewImage(const _threshold: extended): boolean;
function php_despeckleImage(): boolean;
function php_displayImage(const _servername: string): boolean;
function php_displayImages(const _servername: string): boolean;
function php_distortImage(const _method: integer; const _arguments: variant; const _bestfit: boolean): boolean;
function php_drawImage(const _draw: variant): boolean;
function php_edgeImage(const _radius: extended): boolean;
function php_embossImage(const _radius: extended; const _sigma: extended): boolean;
function php_encipherImage(const _passphrase: string): boolean;
function php_enhanceImage(): boolean;
function php_equalizeImage(): boolean;
function php_evaluateImage(const _op: integer; const _constant: extended; const _channel: integer): boolean;
function php_exportImagePixels(const _x: integer; const _y: integer; const _width: integer; const _height: integer; const _map: string; const _STORAGE: integer): variant;
function php_extentImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean;
procedure php_filter(const _ImagickKernel: variant; const _CHANNEL: integer);
function php_flipImage(): boolean;
function php_floodFillPaintImage(const _fill: variant; const _fuzz: extended; const _target: variant; const _x: integer; const _y: integer; const _invert: boolean; const _channel: integer): boolean;
function php_flopImage(): boolean;
procedure php_forwardFourierTransformimage(const _magnitude: boolean);
function php_frameImage(const _matte_color: variant; const _width: integer; const _height: integer; const _inner_bevel: integer; const _outer_bevel: integer): boolean;
function php_functionImage(const _function: integer; const _arguments: variant; const _channel: integer): boolean;
function php_gammaImage(const _gamma: extended; const _channel: integer): boolean;
function php_gaussianBlurImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean;
function php_getColorspace(): integer;
function php_getCompression(): integer;
function php_getCompressionQuality(): integer;
function php_getGravity(): integer;
function php_getHomeURL(): string;
function php_getImageAlphaChannel(): integer;
function php_getImageArtifact(const _artifact: string): string;
function php_getImageAttribute(const _key: string): string;
function php_getImageBlob(): string;
function php_getImageChannelDistortion(const _reference: variant; const _channel: integer; const _metric: integer): extended;
function php_getImageChannelDistortions(const _reference: variant; const _metric: integer; const _channel: integer): extended;
function php_getImageChannelExtrema(const _channel: integer): variant;
function php_getImageChannelKurtosis(const _channel: integer): variant;
function php_getImageChannelMean(const _channel: integer): variant;
function php_getImageChannelRange(const _channel: integer): variant;
function php_getImageChannelStatistics(): variant;
function php_getImageCompression(): integer;
function php_getImageCompressionQuality(): integer;
function php_getImageDistortion(const _reference: variant; const _metric: integer): extended;
function php_getImageGeometry(): variant;
function php_getImageGravity(): integer;
function php_getImageInterpolateMethod(): integer;
function php_getImageLength(): integer;
function php_getImageMagickLicense(): string;
function php_getImageMimeType(): string;
function php_getImageOrientation(): integer;
function php_getImagePage(): variant;
function php_getImageProfiles(const _pattern: string; const _only_names: boolean): variant;
function php_getImageProperties(const _pattern: string; const _only_names: boolean): variant;
function php_getImageProperty(const _name: string): string;
function php_getImagesBlob(): string;
function php_getImageSize(): integer;
function php_getImageTicksPerSecond(): integer;
function php_getImageTotalInkDensity(): extended;
function php_getImageVirtualPixelMethod(): integer;
function php_getInterlaceScheme(): integer;
function php_getIteratorIndex(): integer;
function php_getNumberImages(): integer;
function php_getOption(const _key: string): string;
function php_getPage(): variant;
function php_getPointSize(): extended;
function php_getQuantum(): integer;
function php_getQuantumRange(): variant;
function php_getRegistry(const _key: string): string;
function php_getResource(const _type: integer): integer;
function php_getResourceLimit(const _type: integer): integer;
function php_getSizeOffset(): integer;
function php_haldClutImage(const _clut: variant; const _channel: integer): boolean;
function php_identifyImage(const _appendRawOutput: boolean): variant;
function php_importImagePixels(const _x: integer; const _y: integer; const _width: integer; const _height: integer; const _map: string; const _storage: integer; const _pixels: variant): boolean;
procedure php_inverseFourierTransformImage(const _complement: string; const _magnitude: string);
function php_linearStretchImage(const _blackPoint: extended; const _whitePoint: extended): boolean;
function php_liquidRescaleImage(const _width: integer; const _height: integer; const _delta_x: extended; const _rigidity: extended): boolean;
function php_listRegistry(): variant;
function php_mapImage(const _map: variant; const _dither: boolean): boolean;
function php_matteFloodfillImage(const _alpha: extended; const _fuzz: extended; const _bordercolor: variant; const _x: integer; const _y: integer): boolean;
function php_minifyImage(): boolean;
function php_modulateImage(const _brightness: extended; const _saturation: extended; const _hue: extended): boolean;
procedure php_morphology(const _morphologyMethod: integer; const _iterations: integer; const _ImagickKernel: variant; const _CHANNEL: string);
function php_motionBlurImage(const _radius: extended; const _sigma: extended; const _angle: extended; const _channel: integer): boolean;
function php_negateImage(const _gray: boolean; const _channel: integer): boolean;
function php_newImage(const _cols: integer; const _rows: integer; const _background: variant; const _format: string): boolean;
function php_newPseudoImage(const _columns: integer; const _rows: integer; const _pseudoString: string): boolean;
function php_normalizeImage(const _channel: integer): boolean;
function php_oilPaintImage(const _radius: extended): boolean;
function php_opaquePaintImage(const _target: variant; const _fill: variant; const _fuzz: extended; const _invert: boolean; const _channel: integer): boolean;
function php_optimizeImageLayers(): boolean;
function php_orderedPosterizeImage(const _threshold_map: string; const _channel: integer): boolean;
function php_paintFloodfillImage(const _fill: variant; const _fuzz: extended; const _bordercolor: variant; const _x: integer; const _y: integer; const _channel: integer): boolean;
function php_paintOpaqueImage(const _target: variant; const _fill: variant; const _fuzz: extended; const _channel: integer): boolean;
function php_paintTransparentImage(const _target: variant; const _alpha: extended; const _fuzz: extended): boolean;
function php_pingImage(const _filename: string): boolean;
function php_pingImageBlob(const _image: string): boolean;
function php_pingImageFile(const _filehandle: variant; const _fileName: string): boolean;
function php_polaroidImage(const _properties: variant; const _angle: extended): boolean;
function php_posterizeImage(const _levels: integer; const _dither: boolean): boolean;
function php_previewImages(const _preview: integer): boolean;
function php_profileImage(const _name: string; const _profile: string): boolean;
function php_quantizeImage(const _numberColors: integer; const _colorspace: integer; const _treedepth: integer; const _dither: boolean; const _measureError: boolean): boolean;
function php_quantizeImages(const _numberColors: integer; const _colorspace: integer; const _treedepth: integer; const _dither: boolean; const _measureError: boolean): boolean;
function php_queryFontMetrics(const _properties: variant; const _text: string; const _multiline: boolean): variant;
function php_radialBlurImage(const _angle: extended; const _channel: integer): boolean;
function php_raiseImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer; const _raise: boolean): boolean;
function php_randomThresholdImage(const _low: extended; const _high: extended; const _channel: integer): boolean;
function php_readImage(const _filename: string): boolean;
function php_readImageBlob(const _image: string; const _filename: string): boolean;
function php_readImageFile(const _filehandle: variant; const _fileName: string): boolean;
function php_recolorImage(const _matrix: variant): boolean;
function php_reduceNoiseImage(const _radius: extended): boolean;
function php_remapImage(const _replacement: variant; const _DITHER: integer): boolean;
function php_removeImage(): boolean;
function php_render(): boolean;
function php_resampleImage(const _x_resolution: extended; const _y_resolution: extended; const _filter: integer; const _blur: extended): boolean;
function php_resetImagePage(const _page: string): boolean;
function php_resizeImage(const _columns: integer; const _rows: integer; const _filter: integer; const _blur: extended; const _bestfit: boolean): boolean;
function php_rollImage(const _x: integer; const _y: integer): boolean;
function php_rotateImage(const _background: variant; const _degrees: extended): boolean;
procedure php_rotationalBlurImage(const _angle: string; const _CHANNEL: string);
function php_roundCorners(const _x_rounding: extended; const _y_rounding: extended; const _stroke_width: extended; const _displace: extended; const _size_correction: extended): boolean;
function php_sampleImage(const _columns: integer; const _rows: integer): boolean;
function php_scaleImage(const _cols: integer; const _rows: integer; const _bestfit: boolean): boolean;
function php_segmentImage(const _COLORSPACE: integer; const _cluster_threshold: extended; const _smooth_threshold: extended; const _verbose: boolean): boolean;
procedure php_selectiveBlurImage(const _radius: extended; const _sigma: extended; const _threshold: extended; const _CHANNEL: integer);
function php_separateImageChannel(const _channel: integer): boolean;
function php_sepiaToneImage(const _threshold: extended): boolean;
function php_setBackgroundColor(const _background: variant): boolean;
function php_setColorspace(const _COLORSPACE: integer): boolean;
function php_setCompression(const _compression: integer): boolean;
function php_setCompressionQuality(const _quality: integer): boolean;
function php_setFilename(const _filename: string): boolean;
function php_setFirstIterator(): boolean;
function php_setFont(const _font: string): boolean;
function php_setFormat(const _format: string): boolean;
function php_setGravity(const _gravity: integer): boolean;
function php_setImage(const _replace: variant): boolean;
function php_setImageAlphaChannel(const _mode: integer): boolean;
function php_setImageArtifact(const _artifact: string; const _value: string): boolean;
procedure php_setImageAttribute(const _key: string; const _value: string);
function php_setImageBackgroundColor(const _background: variant): boolean;
function php_setImageBias(const _bias: extended): boolean;
procedure php_setImageBiasQuantum(const _bias: string);
function php_setImageBluePrimary(const _x: extended; const _y: extended): boolean;
function php_setImageBorderColor(const _border: variant): boolean;
function php_setImageChannelDepth(const _channel: integer; const _depth: integer): boolean;
function php_setImageClipMask(const _clip_mask: variant): boolean;
function php_setImageColormapColor(const _index: integer; const _color: variant): boolean;
function php_setImageColorspace(const _colorspace: integer): boolean;
function php_setImageCompose(const _compose: integer): boolean;
function php_setImageCompression(const _compression: integer): boolean;
function php_setImageCompressionQuality(const _quality: integer): boolean;
function php_setImageDelay(const _delay: integer): boolean;
function php_setImageDepth(const _depth: integer): boolean;
function php_setImageDispose(const _dispose: integer): boolean;
function php_setImageExtent(const _columns: integer; const _rows: integer): boolean;
function php_setImageFilename(const _filename: string): boolean;
function php_setImageFormat(const _format: string): boolean;
function php_setImageGamma(const _gamma: extended): boolean;
function php_setImageGravity(const _gravity: integer): boolean;
function php_setImageGreenPrimary(const _x: extended; const _y: extended): boolean;
function php_setImageIndex(const _index: integer): boolean;
function php_setImageInterlaceScheme(const _interlace_scheme: integer): boolean;
function php_setImageInterpolateMethod(const _method: integer): boolean;
function php_setImageIterations(const _iterations: integer): boolean;
function php_setImageMatte(const _matte: boolean): boolean;
function php_setImageMatteColor(const _matte: variant): boolean;
function php_setImageOpacity(const _opacity: extended): boolean;
function php_setImageOrientation(const _orientation: integer): boolean;
function php_setImagePage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean;
function php_setImageProfile(const _name: string; const _profile: string): boolean;
function php_setImageProperty(const _name: string; const _value: string): boolean;
function php_setImageRedPrimary(const _x: extended; const _y: extended): boolean;
function php_setImageRenderingIntent(const _rendering_intent: integer): boolean;
function php_setImageResolution(const _x_resolution: extended; const _y_resolution: extended): boolean;
function php_setImageScene(const _scene: integer): boolean;
function php_setImageTicksPerSecond(const _ticks_per_second: integer): boolean;
function php_setImageType(const _image_type: integer): boolean;
function php_setImageUnits(const _units: integer): boolean;
function php_setImageVirtualPixelMethod(const _method: integer): boolean;
function php_setImageWhitePoint(const _x: extended; const _y: extended): boolean;
function php_setInterlaceScheme(const _interlace_scheme: integer): boolean;
function php_setIteratorIndex(const _index: integer): boolean;
function php_setLastIterator(): boolean;
function php_setOption(const _key: string; const _value: string): boolean;
function php_setPage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean;
function php_setPointSize(const _point_size: extended): boolean;
procedure php_setProgressMonitor(const _callback: variant);
procedure php_setRegistry(const _key: string; const _value: string);
function php_setResolution(const _x_resolution: extended; const _y_resolution: extended): boolean;
function php_setResourceLimit(const _type: integer; const _limit: integer): boolean;
function php_setSamplingFactors(const _factors: variant): boolean;
function php_setSize(const _columns: integer; const _rows: integer): boolean;
function php_setSizeOffset(const _columns: integer; const _rows: integer; const _offset: integer): boolean;
function php_shadeImage(const _gray: boolean; const _azimuth: extended; const _elevation: extended): boolean;
function php_shadowImage(const _opacity: extended; const _sigma: extended; const _x: integer; const _y: integer): boolean;
function php_sharpenImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean;
function php_shaveImage(const _columns: integer; const _rows: integer): boolean;
function php_shearImage(const _background: variant; const _x_shear: extended; const _y_shear: extended): boolean;
function php_sigmoidalContrastImage(const _sharpen: boolean; const _alpha: extended; const _beta: extended; const _channel: integer): boolean;
function php_sketchImage(const _radius: extended; const _sigma: extended; const _angle: extended): boolean;
function php_solarizeImage(const _threshold: integer): boolean;
function php_sparseColorImage(const _SPARSE_METHOD: integer; const _arguments: variant; const _channel: integer): boolean;
function php_spliceImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean;
function php_spreadImage(const _radius: extended): boolean;
procedure php_statisticImage(const _type: integer; const _width: integer; const _height: integer; const _CHANNEL: string);
function php_stereoImage(const _offset_wand: variant): boolean;
function php_stripImage(): boolean;
function php_swirlImage(const _degrees: extended): boolean;
function php_textureImage(const _texture_wand: variant): boolean;
function php_thresholdImage(const _threshold: extended; const _channel: integer): boolean;
function php_thumbnailImage(const _columns: integer; const _rows: integer; const _bestfit: boolean; const _fill: boolean): boolean;
function php_tintImage(const _tint: variant; const _opacity: variant): boolean;
function php_transformImageColorspace(const _colorspace: integer): boolean;
function php_transparentPaintImage(const _target: variant; const _alpha: extended; const _fuzz: extended; const _invert: boolean): boolean;
function php_transposeImage(): boolean;
function php_transverseImage(): boolean;
function php_trimImage(const _fuzz: extended): boolean;
function php_uniqueImageColors(): boolean;
function php_unsharpMaskImage(const _radius: extended; const _sigma: extended; const _amount: extended; const _threshold: extended; const _channel: integer): boolean;
function php_vignetteImage(const _blackPoint: extended; const _whitePoint: extended; const _x: integer; const _y: integer): boolean;
function php_waveImage(const _amplitude: extended; const _length: extended): boolean;
function php_whiteThresholdImage(const _threshold: variant): boolean;
function php_writeImage(const _filename: string): boolean;
function php_writeImageFile(const _filehandle: variant): boolean;
function php_writeImages(const _filename: string; const _adjoin: boolean): boolean;
function php_writeImagesFile(const _filehandle: variant): boolean;
function php_callback(const _offset: variant; const _span: variant): boolean;
function php_affine(const _affine: variant): boolean;
function php_annotation(const _x: extended; const _y: extended; const _text: string): boolean;
function php_arc(const _sx: extended; const _sy: extended; const _ex: extended; const _ey: extended; const _sd: extended; const _ed: extended): boolean;
function php_bezier(const _coordinates: variant): boolean;
function php_circle(const _ox: extended; const _oy: extended; const _px: extended; const _py: extended): boolean;
function php_color(const _x: extended; const _y: extended; const _paintMethod: integer): boolean;
function php_comment(const _comment: string): boolean;
function php_composite(const _compose: integer; const _x: extended; const _y: extended; const _width: extended; const _height: extended; const _compositeWand: variant): boolean;
function php_ellipse(const _ox: extended; const _oy: extended; const _rx: extended; const _ry: extended; const _start: extended; const _end: extended): boolean;
function php_getClipPath(): string;
function php_getClipRule(): integer;
function php_getClipUnits(): integer;
function php_getFontFamily(): string;
function php_getFontStretch(): integer;
function php_getStrokeAntialias(): boolean;
function php_getStrokeDashArray(): variant;
function php_getStrokeDashOffset(): extended;
function php_getStrokeLineCap(): integer;
function php_getStrokeLineJoin(): integer;
function php_getStrokeMiterLimit(): integer;
function php_getTextAlignment(): integer;
function php_getTextAntialias(): boolean;
function php_getTextInterlineSpacing(): extended;
function php_getTextInterwordSpacing(): extended;
function php_getTextKerning(): extended;
function php_getVectorGraphics(): string;
function php_line(const _sx: extended; const _sy: extended; const _ex: extended; const _ey: extended): boolean;
function php_matte(const _x: extended; const _y: extended; const _paintMethod: integer): boolean;
function php_pathClose(): boolean;
function php_pathCurveToAbsolute(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean;
function php_pathCurveToQuadraticBezierAbsolute(const _x1: extended; const _y1: extended; const _x: extended; const _y: extended): boolean;
function php_pathCurveToQuadraticBezierRelative(const _x1: extended; const _y1: extended; const _x: extended; const _y: extended): boolean;
function php_pathCurveToQuadraticBezierSmoothAbsolute(const _x: extended; const _y: extended): boolean;
function php_pathCurveToQuadraticBezierSmoothRelative(const _x: extended; const _y: extended): boolean;
function php_pathCurveToRelative(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean;
function php_pathCurveToSmoothAbsolute(const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean;
function php_pathCurveToSmoothRelative(const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean;
function php_pathEllipticArcAbsolute(const _rx: extended; const _ry: extended; const _x_axis_rotation: extended; const _large_arc_flag: boolean; const _sweep_flag: boolean; const _x: extended; const _y: extended): boolean;
function php_pathEllipticArcRelative(const _rx: extended; const _ry: extended; const _x_axis_rotation: extended; const _large_arc_flag: boolean; const _sweep_flag: boolean; const _x: extended; const _y: extended): boolean;
function php_pathFinish(): boolean;
function php_pathLineToAbsolute(const _x: extended; const _y: extended): boolean;
function php_pathLineToHorizontalAbsolute(const _x: extended): boolean;
function php_pathLineToHorizontalRelative(const _x: extended): boolean;
function php_pathLineToRelative(const _x: extended; const _y: extended): boolean;
function php_pathLineToVerticalAbsolute(const _y: extended): boolean;
function php_pathLineToVerticalRelative(const _y: extended): boolean;
function php_pathMoveToAbsolute(const _x: extended; const _y: extended): boolean;
function php_pathMoveToRelative(const _x: extended; const _y: extended): boolean;
function php_pathStart(): boolean;
function php_point(const _x: extended; const _y: extended): boolean;
function php_polygon(const _coordinates: variant): boolean;
function php_polyline(const _coordinates: variant): boolean;
function php_pop(): boolean;
function php_popClipPath(): boolean;
function php_popDefs(): boolean;
function php_popPattern(): boolean;
function php_push(): boolean;
function php_pushClipPath(const _clip_mask_id: string): boolean;
function php_pushDefs(): boolean;
function php_pushPattern(const _pattern_id: string; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean;
function php_rectangle(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended): boolean;
procedure php_resetVectorGraphics();
function php_rotate(const _degrees: extended): boolean;
function php_roundRectangle(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _rx: extended; const _ry: extended): boolean;
function php_setClipPath(const _clip_mask: string): boolean;
function php_setClipRule(const _fill_rule: integer): boolean;
function php_setClipUnits(const _clip_units: integer): boolean;
function php_setFillAlpha(const _opacity: extended): boolean;
function php_setFillColor(const _fill_pixel: variant): boolean;
function php_setFillOpacity(const _fillOpacity: extended): boolean;
function php_setFillPatternURL(const _fill_url: string): boolean;
function php_setFillRule(const _fill_rule: integer): boolean;
function php_setFontFamily(const _font_family: string): boolean;
function php_setFontSize(const _pointsize: extended): boolean;
function php_setFontStretch(const _fontStretch: integer): boolean;
function php_setFontStyle(const _style: integer): boolean;
function php_setFontWeight(const _font_weight: integer): boolean;
procedure php_setResolution(const _x_resolution: string; const _y_resolution: string);
function php_setStrokeAlpha(const _opacity: extended): boolean;
function php_setStrokeAntialias(const _stroke_antialias: boolean): boolean;
function php_setStrokeColor(const _stroke_pixel: variant): boolean;
function php_setStrokeDashArray(const _dashArray: variant): boolean;
function php_setStrokeDashOffset(const _dash_offset: extended): boolean;
function php_setStrokeLineCap(const _linecap: integer): boolean;
function php_setStrokeLineJoin(const _linejoin: integer): boolean;
function php_setStrokeMiterLimit(const _miterlimit: integer): boolean;
function php_setStrokeOpacity(const _stroke_opacity: extended): boolean;
function php_setStrokePatternURL(const _stroke_url: string): boolean;
function php_setStrokeWidth(const _stroke_width: extended): boolean;
function php_setTextAlignment(const _alignment: integer): boolean;
function php_setTextAntialias(const _antiAlias: boolean): boolean;
function php_setTextDecoration(const _decoration: integer): boolean;
function php_setTextEncoding(const _encoding: string): boolean;
procedure php_setTextInterlineSpacing(const _spacing: extended);
procedure php_setTextInterwordSpacing(const _spacing: extended);
procedure php_setTextKerning(const _kerning: extended);
function php_setTextUnderColor(const _under_color: variant): boolean;
function php_setVectorGraphics(const _xml: string): boolean;
function php_setViewbox(const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer): boolean;
function php_skewX(const _degrees: extended): boolean;
function php_skewY(const _degrees: extended): boolean;
function php_translate(const _x: extended; const _y: extended): boolean;
function php_getColor(const _normalized: boolean): variant;
function php_getColorAsString(): string;
function php_getColorQuantum(): variant;
function php_getColorValueQuantum(): variant;
function php_getHSL(): variant;
function php_getIndex(): integer;
function php_isPixelSimilar(const _color: variant; const _fuzz: extended): boolean;
function php_isPixelSimilarQuantum(const _color: string; const _fuzz: string): boolean;
function php_isSimilar(const _color: variant; const _fuzz: extended): boolean;
function php_setColor(const _color: string): boolean;
procedure php_setcolorcount(const _colorCount: string);
function php_setColorValue(const _color: integer; const _value: extended): boolean;
procedure php_setColorValueQuantum(const _color: integer; const _value: variant);
function php_setHSL(const _hue: extended; const _saturation: extended; const _luminosity: extended): boolean;
procedure php_setIndex(const _index: integer);
function php_getCurrentIteratorRow(): variant;
function php_getIteratorRow(): integer;
function php_getNextIteratorRow(): variant;
function php_getPreviousIteratorRow(): variant;
function php_newPixelIterator(const _wand: variant): boolean;
function php_newPixelRegionIterator(const _wand: variant; const _x: integer; const _y: integer; const _columns: integer; const _rows: integer): boolean;
function php_resetIterator(): boolean;
function php_setIteratorFirstRow(): boolean;
function php_setIteratorLastRow(): boolean;
function php_setIteratorRow(const _row: integer): boolean;
function php_syncIterator(): boolean;
procedure php_addKernel(const _ImagickKernel: variant);
procedure php_addUnityKernel();
procedure php_scale();
function php_separate(): variant;
procedure php_cyrus_authenticate(const _connection: variant; const _mechlist: string; const _service: string; const _user: string; const _minssf: integer; const _maxssf: integer; const _authname: string; const _password: string);
function php_cyrus_bind(const _connection: variant; const _callbacks: variant): boolean;
function php_cyrus_close(const _connection: variant): boolean;
function php_cyrus_connect(const _host: string; const _port: string; const _flags: integer): variant;
function php_cyrus_query(const _connection: variant; const _query: string): variant;
function php_cyrus_unbind(const _connection: variant; const _trigger_name: string): boolean;
function php_imap_8bit(const _string: string): string;
function php_imap_alerts(): variant;
function php_imap_append(const _imap_stream: variant; const _mailbox: string; const _message: string; const _options: string; const _internal_date: string): boolean;
function php_imap_base64(const _text: string): string;
function php_imap_binary(const _string: string): string;
function php_imap_body(const _imap_stream: variant; const _msg_number: integer; const _options: integer): string;
function php_imap_bodystruct(const _imap_stream: variant; const _msg_number: integer; const _section: string): variant;
function php_imap_check(const _imap_stream: variant): variant;
function php_imap_clearflag_full(const _imap_stream: variant; const _sequence: string; const _flag: string; const _options: integer): boolean;
function php_imap_close(const _imap_stream: variant; const _flag: integer): boolean;
function php_imap_createmailbox(const _imap_stream: variant; const _mailbox: string): boolean;
function php_imap_delete(const _imap_stream: variant; const _msg_number: integer; const _options: integer): boolean;
function php_imap_deletemailbox(const _imap_stream: variant; const _mailbox: string): boolean;
function php_imap_errors(): variant;
function php_imap_expunge(const _imap_stream: variant): boolean;
function php_imap_fetch_overview(const _imap_stream: variant; const _sequence: string; const _options: integer): variant;
function php_imap_fetchbody(const _imap_stream: variant; const _msg_number: integer; const _section: string; const _options: integer): string;
function php_imap_fetchheader(const _imap_stream: variant; const _msg_number: integer; const _options: integer): string;
function php_imap_fetchmime(const _imap_stream: variant; const _msg_number: integer; const _section: string; const _options: integer): string;
function php_imap_fetchstructure(const _imap_stream: variant; const _msg_number: integer; const _options: integer): variant;
function php_imap_gc(const _imap_stream: variant; const _caches: integer): boolean;
function php_imap_get_quota(const _imap_stream: variant; const _quota_root: string): variant;
function php_imap_get_quotaroot(const _imap_stream: variant; const _quota_root: string): variant;
function php_imap_getacl(const _imap_stream: variant; const _mailbox: string): variant;
function php_imap_getmailboxes(const _imap_stream: variant; const _ref: string; const _pattern: string): variant;
function php_imap_getsubscribed(const _imap_stream: variant; const _ref: string; const _pattern: string): variant;
function php_imap_headerinfo(const _imap_stream: variant; const _msg_number: integer; const _fromlength: integer; const _subjectlength: integer; const _defaulthost: string): variant;
function php_imap_headers(const _imap_stream: variant): variant;
function php_imap_last_error(): string;
function php_imap_list(const _imap_stream: variant; const _ref: string; const _pattern: string): variant;
function php_imap_listscan(const _imap_stream: variant; const _ref: string; const _pattern: string; const _content: string): variant;
function php_imap_lsub(const _imap_stream: variant; const _ref: string; const _pattern: string): variant;
function php_imap_mail_compose(const _envelope: variant; const _body: variant): string;
function php_imap_mail_copy(const _imap_stream: variant; const _msglist: string; const _mailbox: string; const _options: integer): boolean;
function php_imap_mail_move(const _imap_stream: variant; const _msglist: string; const _mailbox: string; const _options: integer): boolean;
function php_imap_mail(const _to: string; const _subject: string; const _message: string; const _additional_headers: string; const _cc: string; const _bcc: string; const _rpath: string): boolean;
function php_imap_mailboxmsginfo(const _imap_stream: variant): variant;
function php_imap_mime_header_decode(const _text: string): variant;
function php_imap_msgno(const _imap_stream: variant; const _uid: integer): integer;
function php_imap_num_msg(const _imap_stream: variant): integer;
function php_imap_num_recent(const _imap_stream: variant): integer;
function php_imap_open(const _mailbox: string; const _username: string; const _password: string; const _options: integer; const _n_retries: integer; const _params: variant): variant;
function php_imap_ping(const _imap_stream: variant): boolean;
function php_imap_qprint(const _string: string): string;
function php_imap_renamemailbox(const _imap_stream: variant; const _old_mbox: string; const _new_mbox: string): boolean;
function php_imap_reopen(const _imap_stream: variant; const _mailbox: string; const _options: integer; const _n_retries: integer): boolean;
function php_imap_rfc822_parse_adrlist(const _address: string; const _default_host: string): variant;
function php_imap_rfc822_parse_headers(const _headers: string; const _defaulthost: string): variant;
function php_imap_rfc822_write_address(const _mailbox: string; const _host: string; const _personal: string): string;
function php_imap_savebody(const _imap_stream: variant; const _file: variant; const _msg_number: integer; const _part_number: string; const _options: integer): boolean;
function php_imap_search(const _imap_stream: variant; const _criteria: string; const _options: integer; const _charset: string): variant;
function php_imap_set_quota(const _imap_stream: variant; const _quota_root: string; const _quota_limit: integer): boolean;
function php_imap_setacl(const _imap_stream: variant; const _mailbox: string; const _id: string; const _rights: string): boolean;
function php_imap_setflag_full(const _imap_stream: variant; const _sequence: string; const _flag: string; const _options: integer): boolean;
function php_imap_sort(const _imap_stream: variant; const _criteria: integer; const _reverse: integer; const _options: integer; const _search_criteria: string; const _charset: string): variant;
function php_imap_status(const _imap_stream: variant; const _mailbox: string; const _options: integer): variant;
function php_imap_subscribe(const _imap_stream: variant; const _mailbox: string): boolean;
function php_imap_thread(const _imap_stream: variant; const _options: integer): variant;
function php_imap_timeout(const _timeout_type: integer; const _timeout: integer): variant;
function php_imap_uid(const _imap_stream: variant; const _msg_number: integer): integer;
function php_imap_undelete(const _imap_stream: variant; const _msg_number: integer; const _flags: integer): boolean;
function php_imap_unsubscribe(const _imap_stream: variant; const _mailbox: string): boolean;
function php_imap_utf7_decode(const _text: string): string;
function php_imap_utf7_encode(const _data: string): string;
function php_imap_utf8(const _mime_encoded_text: string): string;
function php_ezmlm_hash(const _addr: string): integer;
function php_mail(const _to: string; const _subject: string; const _message: string; const _additional_headers: string; const _additional_parameters: string): boolean;
function php_mailparse_determine_best_xfer_encoding(const _fp: variant): string;
function php_mailparse_msg_create(): variant;
function php_mailparse_msg_extract_part_file(const _mimemail: variant; const _filename: variant; const _callbackfunc: variant): string;
procedure php_mailparse_msg_extract_part(const _mimemail: variant; const _msgbody: string; const _callbackfunc: variant);
function php_mailparse_msg_extract_whole_part_file(const _mimemail: variant; const _filename: string; const _callbackfunc: variant): string;
function php_mailparse_msg_free(const _mimemail: variant): boolean;
function php_mailparse_msg_get_part_data(const _mimemail: variant): variant;
function php_mailparse_msg_get_part(const _mimemail: variant; const _mimesection: string): variant;
function php_mailparse_msg_get_structure(const _mimemail: variant): variant;
function php_mailparse_msg_parse_file(const _filename: string): variant;
function php_mailparse_msg_parse(const _mimemail: variant; const _data: string): boolean;
function php_mailparse_rfc822_parse_addresses(const _addresses: string): variant;
function php_mailparse_stream_encode(const _sourcefp: variant; const _destfp: variant; const _encoding: string): boolean;
function php_mailparse_uudecode_all(const _fp: variant): variant;
function php_vpopmail_add_alias_domain_ex(const _olddomain: string; const _newdomain: string): boolean;
function php_vpopmail_add_alias_domain(const _domain: string; const _aliasdomain: string): boolean;
function php_vpopmail_add_domain_ex(const _domain: string; const _passwd: string; const _quota: string; const _bounce: string; const _apop: boolean): boolean;
function php_vpopmail_add_domain(const _domain: string; const _dir: string; const _uid: integer; const _gid: integer): boolean;
function php_vpopmail_add_user(const _user: string; const _domain: string; const _password: string; const _gecos: string; const _apop: boolean): boolean;
function php_vpopmail_alias_add(const _user: string; const _domain: string; const _alias: string): boolean;
function php_vpopmail_alias_del_domain(const _domain: string): boolean;
function php_vpopmail_alias_del(const _user: string; const _domain: string): boolean;
function php_vpopmail_alias_get_all(const _domain: string): variant;
function php_vpopmail_alias_get(const _alias: string; const _domain: string): variant;
function php_vpopmail_auth_user(const _user: string; const _domain: string; const _password: string; const _apop: string): boolean;
function php_vpopmail_del_domain_ex(const _domain: string): boolean;
function php_vpopmail_del_domain(const _domain: string): boolean;
function php_vpopmail_del_user(const _user: string; const _domain: string): boolean;
function php_vpopmail_error(): string;
function php_vpopmail_passwd(const _user: string; const _domain: string; const _password: string; const _apop: boolean): boolean;
function php_vpopmail_set_user_quota(const _user: string; const _domain: string; const _quota: string): boolean;
function php_bcadd(const _left_operand: string; const _right_operand: string; const _scale: integer): string;
function php_bccomp(const _left_operand: string; const _right_operand: string; const _scale: integer): integer;
function php_bcdiv(const _left_operand: string; const _right_operand: string; const _scale: integer): string;
function php_bcmod(const _left_operand: string; const _modulus: string): string;
function php_bcmul(const _left_operand: string; const _right_operand: string; const _scale: integer): string;
function php_bcpow(const _left_operand: string; const _right_operand: string; const _scale: integer): string;
function php_bcpowmod(const _left_operand: string; const _right_operand: string; const _modulus: string; const _scale: integer): string;
function php_bcscale(const _scale: integer): boolean;
function php_bcsqrt(const _operand: string; const _scale: integer): string;
function php_bcsub(const _left_operand: string; const _right_operand: string; const _scale: integer): string;
procedure php_gmp_clrbit(const _a: variant; const _index: integer);
function php_gmp_cmp(const _a: variant; const _b: variant): integer;
function php_gmp_div_qr(const _n: variant; const _d: variant; const _round: integer): variant;
function php_gmp_export(const _gmpnumber: variant; const _word_size: integer; const _options: integer): string;
function php_gmp_gcdext(const _a: variant; const _b: variant): variant;
function php_gmp_hamdist(const _a: variant; const _b: variant): integer;
function php_gmp_intval(const _gmpnumber: variant): integer;
function php_gmp_jacobi(const _a: variant; const _p: variant): integer;
function php_gmp_legendre(const _a: variant; const _p: variant): integer;
function php_gmp_perfect_square(const _a: variant): boolean;
function php_gmp_popcount(const _a: variant): integer;
function php_gmp_prob_prime(const _a: variant; const _reps: integer): integer;
function php_gmp_random_seed(const _seed: variant): variant;
function php_gmp_rootrem(const _a: variant; const _nth: integer): variant;
function php_gmp_scan0(const _a: variant; const _start: integer): integer;
function php_gmp_scan1(const _a: variant; const _start: integer): integer;
procedure php_gmp_setbit(var _a: variant; const _index: integer; const _bit_on: boolean);
function php_gmp_sign(const _a: variant): integer;
function php_gmp_sqrtrem(const _a: variant): variant;
function php_gmp_strval(const _gmpnumber: variant; const _base: integer): string;
function php_gmp_testbit(const _a: variant; const _index: integer): boolean;
function php_eigenValues(const _a: variant; const _left: variant; const _right: variant): variant;
function php_identity(const _n: integer): variant;
function php_leastSquaresByFactorisation(const _a: variant; const _b: variant): variant;
function php_leastSquaresBySVD(const _a: variant; const _b: variant): variant;
function php_pseudoInverse(const _a: variant): variant;
function php_singularValues(const _a: variant): variant;
function php_solveLinearEquation(const _a: variant; const _b: variant): variant;
function php_abs(const _number: variant): variant;
function php_acos(const _arg: extended): extended;
function php_acosh(const _arg: extended): extended;
function php_asin(const _arg: extended): extended;
function php_asinh(const _arg: extended): extended;
function php_atan2(const _y: extended; const _x: extended): extended;
function php_atan(const _arg: extended): extended;
function php_atanh(const _arg: extended): extended;
function php_base_convert(const _number: string; const _frombase: integer; const _tobase: integer): string;
function php_bindec(const _binary_string: string): variant;
function php_ceil(const _value: extended): extended;
function php_cos(const _arg: extended): extended;
function php_cosh(const _arg: extended): extended;
function php_decbin(const _number: integer): string;
function php_dechex(const _number: integer): string;
function php_decoct(const _number: integer): string;
function php_deg2rad(const _number: extended): extended;
function php_exp(const _arg: extended): extended;
function php_expm1(const _arg: extended): extended;
function php_floor(const _value: extended): variant;
function php_fmod(const _x: extended; const _y: extended): extended;
function php_getrandmax(): integer;
function php_hexdec(const _hex_string: string): variant;
function php_hypot(const _x: extended; const _y: extended): extended;
function php_intdiv(const _dividend: integer; const _divisor: integer): integer;
function php_is_finite(const _val: extended): boolean;
function php_is_infinite(const _val: extended): boolean;
function php_is_nan(const _val: extended): boolean;
function php_lcg_value(): extended;
function php_log10(const _arg: extended): extended;
function php_log1p(const _number: extended): extended;
function php_log(const _arg: extended; const _base: extended): extended;
function php_max(const _values: variant): variant;
function php_max(const _value1: variant; const _value2: variant): variant;
function php_min(const _values: variant): variant;
function php_min(const _value1: variant; const _value2: variant): variant;
function php_mt_getrandmax(): integer;
function php_mt_rand(): integer;
function php_mt_rand(const _min: integer; const _max: integer): integer;
procedure php_mt_srand(const _seed: integer);
function php_octdec(const _octal_string: string): variant;
function php_pi(): extended;
function php_pow(const _base: variant; const _exp: variant): variant;
function php_rad2deg(const _number: extended): extended;
function php_rand(): integer;
function php_rand(const _min: integer; const _max: integer): integer;
function php_round(const _val: extended; const _precision: integer; const _mode: integer): extended;
function php_sin(const _arg: extended): extended;
function php_sinh(const _arg: extended): extended;
function php_sqrt(const _arg: extended): extended;
procedure php_srand(const _seed: integer);
function php_tan(const _arg: extended): extended;
function php_tanh(const _arg: extended): extended;
function php_stats_absolute_deviation(const _a: variant): extended;
function php_stats_cdf_beta(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_binomial(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_cauchy(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_chisquare(const _par1: extended; const _par2: extended; const _which: integer): extended;
function php_stats_cdf_exponential(const _par1: extended; const _par2: extended; const _which: integer): extended;
function php_stats_cdf_f(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_gamma(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_laplace(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_logistic(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_negative_binomial(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_noncentral_chisquare(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_noncentral_f(const _par1: extended; const _par2: extended; const _par3: extended; const _par4: extended; const _which: integer): extended;
function php_stats_cdf_poisson(const _par1: extended; const _par2: extended; const _which: integer): extended;
function php_stats_cdf_t(const _par1: extended; const _par2: extended; const _which: integer): extended;
function php_stats_cdf_uniform(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_cdf_weibull(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_covariance(const _a: variant; const _b: variant): extended;
function php_stats_den_uniform(const _x: extended; const _a: extended; const _b: extended): extended;
function php_stats_dens_beta(const _x: extended; const _a: extended; const _b: extended): extended;
function php_stats_dens_cauchy(const _x: extended; const _ave: extended; const _stdev: extended): extended;
function php_stats_dens_chisquare(const _x: extended; const _dfr: extended): extended;
function php_stats_dens_exponential(const _x: extended; const _scale: extended): extended;
function php_stats_dens_f(const _x: extended; const _dfr1: extended; const _dfr2: extended): extended;
function php_stats_dens_gamma(const _x: extended; const _shape: extended; const _scale: extended): extended;
function php_stats_dens_laplace(const _x: extended; const _ave: extended; const _stdev: extended): extended;
function php_stats_dens_logistic(const _x: extended; const _ave: extended; const _stdev: extended): extended;
function php_stats_dens_negative_binomial(const _x: extended; const _n: extended; const _pi: extended): extended;
function php_stats_dens_normal(const _x: extended; const _ave: extended; const _stdev: extended): extended;
function php_stats_dens_pmf_binomial(const _x: extended; const _n: extended; const _pi: extended): extended;
function php_stats_dens_pmf_hypergeometric(const _n1: extended; const _n2: extended; const _N12: extended; const _N23: extended): extended;
function php_stats_dens_pmf_poisson(const _x: extended; const _lb: extended): extended;
function php_stats_dens_t(const _x: extended; const _dfr: extended): extended;
function php_stats_dens_weibull(const _x: extended; const _a: extended; const _b: extended): extended;
function php_stats_harmonic_mean(const _a: variant): variant;
function php_stats_kurtosis(const _a: variant): extended;
function php_stats_rand_gen_beta(const _a: extended; const _b: extended): extended;
function php_stats_rand_gen_chisquare(const _df: extended): extended;
function php_stats_rand_gen_exponential(const _av: extended): extended;
function php_stats_rand_gen_f(const _dfn: extended; const _dfd: extended): extended;
function php_stats_rand_gen_funiform(const _low: extended; const _high: extended): extended;
function php_stats_rand_gen_gamma(const _a: extended; const _r: extended): extended;
function php_stats_rand_gen_ibinomial_negative(const _n: integer; const _p: extended): integer;
function php_stats_rand_gen_ibinomial(const _n: integer; const _pp: extended): integer;
function php_stats_rand_gen_int(): integer;
function php_stats_rand_gen_ipoisson(const _mu: extended): integer;
function php_stats_rand_gen_iuniform(const _low: integer; const _high: integer): integer;
function php_stats_rand_gen_noncenral_chisquare(const _df: extended; const _xnonc: extended): extended;
function php_stats_rand_gen_noncentral_f(const _dfn: extended; const _dfd: extended; const _xnonc: extended): extended;
function php_stats_rand_gen_noncentral_t(const _df: extended; const _xnonc: extended): extended;
function php_stats_rand_gen_normal(const _av: extended; const _sd: extended): extended;
function php_stats_rand_gen_t(const _df: extended): extended;
function php_stats_rand_get_seeds(): variant;
function php_stats_rand_phrase_to_seeds(const _phrase: string): variant;
function php_stats_rand_ranf(): extended;
procedure php_stats_rand_setall(const _iseed1: integer; const _iseed2: integer);
function php_stats_skew(const _a: variant): extended;
function php_stats_standard_deviation(const _a: variant; const _sample: boolean): extended;
function php_stats_stat_binomial_coef(const _x: integer; const _n: integer): extended;
function php_stats_stat_correlation(const _arr1: variant; const _arr2: variant): extended;
function php_stats_stat_gennch(const _n: integer): extended;
function php_stats_stat_independent_t(const _arr1: variant; const _arr2: variant): extended;
function php_stats_stat_innerproduct(const _arr1: variant; const _arr2: variant): extended;
function php_stats_stat_noncentral_t(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended;
function php_stats_stat_paired_t(const _arr1: variant; const _arr2: variant): extended;
function php_stats_stat_percentile(const _df: extended; const _xnonc: extended): extended;
function php_stats_stat_powersum(const _arr: variant; const _power: extended): extended;
function php_stats_variance(const _a: variant; const _sample: boolean): extended;
function php_trader_acos(const _real: variant): variant;
function php_trader_ad(const _high: variant; const _low: variant; const _close: variant; const _volume: variant): variant;
function php_trader_add(const _real0: variant; const _real1: variant): variant;
function php_trader_adosc(const _high: variant; const _low: variant; const _close: variant; const _volume: variant; const _fastPeriod: integer; const _slowPeriod: integer): variant;
function php_trader_adx(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_adxr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_apo(const _real: variant; const _fastPeriod: integer; const _slowPeriod: integer; const _mAType: integer): variant;
function php_trader_aroon(const _high: variant; const _low: variant; const _timePeriod: integer): variant;
function php_trader_aroonosc(const _high: variant; const _low: variant; const _timePeriod: integer): variant;
function php_trader_asin(const _real: variant): variant;
function php_trader_atan(const _real: variant): variant;
function php_trader_atr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_avgprice(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_bbands(const _real: variant; const _timePeriod: integer; const _nbDevUp: extended; const _nbDevDn: extended; const _mAType: integer): variant;
function php_trader_beta(const _real0: variant; const _real1: variant; const _timePeriod: integer): variant;
function php_trader_bop(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cci(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_cdl2crows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdl3blackcrows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdl3inside(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdl3linestrike(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdl3outside(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdl3starsinsouth(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdl3whitesoldiers(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlabandonedbaby(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant;
function php_trader_cdladvanceblock(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlbelthold(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlbreakaway(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlclosingmarubozu(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlconcealbabyswall(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlcounterattack(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdldarkcloudcover(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant;
function php_trader_cdldoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdldojistar(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdldragonflydoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlengulfing(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdleveningdojistar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant;
function php_trader_cdleveningstar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant;
function php_trader_cdlgapsidesidewhite(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlgravestonedoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlhammer(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlhangingman(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlharami(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlharamicross(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlhighwave(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlhikkake(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlhikkakemod(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlhomingpigeon(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlidentical3crows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlinneck(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlinvertedhammer(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlkicking(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlkickingbylength(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlladderbottom(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdllongleggeddoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdllongline(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlmarubozu(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlmatchinglow(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlmathold(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant;
function php_trader_cdlmorningdojistar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant;
function php_trader_cdlmorningstar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant;
function php_trader_cdlonneck(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlpiercing(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlrickshawman(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlrisefall3methods(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlseparatinglines(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlshootingstar(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlshortline(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlspinningtop(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlstalledpattern(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlsticksandwich(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdltakuri(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdltasukigap(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlthrusting(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdltristar(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlunique3river(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlupsidegap2crows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_cdlxsidegap3methods(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_ceil(const _real: variant): variant;
function php_trader_cmo(const _real: variant; const _timePeriod: integer): variant;
function php_trader_correl(const _real0: variant; const _real1: variant; const _timePeriod: integer): variant;
function php_trader_cos(const _real: variant): variant;
function php_trader_cosh(const _real: variant): variant;
function php_trader_dema(const _real: variant; const _timePeriod: integer): variant;
function php_trader_div(const _real0: variant; const _real1: variant): variant;
function php_trader_dx(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_ema(const _real: variant; const _timePeriod: integer): variant;
function php_trader_errno(): integer;
function php_trader_exp(const _real: variant): variant;
function php_trader_floor(const _real: variant): variant;
function php_trader_get_compat(): integer;
function php_trader_get_unstable_period(const _functionId: integer): integer;
function php_trader_ht_dcperiod(const _real: variant): variant;
function php_trader_ht_dcphase(const _real: variant): variant;
function php_trader_ht_phasor(const _real: variant): variant;
function php_trader_ht_sine(const _real: variant): variant;
function php_trader_ht_trendline(const _real: variant): variant;
function php_trader_ht_trendmode(const _real: variant): variant;
function php_trader_kama(const _real: variant; const _timePeriod: integer): variant;
function php_trader_linearreg_angle(const _real: variant; const _timePeriod: integer): variant;
function php_trader_linearreg_intercept(const _real: variant; const _timePeriod: integer): variant;
function php_trader_linearreg_slope(const _real: variant; const _timePeriod: integer): variant;
function php_trader_linearreg(const _real: variant; const _timePeriod: integer): variant;
function php_trader_ln(const _real: variant): variant;
function php_trader_log10(const _real: variant): variant;
function php_trader_ma(const _real: variant; const _timePeriod: integer; const _mAType: integer): variant;
function php_trader_macd(const _real: variant; const _fastPeriod: integer; const _slowPeriod: integer; const _signalPeriod: integer): variant;
function php_trader_macdext(const _real: variant; const _fastPeriod: integer; const _fastMAType: integer; const _slowPeriod: integer; const _slowMAType: integer; const _signalPeriod: integer; const _signalMAType: integer): variant;
function php_trader_macdfix(const _real: variant; const _signalPeriod: integer): variant;
function php_trader_mama(const _real: variant; const _fastLimit: extended; const _slowLimit: extended): variant;
function php_trader_mavp(const _real: variant; const _periods: variant; const _minPeriod: integer; const _maxPeriod: integer; const _mAType: integer): variant;
function php_trader_max(const _real: variant; const _timePeriod: integer): variant;
function php_trader_maxindex(const _real: variant; const _timePeriod: integer): variant;
function php_trader_medprice(const _high: variant; const _low: variant): variant;
function php_trader_mfi(const _high: variant; const _low: variant; const _close: variant; const _volume: variant; const _timePeriod: integer): variant;
function php_trader_midpoint(const _real: variant; const _timePeriod: integer): variant;
function php_trader_midprice(const _high: variant; const _low: variant; const _timePeriod: integer): variant;
function php_trader_min(const _real: variant; const _timePeriod: integer): variant;
function php_trader_minindex(const _real: variant; const _timePeriod: integer): variant;
function php_trader_minmax(const _real: variant; const _timePeriod: integer): variant;
function php_trader_minmaxindex(const _real: variant; const _timePeriod: integer): variant;
function php_trader_minus_di(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_minus_dm(const _high: variant; const _low: variant; const _timePeriod: integer): variant;
function php_trader_mom(const _real: variant; const _timePeriod: integer): variant;
function php_trader_mult(const _real0: variant; const _real1: variant): variant;
function php_trader_natr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_obv(const _real: variant; const _volume: variant): variant;
function php_trader_plus_di(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_plus_dm(const _high: variant; const _low: variant; const _timePeriod: integer): variant;
function php_trader_ppo(const _real: variant; const _fastPeriod: integer; const _slowPeriod: integer; const _mAType: integer): variant;
function php_trader_roc(const _real: variant; const _timePeriod: integer): variant;
function php_trader_rocp(const _real: variant; const _timePeriod: integer): variant;
function php_trader_rocr100(const _real: variant; const _timePeriod: integer): variant;
function php_trader_rocr(const _real: variant; const _timePeriod: integer): variant;
function php_trader_rsi(const _real: variant; const _timePeriod: integer): variant;
function php_trader_sar(const _high: variant; const _low: variant; const _acceleration: extended; const _maximum: extended): variant;
function php_trader_sarext(const _high: variant; const _low: variant; const _startValue: extended; const _offsetOnReverse: extended; const _accelerationInitLong: extended; const _accelerationLong: extended; const _accelerationMaxLong: extended; const _accelerationInitShort: extended; const _accelerationShort: extended; const _accelerationMaxShort: extended): variant;
procedure php_trader_set_compat(const _compatId: integer);
procedure php_trader_set_unstable_period(const _functionId: integer; const _timePeriod: integer);
function php_trader_sin(const _real: variant): variant;
function php_trader_sinh(const _real: variant): variant;
function php_trader_sma(const _real: variant; const _timePeriod: integer): variant;
function php_trader_sqrt(const _real: variant): variant;
function php_trader_stddev(const _real: variant; const _timePeriod: integer; const _nbDev: extended): variant;
function php_trader_stoch(const _high: variant; const _low: variant; const _close: variant; const _fastK_Period: integer; const _slowK_Period: integer; const _slowK_MAType: integer; const _slowD_Period: integer; const _slowD_MAType: integer): variant;
function php_trader_stochf(const _high: variant; const _low: variant; const _close: variant; const _fastK_Period: integer; const _fastD_Period: integer; const _fastD_MAType: integer): variant;
function php_trader_stochrsi(const _real: variant; const _timePeriod: integer; const _fastK_Period: integer; const _fastD_Period: integer; const _fastD_MAType: integer): variant;
function php_trader_sub(const _real0: variant; const _real1: variant): variant;
function php_trader_sum(const _real: variant; const _timePeriod: integer): variant;
function php_trader_t3(const _real: variant; const _timePeriod: integer; const _vFactor: extended): variant;
function php_trader_tan(const _real: variant): variant;
function php_trader_tanh(const _real: variant): variant;
function php_trader_tema(const _real: variant; const _timePeriod: integer): variant;
function php_trader_trange(const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_trima(const _real: variant; const _timePeriod: integer): variant;
function php_trader_trix(const _real: variant; const _timePeriod: integer): variant;
function php_trader_tsf(const _real: variant; const _timePeriod: integer): variant;
function php_trader_typprice(const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_ultosc(const _high: variant; const _low: variant; const _close: variant; const _timePeriod1: integer; const _timePeriod2: integer; const _timePeriod3: integer): variant;
function php_trader_var(const _real: variant; const _timePeriod: integer; const _nbDev: extended): variant;
function php_trader_wclprice(const _high: variant; const _low: variant; const _close: variant): variant;
function php_trader_willr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant;
function php_trader_wma(const _real: variant; const _timePeriod: integer): variant;
function php_fdf_add_doc_javascript(const _fdf_document: variant; const _script_name: string; const _script_code: string): boolean;
function php_fdf_add_template(const _fdf_document: variant; const _newpage: integer; const _filename: string; const _template: string; const _rename: integer): boolean;
procedure php_fdf_close(const _fdf_document: variant);
function php_fdf_create(): variant;
function php_fdf_enum_values(const _fdf_document: variant; const _function: variant; const _userdata: variant): boolean;
function php_fdf_errno(): integer;
function php_fdf_error(const _error_code: integer): string;
function php_fdf_get_ap(const _fdf_document: variant; const _field: string; const _face: integer; const _filename: string): boolean;
function php_fdf_get_attachment(const _fdf_document: variant; const _fieldname: string; const _savepath: string): variant;
function php_fdf_get_encoding(const _fdf_document: variant): string;
function php_fdf_get_file(const _fdf_document: variant): string;
function php_fdf_get_flags(const _fdf_document: variant; const _fieldname: string; const _whichflags: integer): integer;
function php_fdf_get_opt(const _fdf_document: variant; const _fieldname: string; const _element: integer): variant;
function php_fdf_get_status(const _fdf_document: variant): string;
function php_fdf_get_value(const _fdf_document: variant; const _fieldname: string; const _which: integer): variant;
function php_fdf_get_version(const _fdf_document: variant): string;
procedure php_fdf_header();
function php_fdf_next_field_name(const _fdf_document: variant; const _fieldname: string): string;
function php_fdf_open_string(const _fdf_data: string): variant;
function php_fdf_open(const _filename: string): variant;
function php_fdf_remove_item(const _fdf_document: variant; const _fieldname: string; const _item: integer): boolean;
function php_fdf_save_string(const _fdf_document: variant): string;
function php_fdf_save(const _fdf_document: variant; const _filename: string): boolean;
function php_fdf_set_ap(const _fdf_document: variant; const _field_name: string; const _face: integer; const _filename: string; const _page_number: integer): boolean;
function php_fdf_set_encoding(const _fdf_document: variant; const _encoding: string): boolean;
function php_fdf_set_file(const _fdf_document: variant; const _url: string; const _target_frame: string): boolean;
function php_fdf_set_flags(const _fdf_document: variant; const _fieldname: string; const _whichFlags: integer; const _newFlags: integer): boolean;
function php_fdf_set_javascript_action(const _fdf_document: variant; const _fieldname: string; const _trigger: integer; const _script: string): boolean;
function php_fdf_set_on_import_javascript(const _fdf_document: variant; const _script: string; const _before_data_import: boolean): boolean;
function php_fdf_set_opt(const _fdf_document: variant; const _fieldname: string; const _element: integer; const _str1: string; const _str2: string): boolean;
function php_fdf_set_status(const _fdf_document: variant; const _status: string): boolean;
function php_fdf_set_submit_form_action(const _fdf_document: variant; const _fieldname: string; const _trigger: integer; const _script: string; const _flags: integer): boolean;
function php_fdf_set_target_frame(const _fdf_document: variant; const _frame_name: string): boolean;
function php_fdf_set_value(const _fdf_document: variant; const _fieldname: string; const _value: variant; const _isName: integer): boolean;
function php_fdf_set_version(const _fdf_document: variant; const _version: string): boolean;
function php_gnupg_adddecryptkey(const _identifier: variant; const _fingerprint: string; const _passphrase: string): boolean;
function php_gnupg_addencryptkey(const _identifier: variant; const _fingerprint: string): boolean;
function php_gnupg_addsignkey(const _identifier: variant; const _fingerprint: string; const _passphrase: string): boolean;
function php_gnupg_cleardecryptkeys(const _identifier: variant): boolean;
function php_gnupg_clearencryptkeys(const _identifier: variant): boolean;
function php_gnupg_clearsignkeys(const _identifier: variant): boolean;
function php_gnupg_decrypt(const _identifier: variant; const _text: string): string;
function php_gnupg_decryptverify(const _identifier: variant; const _text: string; var _plaintext: string): variant;
function php_gnupg_encrypt(const _identifier: variant; const _plaintext: string): string;
function php_gnupg_encryptsign(const _identifier: variant; const _plaintext: string): string;
function php_gnupg_export(const _identifier: variant; const _fingerprint: string): string;
function php_gnupg_geterror(const _identifier: variant): string;
function php_gnupg_getprotocol(const _identifier: variant): integer;
function php_gnupg_import(const _identifier: variant; const _keydata: string): variant;
function php_gnupg_init(): variant;
function php_gnupg_keyinfo(const _identifier: variant; const _pattern: string): variant;
function php_gnupg_setarmor(const _identifier: variant; const _armor: integer): boolean;
procedure php_gnupg_seterrormode(const _identifier: variant; const _errormode: integer);
function php_gnupg_setsignmode(const _identifier: variant; const _signmode: integer): boolean;
function php_gnupg_sign(const _identifier: variant; const _plaintext: string): string;
function php_gnupg_verify(const _identifier: variant; const _signed_text: string; const _signature: string; var _plaintext: string): variant;
function php_addPage(): variant;
function php_addPageLabel(const _first_page: integer; const _style: integer; const _first_num: integer; const _prefix: string): boolean;
function php_createOutline(const _title: string; const _parent_outline: variant; const _encoder: variant): variant;
function php_getCurrentEncoder(): variant;
function php_getCurrentPage(): variant;
function php_getEncoder(const _encoding: string): variant;
function php_getFont(const _fontname: string; const _encoding: string): variant;
function php_getInfoAttr(const _type: integer): string;
function php_getPageLayout(): integer;
function php_getPageMode(): integer;
function php_getStreamSize(): integer;
function php_insertPage(const _page: variant): variant;
function php_loadJPEG(const _filename: string): variant;
function php_loadPNG(const _filename: string; const _deferred: boolean): variant;
function php_loadRaw(const _filename: string; const _width: integer; const _height: integer; const _color_space: integer): variant;
function php_loadTTC(const _fontfile: string; const _index: integer; const _embed: boolean): string;
function php_loadTTF(const _fontfile: string; const _embed: boolean): string;
function php_loadType1(const _afmfile: string; const _pfmfile: string): string;
function php_output(): boolean;
function php_readFromStream(const _bytes: integer): string;
function php_resetStream(): boolean;
function php_save(const _file: string): boolean;
function php_saveToStream(): boolean;
function php_setCompressionMode(const _mode: integer): boolean;
function php_setCurrentEncoder(const _encoding: string): boolean;
function php_setEncryptionMode(const _mode: integer; const _key_len: integer): boolean;
function php_setInfoAttr(const _type: integer; const _info: string): boolean;
function php_setInfoDateAttr(const _type: integer; const _year: integer; const _month: integer; const _day: integer; const _hour: integer; const _min: integer; const _sec: integer; const _ind: string; const _off_hour: integer; const _off_min: integer): boolean;
function php_setOpenAction(const _destination: variant): boolean;
function php_setPageLayout(const _layout: integer): boolean;
function php_setPageMode(const _mode: integer): boolean;
function php_setPagesConfiguration(const _page_per_pages: integer): boolean;
function php_setPassword(const _owner_password: string; const _user_password: string): boolean;
function php_setPermission(const _permission: integer): boolean;
function php_useCNSEncodings(): boolean;
function php_useCNSFonts(): boolean;
function php_useCNTEncodings(): boolean;
function php_useCNTFonts(): boolean;
function php_useJPEncodings(): boolean;
function php_useJPFonts(): boolean;
function php_useKREncodings(): boolean;
function php_useKRFonts(): boolean;
function php_beginText(): boolean;
function php_circle(const _x: extended; const _y: extended; const _ray: extended): boolean;
function php_concat(const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _x: extended; const _y: extended): boolean;
function php_createDestination(): variant;
function php_createLinkAnnotation(const _rectangle: variant; const _destination: variant): variant;
function php_createTextAnnotation(const _rectangle: variant; const _text: string; const _encoder: variant): variant;
function php_createURLAnnotation(const _rectangle: variant; const _url: string): variant;
function php_curveTo2(const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended): boolean;
function php_curveTo3(const _x1: extended; const _y1: extended; const _x3: extended; const _y3: extended): boolean;
function php_drawImage(const _image: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean;
function php_ellipse(const _x: extended; const _y: extended; const _xray: extended; const _yray: extended): boolean;
function php_endPath(): boolean;
function php_endText(): boolean;
function php_eofill(): boolean;
function php_eoFillStroke(const _close_path: boolean): boolean;
function php_fillStroke(const _close_path: boolean): boolean;
function php_getCharSpace(): extended;
function php_getCMYKFill(): variant;
function php_getCMYKStroke(): variant;
function php_getCurrentFont(): variant;
function php_getCurrentFontSize(): extended;
function php_getCurrentPos(): variant;
function php_getCurrentTextPos(): variant;
function php_getFillingColorSpace(): integer;
function php_getFlatness(): extended;
function php_getGMode(): integer;
function php_getGrayFill(): extended;
function php_getGrayStroke(): extended;
function php_getHorizontalScaling(): extended;
function php_getRGBFill(): variant;
function php_getRGBStroke(): variant;
function php_getStrokingColorSpace(): integer;
function php_getTextLeading(): extended;
function php_getTextMatrix(): variant;
function php_getTextRenderingMode(): integer;
function php_getTextRise(): extended;
function php_getTextWidth(const _text: string): extended;
function php_getTransMatrix(): variant;
function php_getWordSpace(): extended;
function php_lineTo(const _x: extended; const _y: extended): boolean;
function php_measureText(const _text: string; const _width: extended; const _wordwrap: boolean): integer;
function php_moveTextPos(const _x: extended; const _y: extended; const _set_leading: boolean): boolean;
function php_moveTo(const _x: extended; const _y: extended): boolean;
function php_moveToNextLine(): boolean;
function php_setCharSpace(const _char_space: extended): boolean;
function php_setCMYKFill(const _c: extended; const _m: extended; const _y: extended; const _k: extended): boolean;
function php_setCMYKStroke(const _c: extended; const _m: extended; const _y: extended; const _k: extended): boolean;
function php_setDash(const _pattern: variant; const _phase: integer): boolean;
function php_setFlatness(const _flatness: extended): boolean;
function php_setFontAndSize(const _font: variant; const _size: extended): boolean;
function php_setGrayFill(const _value: extended): boolean;
function php_setGrayStroke(const _value: extended): boolean;
function php_setHeight(const _height: extended): boolean;
function php_setHorizontalScaling(const _scaling: extended): boolean;
function php_setLineCap(const _cap: integer): boolean;
function php_setLineJoin(const _join: integer): boolean;
function php_setLineWidth(const _width: extended): boolean;
function php_setMiterLimit(const _limit: extended): boolean;
function php_setRGBFill(const _r: extended; const _g: extended; const _b: extended): boolean;
function php_setRGBStroke(const _r: extended; const _g: extended; const _b: extended): boolean;
function php_setRotate(const _angle: integer): boolean;
function php_setSlideShow(const _type: integer; const _disp_time: extended; const _trans_time: extended): boolean;
function php_setTextLeading(const _text_leading: extended): boolean;
function php_setTextMatrix(const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _x: extended; const _y: extended): boolean;
function php_setTextRenderingMode(const _mode: integer): boolean;
function php_setTextRise(const _rise: extended): boolean;
function php_setWidth(const _width: extended): boolean;
function php_setWordSpace(const _word_space: extended): boolean;
function php_showTextNextLine(const _text: string; const _word_space: extended; const _char_space: extended): boolean;
function php_stroke(const _close_path: boolean): boolean;
function php_textOut(const _x: extended; const _y: extended; const _text: string): boolean;
function php_textRect(const _left: extended; const _top: extended; const _right: extended; const _bottom: extended; const _text: string; const _align: integer): boolean;
function php_getAscent(): integer;
function php_getCapHeight(): integer;
function php_getDescent(): integer;
function php_getEncodingName(): string;
function php_getFontName(): string;
function php_getUnicodeWidth(const _character: integer): integer;
function php_getXHeight(): integer;
function php_measureText(const _text: string; const _width: extended; const _font_size: extended; const _char_space: extended; const _word_space: extended; const _word_wrap: boolean): integer;
function php_getBitsPerComponent(): integer;
function php_setColorMask(const _rmin: integer; const _rmax: integer; const _gmin: integer; const _gmax: integer; const _bmin: integer; const _bmax: integer): boolean;
function php_setMaskImage(const _mask_image: variant): boolean;
function php_getByteType(const _text: string; const _index: integer): integer;
function php_getUnicode(const _character: integer): integer;
function php_getWritingMode(): integer;
function php_setDestination(const _destination: variant): boolean;
function php_setOpened(const _opened: boolean): boolean;
function php_setBorderStyle(const _width: extended; const _dash_on: integer; const _dash_off: integer): boolean;
function php_setHighlightMode(const _mode: integer): boolean;
function php_setIcon(const _icon: integer): boolean;
function php_setFit(): boolean;
function php_setFitB(): boolean;
function php_setFitBH(const _top: extended): boolean;
function php_setFitBV(const _left: extended): boolean;
function php_setFitH(const _top: extended): boolean;
function php_setFitR(const _left: extended; const _bottom: extended; const _right: extended; const _top: extended): boolean;
function php_setFitV(const _left: extended): boolean;
function php_setXYZ(const _left: extended; const _top: extended; const _zoom: extended): boolean;
function php_ming_keypress(const _char: string): integer;
procedure php_ming_setcubicthreshold(const _threshold: integer);
procedure php_ming_setscale(const _scale: extended);
procedure php_ming_setswfcompression(const _level: integer);
procedure php_ming_useconstants(const _use: integer);
procedure php_ming_useswfversion(const _version: integer);
procedure php_addAction(const _action: variant; const _flags: integer);
procedure php_addShape(const _shape: variant; const _flags: integer);
procedure php_setAction(const _action: variant);
procedure php_setDown(const _shape: variant);
procedure php_setHit(const _shape: variant);
procedure php_setMenu(const _flag: integer);
procedure php_setOver(const _shape: variant);
procedure php_setUp(const _shape: variant);
procedure php_addColor(const _red: integer; const _green: integer; const _blue: integer; const _a: integer);
procedure php_endMask();
function php_getRot(): extended;
function php_getX(): extended;
function php_getXScale(): extended;
function php_getXSkew(): extended;
function php_getY(): extended;
function php_getYScale(): extended;
function php_getYSkew(): extended;
procedure php_move(const _dx: extended; const _dy: extended);
procedure php_multColor(const _red: extended; const _green: extended; const _blue: extended; const _a: extended);
procedure php_remove();
procedure php_rotateTo(const _angle: extended);
procedure php_scaleTo(const _x: extended; const _y: extended);
procedure php_setDepth(const _depth: integer);
procedure php_setMaskLevel(const _level: integer);
procedure php_setMatrix(const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _x: extended; const _y: extended);
procedure php_setName(const _name: string);
procedure php_setRatio(const _ratio: extended);
procedure php_skewXTo(const _degrees: extended);
procedure php_skewYTo(const _degrees: extended);
function php_getLeading(): extended;
function php_getShape(const _code: integer): string;
function php_getUTF8Width(const _string: string): extended;
function php_getWidth(const _string: string): extended;
procedure php_addChars(const _char: string);
procedure php_addUTF8Chars(const _char: string);
procedure php_addEntry(const _ratio: extended; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer);
procedure php_addExport(const _char: variant; const _name: string);
function php_addFont(const _font: variant): variant;
procedure php_labelFrame(const _label: string);
procedure php_nextFrame();
function php_output(const _compression: integer): integer;
procedure php_remove(const _instance: variant);
function php_saveToFile(const _x: variant; const _compression: integer): integer;
procedure php_setbackground(const _red: integer; const _green: integer; const _blue: integer);
procedure php_setDimension(const _width: extended; const _height: extended);
procedure php_setFrames(const _number: integer);
procedure php_setRate(const _rate: extended);
procedure php_stopSound(const _sound: variant);
function php_streamMP3(const _mp3file: variant; const _skip: extended): integer;
procedure php_writeExports();
procedure php_drawArc(const _r: extended; const _startAngle: extended; const _endAngle: extended);
procedure php_drawCircle(const _r: extended);
function php_drawCubic(const _bx: extended; const _by: extended; const _cx: extended; const _cy: extended; const _dx: extended; const _dy: extended): integer;
function php_drawCubicTo(const _bx: extended; const _by: extended; const _cx: extended; const _cy: extended; const _dx: extended; const _dy: extended): integer;
function php_drawCurve(const _controldx: extended; const _controldy: extended; const _anchordx: extended; const _anchordy: extended; const _targetdx: extended; const _targetdy: extended): integer;
function php_drawCurveTo(const _controlx: extended; const _controly: extended; const _anchorx: extended; const _anchory: extended; const _targetx: extended; const _targety: extended): integer;
procedure php_drawGlyph(const _font: variant; const _character: string; const _size: integer);
procedure php_drawLine(const _dx: extended; const _dy: extended);
procedure php_drawLineTo(const _x: extended; const _y: extended);
procedure php_movePen(const _dx: extended; const _dy: extended);
procedure php_movePenTo(const _x: extended; const _y: extended);
procedure php_setLeftFill(const _fill: variant);
procedure php_setLine(const _shape: variant);
procedure php_setRightFill(const _fill: variant);
procedure php_setLeftFill(const _red: integer; const _green: integer; const _blue: integer; const _a: integer);
procedure php_setLine(const _width: integer; const _red: integer; const _green: integer; const _blue: integer; const _a: integer);
procedure php_setRightFill(const _red: integer; const _green: integer; const _blue: integer; const _a: integer);
procedure php_loopCount(const _point: integer);
procedure php_loopInPoint(const _point: integer);
procedure php_loopOutPoint(const _point: integer);
procedure php_noMultiple();
procedure php_addString(const _string: string);
procedure php_addUTF8String(const _text: string);
procedure php_setColor(const _red: integer; const _green: integer; const _blue: integer; const _a: integer);
procedure php_setFont(const _font: variant);
procedure php_setSpacing(const _spacing: extended);
procedure php_align(const _alignement: integer);
procedure php_setBounds(const _width: extended; const _height: extended);
procedure php_setIndentation(const _width: extended);
procedure php_setLeftMargin(const _width: extended);
procedure php_setLineSpacing(const _height: extended);
procedure php_setMargins(const _left: extended; const _right: extended);
procedure php_setPadding(const _padding: extended);
procedure php_setRightMargin(const _width: extended);
function php_getNumFrames(): integer;
procedure php_setDimension(const _x: integer; const _y: integer);
function php_PDF_activate_item(const _pdfdoc: variant; const _id: integer): boolean;
function php_PDF_add_launchlink(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string): boolean;
function php_PDF_add_locallink(const _pdfdoc: variant; const _lowerleftx: extended; const _lowerlefty: extended; const _upperrightx: extended; const _upperrighty: extended; const _page: integer; const _dest: string): boolean;
function php_PDF_add_nameddest(const _pdfdoc: variant; const _name: string; const _optlist: string): boolean;
function php_PDF_add_note(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _contents: string; const _title: string; const _icon: string; const _open: integer): boolean;
function php_PDF_add_pdflink(const _pdfdoc: variant; const _bottom_left_x: extended; const _bottom_left_y: extended; const _up_right_x: extended; const _up_right_y: extended; const _filename: string; const _page: integer; const _dest: string): boolean;
function php_PDF_add_table_cell(const _pdfdoc: variant; const _table: integer; const _column: integer; const _row: integer; const _text: string; const _optlist: string): integer;
function php_PDF_add_textflow(const _pdfdoc: variant; const _textflow: integer; const _text: string; const _optlist: string): integer;
function php_PDF_add_thumbnail(const _pdfdoc: variant; const _image: integer): boolean;
function php_PDF_add_weblink(const _pdfdoc: variant; const _lowerleftx: extended; const _lowerlefty: extended; const _upperrightx: extended; const _upperrighty: extended; const _url: string): boolean;
function php_PDF_arc(const _p: variant; const _x: extended; const _y: extended; const _r: extended; const _alpha: extended; const _beta: extended): boolean;
function php_PDF_arcn(const _p: variant; const _x: extended; const _y: extended; const _r: extended; const _alpha: extended; const _beta: extended): boolean;
function php_PDF_attach_file(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string; const _description: string; const _author: string; const _mimetype: string; const _icon: string): boolean;
function php_PDF_begin_document(const _pdfdoc: variant; const _filename: string; const _optlist: string): integer;
function php_PDF_begin_font(const _pdfdoc: variant; const _filename: string; const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _e: extended; const _f: extended; const _optlist: string): boolean;
function php_PDF_begin_glyph(const _pdfdoc: variant; const _glyphname: string; const _wx: extended; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended): boolean;
function php_PDF_begin_item(const _pdfdoc: variant; const _tag: string; const _optlist: string): integer;
function php_PDF_begin_layer(const _pdfdoc: variant; const _layer: integer): boolean;
function php_PDF_begin_page_ext(const _pdfdoc: variant; const _width: extended; const _height: extended; const _optlist: string): boolean;
function php_PDF_begin_page(const _pdfdoc: variant; const _width: extended; const _height: extended): boolean;
function php_PDF_begin_pattern(const _pdfdoc: variant; const _width: extended; const _height: extended; const _xstep: extended; const _ystep: extended; const _painttype: integer): integer;
function php_PDF_begin_template_ext(const _pdfdoc: variant; const _width: extended; const _height: extended; const _optlist: string): integer;
function php_PDF_begin_template(const _pdfdoc: variant; const _width: extended; const _height: extended): integer;
function php_PDF_circle(const _pdfdoc: variant; const _x: extended; const _y: extended; const _r: extended): boolean;
function php_PDF_clip(const _p: variant): boolean;
function php_PDF_close_image(const _p: variant; const _image: integer): boolean;
function php_PDF_close_pdi_page(const _p: variant; const _page: integer): boolean;
function php_PDF_close_pdi(const _p: variant; const _doc: integer): boolean;
function php_PDF_close(const _p: variant): boolean;
function php_PDF_closepath_fill_stroke(const _p: variant): boolean;
function php_PDF_closepath_stroke(const _p: variant): boolean;
function php_PDF_closepath(const _p: variant): boolean;
function php_PDF_concat(const _p: variant; const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _e: extended; const _f: extended): boolean;
function php_PDF_continue_text(const _p: variant; const _text: string): boolean;
function php_PDF_create_3dview(const _pdfdoc: variant; const _username: string; const _optlist: string): integer;
function php_PDF_create_action(const _pdfdoc: variant; const _type: string; const _optlist: string): integer;
function php_PDF_create_annotation(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _type: string; const _optlist: string): boolean;
function php_PDF_create_bookmark(const _pdfdoc: variant; const _text: string; const _optlist: string): integer;
function php_PDF_create_field(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _name: string; const _type: string; const _optlist: string): boolean;
function php_PDF_create_fieldgroup(const _pdfdoc: variant; const _name: string; const _optlist: string): boolean;
function php_PDF_create_gstate(const _pdfdoc: variant; const _optlist: string): integer;
function php_PDF_create_pvf(const _pdfdoc: variant; const _filename: string; const _data: string; const _optlist: string): boolean;
function php_PDF_create_textflow(const _pdfdoc: variant; const _text: string; const _optlist: string): integer;
function php_PDF_curveto(const _p: variant; const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended): boolean;
function php_PDF_define_layer(const _pdfdoc: variant; const _name: string; const _optlist: string): integer;
function php_PDF_delete_pvf(const _pdfdoc: variant; const _filename: string): integer;
function php_PDF_delete_table(const _pdfdoc: variant; const _table: integer; const _optlist: string): boolean;
function php_PDF_delete_textflow(const _pdfdoc: variant; const _textflow: integer): boolean;
function php_PDF_delete(const _pdfdoc: variant): boolean;
function php_PDF_encoding_set_char(const _pdfdoc: variant; const _encoding: string; const _slot: integer; const _glyphname: string; const _uv: integer): boolean;
function php_PDF_end_document(const _pdfdoc: variant; const _optlist: string): boolean;
function php_PDF_end_font(const _pdfdoc: variant): boolean;
function php_PDF_end_glyph(const _pdfdoc: variant): boolean;
function php_PDF_end_item(const _pdfdoc: variant; const _id: integer): boolean;
function php_PDF_end_layer(const _pdfdoc: variant): boolean;
function php_PDF_end_page_ext(const _pdfdoc: variant; const _optlist: string): boolean;
function php_PDF_end_page(const _p: variant): boolean;
function php_PDF_end_pattern(const _p: variant): boolean;
function php_PDF_end_template(const _p: variant): boolean;
function php_PDF_endpath(const _p: variant): boolean;
function php_PDF_fill_imageblock(const _pdfdoc: variant; const _page: integer; const _blockname: string; const _image: integer; const _optlist: string): integer;
function php_PDF_fill_pdfblock(const _pdfdoc: variant; const _page: integer; const _blockname: string; const _contents: integer; const _optlist: string): integer;
function php_PDF_fill_stroke(const _p: variant): boolean;
function php_PDF_fill_textblock(const _pdfdoc: variant; const _page: integer; const _blockname: string; const _text: string; const _optlist: string): integer;
function php_PDF_fill(const _p: variant): boolean;
function php_PDF_findfont(const _p: variant; const _fontname: string; const _encoding: string; const _embed: integer): integer;
function php_PDF_fit_image(const _pdfdoc: variant; const _image: integer; const _x: extended; const _y: extended; const _optlist: string): boolean;
function php_PDF_fit_pdi_page(const _pdfdoc: variant; const _page: integer; const _x: extended; const _y: extended; const _optlist: string): boolean;
function php_PDF_fit_table(const _pdfdoc: variant; const _table: integer; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _optlist: string): string;
function php_PDF_fit_textflow(const _pdfdoc: variant; const _textflow: integer; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _optlist: string): string;
function php_PDF_fit_textline(const _pdfdoc: variant; const _text: string; const _x: extended; const _y: extended; const _optlist: string): boolean;
function php_PDF_get_apiname(const _pdfdoc: variant): string;
function php_PDF_get_buffer(const _p: variant): string;
function php_PDF_get_errmsg(const _pdfdoc: variant): string;
function php_PDF_get_errnum(const _pdfdoc: variant): integer;
function php_PDF_get_majorversion(): integer;
function php_PDF_get_minorversion(): integer;
function php_PDF_get_parameter(const _p: variant; const _key: string; const _modifier: extended): string;
function php_PDF_get_pdi_parameter(const _p: variant; const _key: string; const _doc: integer; const _page: integer; const _reserved: integer): string;
function php_PDF_get_pdi_value(const _p: variant; const _key: string; const _doc: integer; const _page: integer; const _reserved: integer): extended;
function php_PDF_get_value(const _p: variant; const _key: string; const _modifier: extended): extended;
function php_PDF_info_font(const _pdfdoc: variant; const _font: integer; const _keyword: string; const _optlist: string): extended;
function php_PDF_info_matchbox(const _pdfdoc: variant; const _boxname: string; const _num: integer; const _keyword: string): extended;
function php_PDF_info_table(const _pdfdoc: variant; const _table: integer; const _keyword: string): extended;
function php_PDF_info_textflow(const _pdfdoc: variant; const _textflow: integer; const _keyword: string): extended;
function php_PDF_info_textline(const _pdfdoc: variant; const _text: string; const _keyword: string; const _optlist: string): extended;
function php_PDF_initgraphics(const _p: variant): boolean;
function php_PDF_lineto(const _p: variant; const _x: extended; const _y: extended): boolean;
function php_PDF_load_3ddata(const _pdfdoc: variant; const _filename: string; const _optlist: string): integer;
function php_PDF_load_font(const _pdfdoc: variant; const _fontname: string; const _encoding: string; const _optlist: string): integer;
function php_PDF_load_iccprofile(const _pdfdoc: variant; const _profilename: string; const _optlist: string): integer;
function php_PDF_load_image(const _pdfdoc: variant; const _imagetype: string; const _filename: string; const _optlist: string): integer;
function php_PDF_makespotcolor(const _p: variant; const _spotname: string): integer;
function php_PDF_moveto(const _p: variant; const _x: extended; const _y: extended): boolean;
function php_PDF_new(): variant;
function php_PDF_open_ccitt(const _pdfdoc: variant; const _filename: string; const _width: integer; const _height: integer; const _BitReverse: integer; const _k: integer; const _Blackls1: integer): integer;
function php_PDF_open_file(const _p: variant; const _filename: string): boolean;
function php_PDF_open_image_file(const _p: variant; const _imagetype: string; const _filename: string; const _stringparam: string; const _intparam: integer): integer;
function php_PDF_open_image(const _p: variant; const _imagetype: string; const _source: string; const _data: string; const _length: integer; const _width: integer; const _height: integer; const _components: integer; const _bpc: integer; const _params: string): integer;
function php_PDF_open_memory_image(const _p: variant; const _image: variant): integer;
function php_PDF_open_pdi_document(const _p: variant; const _filename: string; const _optlist: string): integer;
function php_PDF_open_pdi_page(const _p: variant; const _doc: integer; const _pagenumber: integer; const _optlist: string): integer;
function php_PDF_open_pdi(const _pdfdoc: variant; const _filename: string; const _optlist: string; const _len: integer): integer;
function php_PDF_pcos_get_number(const _p: variant; const _doc: integer; const _path: string): extended;
function php_PDF_pcos_get_stream(const _p: variant; const _doc: integer; const _optlist: string; const _path: string): string;
function php_PDF_pcos_get_string(const _p: variant; const _doc: integer; const _path: string): string;
function php_PDF_place_image(const _pdfdoc: variant; const _image: integer; const _x: extended; const _y: extended; const _scale: extended): boolean;
function php_PDF_place_pdi_page(const _pdfdoc: variant; const _page: integer; const _x: extended; const _y: extended; const _sx: extended; const _sy: extended): boolean;
function php_PDF_process_pdi(const _pdfdoc: variant; const _doc: integer; const _page: integer; const _optlist: string): integer;
function php_PDF_rect(const _p: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean;
function php_PDF_restore(const _p: variant): boolean;
function php_PDF_resume_page(const _pdfdoc: variant; const _optlist: string): boolean;
function php_PDF_rotate(const _p: variant; const _phi: extended): boolean;
function php_PDF_save(const _p: variant): boolean;
function php_PDF_scale(const _p: variant; const _sx: extended; const _sy: extended): boolean;
function php_PDF_set_border_color(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean;
function php_PDF_set_border_dash(const _pdfdoc: variant; const _black: extended; const _white: extended): boolean;
function php_PDF_set_border_style(const _pdfdoc: variant; const _style: string; const _width: extended): boolean;
function php_PDF_set_gstate(const _pdfdoc: variant; const _gstate: integer): boolean;
function php_PDF_set_info(const _p: variant; const _key: string; const _value: string): boolean;
function php_PDF_set_layer_dependency(const _pdfdoc: variant; const _type: string; const _optlist: string): boolean;
function php_PDF_set_parameter(const _p: variant; const _key: string; const _value: string): boolean;
function php_PDF_set_text_pos(const _p: variant; const _x: extended; const _y: extended): boolean;
function php_PDF_set_value(const _p: variant; const _key: string; const _value: extended): boolean;
function php_PDF_setcolor(const _p: variant; const _fstype: string; const _colorspace: string; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended): boolean;
function php_PDF_setdash(const _pdfdoc: variant; const _b: extended; const _w: extended): boolean;
function php_PDF_setdashpattern(const _pdfdoc: variant; const _optlist: string): boolean;
function php_PDF_setflat(const _pdfdoc: variant; const _flatness: extended): boolean;
function php_PDF_setfont(const _pdfdoc: variant; const _font: integer; const _fontsize: extended): boolean;
function php_PDF_setgray_fill(const _p: variant; const _g: extended): boolean;
function php_PDF_setgray_stroke(const _p: variant; const _g: extended): boolean;
function php_PDF_setgray(const _p: variant; const _g: extended): boolean;
function php_PDF_setlinecap(const _p: variant; const _linecap: integer): boolean;
function php_PDF_setlinejoin(const _p: variant; const _value: integer): boolean;
function php_PDF_setlinewidth(const _p: variant; const _width: extended): boolean;
function php_PDF_setmatrix(const _p: variant; const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _e: extended; const _f: extended): boolean;
function php_PDF_setmiterlimit(const _pdfdoc: variant; const _miter: extended): boolean;
function php_PDF_setrgbcolor_fill(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean;
function php_PDF_setrgbcolor_stroke(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean;
function php_PDF_setrgbcolor(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean;
function php_PDF_shading_pattern(const _pdfdoc: variant; const _shading: integer; const _optlist: string): integer;
function php_PDF_shading(const _pdfdoc: variant; const _shtype: string; const _x0: extended; const _y0: extended; const _x1: extended; const _y1: extended; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended; const _optlist: string): integer;
function php_PDF_shfill(const _pdfdoc: variant; const _shading: integer): boolean;
function php_PDF_show_boxed(const _p: variant; const _text: string; const _left: extended; const _top: extended; const _width: extended; const _height: extended; const _mode: string; const _feature: string): integer;
function php_PDF_show_xy(const _p: variant; const _text: string; const _x: extended; const _y: extended): boolean;
function php_PDF_show(const _pdfdoc: variant; const _text: string): boolean;
function php_PDF_skew(const _p: variant; const _alpha: extended; const _beta: extended): boolean;
function php_PDF_stringwidth(const _p: variant; const _text: string; const _font: integer; const _fontsize: extended): extended;
function php_PDF_stroke(const _p: variant): boolean;
function php_PDF_suspend_page(const _pdfdoc: variant; const _optlist: string): boolean;
function php_PDF_translate(const _p: variant; const _tx: extended; const _ty: extended): boolean;
function php_PDF_utf16_to_utf8(const _pdfdoc: variant; const _utf16string: string): string;
function php_PDF_utf32_to_utf16(const _pdfdoc: variant; const _utf32string: string; const _ordering: string): string;
function php_PDF_utf8_to_utf16(const _pdfdoc: variant; const _utf8string: string; const _ordering: string): string;
function php_ps_add_bookmark(const _psdoc: variant; const _text: string; const _parent: integer; const _open: integer): integer;
function php_ps_add_launchlink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string): boolean;
function php_ps_add_locallink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _page: integer; const _dest: string): boolean;
function php_ps_add_note(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _contents: string; const _title: string; const _icon: string; const _open: integer): boolean;
function php_ps_add_pdflink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string; const _page: integer; const _dest: string): boolean;
function php_ps_add_weblink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _url: string): boolean;
function php_ps_arc(const _psdoc: variant; const _x: extended; const _y: extended; const _radius: extended; const _alpha: extended; const _beta: extended): boolean;
function php_ps_arcn(const _psdoc: variant; const _x: extended; const _y: extended; const _radius: extended; const _alpha: extended; const _beta: extended): boolean;
function php_ps_begin_page(const _psdoc: variant; const _width: extended; const _height: extended): boolean;
function php_ps_begin_pattern(const _psdoc: variant; const _width: extended; const _height: extended; const _xstep: extended; const _ystep: extended; const _painttype: integer): integer;
function php_ps_begin_template(const _psdoc: variant; const _width: extended; const _height: extended): integer;
function php_ps_circle(const _psdoc: variant; const _x: extended; const _y: extended; const _radius: extended): boolean;
function php_ps_clip(const _psdoc: variant): boolean;
procedure php_ps_close_image(const _psdoc: variant; const _imageid: integer);
function php_ps_close(const _psdoc: variant): boolean;
function php_ps_closepath_stroke(const _psdoc: variant): boolean;
function php_ps_closepath(const _psdoc: variant): boolean;
function php_ps_continue_text(const _psdoc: variant; const _text: string): boolean;
function php_ps_curveto(const _psdoc: variant; const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended): boolean;
function php_ps_delete(const _psdoc: variant): boolean;
function php_ps_end_page(const _psdoc: variant): boolean;
function php_ps_end_pattern(const _psdoc: variant): boolean;
function php_ps_end_template(const _psdoc: variant): boolean;
function php_ps_fill_stroke(const _psdoc: variant): boolean;
function php_ps_fill(const _psdoc: variant): boolean;
function php_ps_findfont(const _psdoc: variant; const _fontname: string; const _encoding: string; const _embed: boolean): integer;
function php_ps_get_buffer(const _psdoc: variant): string;
function php_ps_get_parameter(const _psdoc: variant; const _name: string; const _modifier: extended): string;
function php_ps_get_value(const _psdoc: variant; const _name: string; const _modifier: extended): extended;
function php_ps_hyphenate(const _psdoc: variant; const _text: string): variant;
function php_ps_include_file(const _psdoc: variant; const _file: string): boolean;
function php_ps_lineto(const _psdoc: variant; const _x: extended; const _y: extended): boolean;
function php_ps_makespotcolor(const _psdoc: variant; const _name: string; const _reserved: integer): integer;
function php_ps_moveto(const _psdoc: variant; const _x: extended; const _y: extended): boolean;
function php_ps_new(): variant;
function php_ps_open_file(const _psdoc: variant; const _filename: string): boolean;
function php_ps_open_image_file(const _psdoc: variant; const _type: string; const _filename: string; const _stringparam: string; const _intparam: integer): integer;
function php_ps_open_image(const _psdoc: variant; const _type: string; const _source: string; const _data: string; const _lenght: integer; const _width: integer; const _height: integer; const _components: integer; const _bpc: integer; const _params: string): integer;
function php_ps_open_memory_image(const _psdoc: variant; const _gd: integer): integer;
function php_ps_place_image(const _psdoc: variant; const _imageid: integer; const _x: extended; const _y: extended; const _scale: extended): boolean;
function php_ps_rect(const _psdoc: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean;
function php_ps_restore(const _psdoc: variant): boolean;
function php_ps_rotate(const _psdoc: variant; const _rot: extended): boolean;
function php_ps_save(const _psdoc: variant): boolean;
function php_ps_scale(const _psdoc: variant; const _x: extended; const _y: extended): boolean;
function php_ps_set_border_color(const _psdoc: variant; const _red: extended; const _green: extended; const _blue: extended): boolean;
function php_ps_set_border_dash(const _psdoc: variant; const _black: extended; const _white: extended): boolean;
function php_ps_set_border_style(const _psdoc: variant; const _style: string; const _width: extended): boolean;
function php_ps_set_info(const _p: variant; const _key: string; const _val: string): boolean;
function php_ps_set_parameter(const _psdoc: variant; const _name: string; const _value: string): boolean;
function php_ps_set_text_pos(const _psdoc: variant; const _x: extended; const _y: extended): boolean;
function php_ps_set_value(const _psdoc: variant; const _name: string; const _value: extended): boolean;
function php_ps_setcolor(const _psdoc: variant; const _type: string; const _colorspace: string; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended): boolean;
function php_ps_setdash(const _psdoc: variant; const _on: extended; const _off: extended): boolean;
function php_ps_setflat(const _psdoc: variant; const _value: extended): boolean;
function php_ps_setfont(const _psdoc: variant; const _fontid: integer; const _size: extended): boolean;
function php_ps_setgray(const _psdoc: variant; const _gray: extended): boolean;
function php_ps_setlinecap(const _psdoc: variant; const _type: integer): boolean;
function php_ps_setlinejoin(const _psdoc: variant; const _type: integer): boolean;
function php_ps_setlinewidth(const _psdoc: variant; const _width: extended): boolean;
function php_ps_setmiterlimit(const _psdoc: variant; const _value: extended): boolean;
function php_ps_setoverprintmode(const _psdoc: variant; const _mode: integer): boolean;
function php_ps_setpolydash(const _psdoc: variant; const _arr: extended): boolean;
function php_ps_shading_pattern(const _psdoc: variant; const _shadingid: integer; const _optlist: string): integer;
function php_ps_shading(const _psdoc: variant; const _type: string; const _x0: extended; const _y0: extended; const _x1: extended; const _y1: extended; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended; const _optlist: string): integer;
function php_ps_shfill(const _psdoc: variant; const _shadingid: integer): boolean;
function php_ps_show_boxed(const _psdoc: variant; const _text: string; const _left: extended; const _bottom: extended; const _width: extended; const _height: extended; const _hmode: string; const _feature: string): integer;
function php_ps_show_xy2(const _psdoc: variant; const _text: string; const _len: integer; const _xcoor: extended; const _ycoor: extended): boolean;
function php_ps_show_xy(const _psdoc: variant; const _text: string; const _x: extended; const _y: extended): boolean;
function php_ps_show2(const _psdoc: variant; const _text: string; const _len: integer): boolean;
function php_ps_show(const _psdoc: variant; const _text: string): boolean;
function php_ps_string_geometry(const _psdoc: variant; const _text: string; const _fontid: integer; const _size: extended): variant;
function php_ps_stringwidth(const _psdoc: variant; const _text: string; const _fontid: integer; const _size: extended): extended;
function php_ps_stroke(const _psdoc: variant): boolean;
function php_ps_symbol_name(const _psdoc: variant; const _ord: integer; const _fontid: integer): string;
function php_ps_symbol_width(const _psdoc: variant; const _ord: integer; const _fontid: integer; const _size: extended): extended;
function php_ps_symbol(const _psdoc: variant; const _ord: integer): boolean;
function php_ps_translate(const _psdoc: variant; const _x: extended; const _y: extended): boolean;
function php_rpm_close(const _rpmr: variant): boolean;
function php_rpm_get_tag(const _rpmr: variant; const _tagnum: integer): variant;
function php_rpm_is_valid(const _filename: string): boolean;
function php_rpm_open(const _filename: string): variant;
function php_rpm_version(): string;
function php_eio_busy(const _delay: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
procedure php_eio_cancel(const _req: variant);
function php_eio_chmod(const _path: string; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_chown(const _path: string; const _uid: integer; const _gid: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_close(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_custom(const _execute: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_dup2(const _fd: variant; const _fd2: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_event_loop(): boolean;
function php_eio_fallocate(const _fd: variant; const _mode: integer; const _offset: integer; const _length: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_fchmod(const _fd: variant; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_fchown(const _fd: variant; const _uid: integer; const _gid: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_fdatasync(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_fstat(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_fstatvfs(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_fsync(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_ftruncate(const _fd: variant; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_futime(const _fd: variant; const _atime: extended; const _mtime: extended; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_get_event_stream(): variant;
function php_eio_get_last_error(const _req: variant): string;
procedure php_eio_grp_add(const _grp: variant; const _req: variant);
procedure php_eio_grp_cancel(const _grp: variant);
procedure php_eio_grp_limit(const _grp: variant; const _limit: integer);
function php_eio_grp(const _callback: variant; const _data: string): variant;
procedure php_eio_init();
function php_eio_link(const _path: string; const _new_path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_lstat(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_mkdir(const _path: string; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_mknod(const _path: string; const _mode: integer; const _dev: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_nop(const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_npending(): integer;
function php_eio_nready(): integer;
function php_eio_nreqs(): integer;
function php_eio_nthreads(): integer;
function php_eio_open(const _path: string; const _flags: integer; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_poll(): integer;
function php_eio_read(const _fd: variant; const _length: integer; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_readahead(const _fd: variant; const _offset: integer; const _length: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_readdir(const _path: string; const _flags: integer; const _pri: integer; const _callback: variant; const _data: string): variant;
function php_eio_readlink(const _path: string; const _pri: integer; const _callback: variant; const _data: string): variant;
function php_eio_realpath(const _path: string; const _pri: integer; const _callback: variant; const _data: string): variant;
function php_eio_rename(const _path: string; const _new_path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_rmdir(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_seek(const _fd: variant; const _offset: integer; const _whence: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_sendfile(const _out_fd: variant; const _in_fd: variant; const _offset: integer; const _length: integer; const _pri: integer; const _callback: variant; const _data: string): variant;
procedure php_eio_set_max_idle(const _nthreads: integer);
procedure php_eio_set_max_parallel(const _nthreads: integer);
procedure php_eio_set_max_poll_reqs(const _nreqs: integer);
procedure php_eio_set_max_poll_time(const _nseconds: extended);
procedure php_eio_set_min_parallel(const _nthreads: string);
function php_eio_stat(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_statvfs(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_symlink(const _path: string; const _new_path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_sync_file_range(const _fd: variant; const _offset: integer; const _nbytes: integer; const _flags: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_sync(const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_syncfs(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_truncate(const _path: string; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_unlink(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_utime(const _path: string; const _atime: extended; const _mtime: extended; const _pri: integer; const _callback: variant; const _data: variant): variant;
function php_eio_write(const _fd: variant; const _str: string; const _length: integer; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant;
procedure php_callback(const _watcher: variant; const _revents: integer);
function php_backend(): integer;
function php_depth(): integer;
procedure php_embeddableBackends();
procedure php_feedSignal(const _signum: integer);
procedure php_feedSignalEvent(const _signum: integer);
function php_iteration(): integer;
procedure php_nowUpdate();
procedure php_recommendedBackends();
procedure php_resume();
procedure php_run(const _flags: integer);
procedure php_sleep(const _seconds: variant);
procedure php_stop(const _how: integer);
procedure php_supportedBackends();
procedure php_suspend();
procedure php_verify();
function php_createStopped(const _callback: string; const _data: string; const _priority: string): variant;
function php_createStopped(const _pid: integer; const _trace: boolean; const _callback: variant; const _data: variant; const _priority: integer): variant;
procedure php_set(const _pid: integer; const _trace: boolean);
procedure php_createStopped(const _other: variant; const _callback: variant; const _data: variant; const _priority: integer);
procedure php_set(const _other: variant);
procedure php_sweep();
function php_createStopped(const _callback: string; const _data: variant; const _priority: integer): variant;
procedure php_set(const _fd: variant; const _events: integer);
procedure php_invokePending();
procedure php_loopFork();
procedure php_again();
procedure php_set(const _offset: variant; const _interval: variant);
procedure php_set(const _signum: integer);
function php_attr(): variant;
procedure php_createStopped(const _path: string; const _interval: variant; const _callback: variant; const _data: variant; const _priority: integer);
procedure php_prev();
procedure php_set(const _path: string; const _interval: variant);
procedure php_feed(const _revents: integer);
procedure php_invoke(const _revents: integer);
function php_keepalive(const _value: boolean): boolean;
function php_expect_expectl(const _expect: variant; const _cases: variant; var _match: variant): integer;
function php_expect_popen(const _command: string): variant;
function php_event_add(const _event: variant; const _timeout: integer): boolean;
procedure php_event_base_free(const _event_base: variant);
function php_event_base_loop(const _event_base: variant; const _flags: integer): integer;
function php_event_base_loopbreak(const _event_base: variant): boolean;
function php_event_base_loopexit(const _event_base: variant; const _timeout: integer): boolean;
function php_event_base_new(): variant;
function php_event_base_priority_init(const _event_base: variant; const _npriorities: integer): boolean;
function php_event_base_reinit(const _event_base: variant): boolean;
function php_event_base_set(const _event: variant; const _event_base: variant): boolean;
function php_event_buffer_base_set(const _bevent: variant; const _event_base: variant): boolean;
function php_event_buffer_disable(const _bevent: variant; const _events: integer): boolean;
function php_event_buffer_enable(const _bevent: variant; const _events: integer): boolean;
procedure php_event_buffer_fd_set(const _bevent: variant; const _fd: variant);
procedure php_event_buffer_free(const _bevent: variant);
function php_event_buffer_new(const _stream: variant; const _readcb: variant; const _writecb: variant; const _errorcb: variant; const _arg: variant): variant;
function php_event_buffer_priority_set(const _bevent: variant; const _priority: integer): boolean;
function php_event_buffer_read(const _bevent: variant; const _data_size: integer): string;
function php_event_buffer_set_callback(const _event: variant; const _readcb: variant; const _writecb: variant; const _errorcb: variant; const _arg: variant): boolean;
procedure php_event_buffer_timeout_set(const _bevent: variant; const _read_timeout: integer; const _write_timeout: integer);
procedure php_event_buffer_watermark_set(const _bevent: variant; const _events: integer; const _lowmark: integer; const _highmark: integer);
function php_event_buffer_write(const _bevent: variant; const _data: string; const _data_size: integer): boolean;
function php_event_del(const _event: variant): boolean;
procedure php_event_free(const _event: variant);
function php_event_new(): variant;
function php_event_priority_set(const _event: variant; const _priority: integer): boolean;
function php_event_set(const _event: variant; const _fd: variant; const _events: integer; const _callback: variant; const _arg: variant): boolean;
function php_event_timer_set(const _event: variant; const _callback: variant; const _arg: variant): boolean;
function php_pcntl_alarm(const _seconds: integer): integer;
function php_pcntl_exec(const _path: string; const _args: variant; const _envs: variant): boolean;
function php_pcntl_fork(): integer;
function php_pcntl_get_last_error(): integer;
function php_pcntl_getpriority(const _pid: integer): integer;
function php_pcntl_setpriority(const _priority: integer; const _pid: integer): boolean;
function php_pcntl_signal_dispatch(): boolean;
function php_pcntl_signal(const _signo: integer; const _handler: variant; const _restart_syscalls: boolean): boolean;
procedure php_handler(const _signo: integer);
function php_pcntl_sigprocmask(const _how: integer; const _set: variant; var _oldset: variant): boolean;
function php_pcntl_sigtimedwait(const _set: variant; var _siginfo: variant; const _seconds: integer; const _nanoseconds: integer): integer;
function php_pcntl_sigwaitinfo(const _set: variant; var _siginfo: variant): integer;
function php_pcntl_strerror(const _errno: integer): string;
function php_pcntl_wait(var _status: integer; const _options: integer): integer;
function php_pcntl_waitpid(const _pid: integer; var _status: integer; const _options: integer): integer;
function php_pcntl_wexitstatus(const _status: integer): integer;
function php_pcntl_wifexited(const _status: integer): boolean;
function php_pcntl_wifsignaled(const _status: integer): boolean;
function php_pcntl_wifstopped(const _status: integer): boolean;
function php_pcntl_wstopsig(const _status: integer): integer;
function php_pcntl_wtermsig(const _status: integer): integer;
function php_posix_access(const _file: string; const _mode: integer): boolean;
function php_posix_ctermid(): string;
function php_posix_get_last_error(): integer;
function php_posix_getcwd(): string;
function php_posix_getegid(): integer;
function php_posix_geteuid(): integer;
function php_posix_getgid(): integer;
function php_posix_getgrgid(const _gid: integer): variant;
function php_posix_getgrnam(const _name: string): variant;
function php_posix_getgroups(): variant;
function php_posix_getlogin(): string;
function php_posix_getpgid(const _pid: integer): integer;
function php_posix_getpgrp(): integer;
function php_posix_getpid(): integer;
function php_posix_getppid(): integer;
function php_posix_getpwnam(const _username: string): variant;
function php_posix_getpwuid(const _uid: integer): variant;
function php_posix_getrlimit(): variant;
function php_posix_getsid(const _pid: integer): integer;
function php_posix_getuid(): integer;
function php_posix_initgroups(const _name: string; const _base_group_id: integer): boolean;
function php_posix_isatty(const _fd: variant): boolean;
function php_posix_kill(const _pid: integer; const _sig: integer): boolean;
function php_posix_mkfifo(const _pathname: string; const _mode: integer): boolean;
function php_posix_mknod(const _pathname: string; const _mode: integer; const _major: integer; const _minor: integer): boolean;
function php_posix_setegid(const _gid: integer): boolean;
function php_posix_seteuid(const _uid: integer): boolean;
function php_posix_setgid(const _gid: integer): boolean;
function php_posix_setpgid(const _pid: integer; const _pgid: integer): boolean;
function php_posix_setrlimit(const _resource: integer; const _softlimit: integer; const _hardlimit: integer): boolean;
function php_posix_setsid(): integer;
function php_posix_setuid(const _uid: integer): boolean;
function php_posix_strerror(const _errno: integer): string;
function php_posix_times(): variant;
function php_posix_ttyname(const _fd: variant): string;
function php_posix_uname(): variant;
function php_escapeshellarg(const _arg: string): string;
function php_escapeshellcmd(const _command: string): string;
function php_exec(const _command: string; var _output: variant; var _return_var: integer): string;
procedure php_passthru(const _command: string; var _return_var: integer);
function php_proc_close(const _process: variant): integer;
function php_proc_get_status(const _process: variant): variant;
function php_proc_nice(const _increment: integer): boolean;
function php_proc_open(const _cmd: string; const _descriptorspec: variant; var _pipes: variant; const _cwd: string; const _env: variant; const _other_options: variant): variant;
function php_proc_terminate(const _process: variant; const _signal: integer): boolean;
function php_shell_exec(const _cmd: string): string;
function php_system(const _command: string; var _return_var: integer): string;
function php_chunk(const _size: integer; const _preserve: boolean): variant;
function php_extend(const _class: string): boolean;
function php_getTerminationInfo(): variant;
function php_isTerminated(): boolean;
function php_isWaiting(): boolean;
function php_lock(): boolean;
function php_merge(const _from: variant; const _overwrite: boolean): boolean;
function php_notify(): boolean;
procedure php_run();
function php_shift(): variant;
function php_synchronized(const _block: variant): variant;
function php_unlock(): boolean;
function php_wait(const _timeout: integer): boolean;
procedure php_detach();
function php_getCreatorId(): integer;
function php_getCurrentThreadId(): integer;
function php_getThreadId(): integer;
function php_globally(): variant;
function php_isJoined(): boolean;
function php_isStarted(): boolean;
function php_join(): boolean;
procedure php_kill();
function php_start(const _options: integer): boolean;
function php_getStacked(): integer;
function php_isShutdown(): boolean;
function php_isWorking(): boolean;
function php_shutdown(): boolean;
function php_stack(var _work: variant): integer;
function php_unstack(var _work: variant): integer;
function php_isGarbage(): boolean;
procedure php_setGarbage();
procedure php_collect(const _collector: variant);
procedure php_resize(const _size: integer);
function php_submit(const _task: variant): integer;
function php_submitTo(const _worker: integer; const _task: variant): integer;
function php_create(const _lock: boolean): integer;
function php_destroy(const _mutex: integer): boolean;
function php_lock(const _mutex: integer): boolean;
function php_trylock(const _mutex: integer): boolean;
function php_unlock(const _mutex: integer; const _destroy: boolean): boolean;
function php_broadcast(const _condition: integer): boolean;
function php_create(): integer;
function php_signal(const _condition: integer): boolean;
function php_wait(const _condition: integer; const _mutex: integer; const _timeout: integer): boolean;
function php_ftok(const _pathname: string; const _proj: string): integer;
function php_msg_get_queue(const _key: integer; const _perms: integer): variant;
function php_msg_queue_exists(const _key: integer): boolean;
function php_msg_receive(const _queue: variant; const _desiredmsgtype: integer; var _msgtype: integer; const _maxsize: integer; var _message: variant; const _unserialize: boolean; const _flags: integer; var _errorcode: integer): boolean;
function php_msg_remove_queue(const _queue: variant): boolean;
function php_msg_send(const _queue: variant; const _msgtype: integer; const _message: variant; const _serialize: boolean; const _blocking: boolean; var _errorcode: integer): boolean;
function php_msg_set_queue(const _queue: variant; const _data: variant): boolean;
function php_msg_stat_queue(const _queue: variant): variant;
function php_sem_acquire(const _sem_identifier: variant; const _nowait: boolean): boolean;
function php_sem_get(const _key: integer; const _max_acquire: integer; const _perm: integer; const _auto_release: integer): variant;
function php_sem_release(const _sem_identifier: variant): boolean;
function php_sem_remove(const _sem_identifier: variant): boolean;
function php_shm_attach(const _key: integer; const _memsize: integer; const _perm: integer): variant;
function php_shm_detach(const _shm_identifier: variant): boolean;
function php_shm_get_var(const _shm_identifier: variant; const _variable_key: integer): variant;
function php_shm_has_var(const _shm_identifier: variant; const _variable_key: integer): boolean;
function php_shm_put_var(const _shm_identifier: variant; const _variable_key: integer; const _variable: variant): boolean;
function php_shm_remove_var(const _shm_identifier: variant; const _variable_key: integer): boolean;
function php_shm_remove(const _shm_identifier: variant): boolean;
procedure php_shmop_close(const _shmid: integer);
function php_shmop_delete(const _shmid: integer): boolean;
function php_shmop_open(const _key: integer; const _flags: string; const _mode: integer; const _size: integer): integer;
function php_shmop_read(const _shmid: integer; const _start: integer; const _count: integer): string;
function php_shmop_size(const _shmid: integer): integer;
function php_shmop_write(const _shmid: integer; const _data: string; const _offset: integer): integer;
function php_unlock(const _all: boolean): boolean;
function php_unlock(var _prevcount: integer): boolean;
function php_fire(): boolean;
function php_readlock(const _wait: integer): boolean;
function php_readunlock(): boolean;
function php_writelock(const _wait: integer): boolean;
function php_writeunlock(): boolean;
function php_geoip_asnum_by_name(const _hostname: string): string;
function php_geoip_continent_code_by_name(const _hostname: string): string;
function php_geoip_country_code_by_name(const _hostname: string): string;
function php_geoip_country_code3_by_name(const _hostname: string): string;
function php_geoip_country_name_by_name(const _hostname: string): string;
function php_geoip_database_info(const _database: integer): string;
function php_geoip_db_avail(const _database: integer): boolean;
function php_geoip_db_filename(const _database: integer): string;
function php_geoip_db_get_all_info(): variant;
function php_geoip_domain_by_name(const _hostname: string): string;
function php_geoip_id_by_name(const _hostname: string): integer;
function php_geoip_isp_by_name(const _hostname: string): string;
function php_geoip_netspeedcell_by_name(const _hostname: string): string;
function php_geoip_org_by_name(const _hostname: string): string;
function php_geoip_record_by_name(const _hostname: string): variant;
function php_geoip_region_by_name(const _hostname: string): variant;
function php_geoip_region_name_by_code(const _country_code: string; const _region_code: string): string;
procedure php_geoip_setup_custom_directory(const _path: string);
function php_geoip_time_zone_by_country_and_region(const _country_code: string; const _region_code: string): string;
function php_fann_cascadetrain_on_data(const _ann: variant; const _data: variant; const _max_neurons: integer; const _neurons_between_reports: integer; const _desired_error: extended): boolean;
function php_fann_cascadetrain_on_file(const _ann: variant; const _filename: string; const _max_neurons: integer; const _neurons_between_reports: integer; const _desired_error: extended): boolean;
function php_fann_clear_scaling_params(const _ann: variant): boolean;
function php_fann_copy(const _ann: variant): variant;
function php_fann_create_from_file(const _configuration_file: string): variant;
function php_fann_create_shortcut_array(const _num_layers: integer; const _layers: variant): variant;
function php_fann_create_standard_array(const _num_layers: integer; const _layers: variant): variant;
function php_fann_create_standard(const _num_layers: integer; const _num_neurons1: integer; const _num_neurons2: integer): variant;
function php_fann_create_train_from_callback(const _num_data: integer; const _num_input: integer; const _num_output: integer; const _user_function: variant): variant;
function php_fann_create_train(const _num_data: integer; const _num_input: integer; const _num_output: integer): variant;
function php_fann_descale_input(const _ann: variant; const _input_vector: variant): boolean;
function php_fann_descale_output(const _ann: variant; const _output_vector: variant): boolean;
function php_fann_descale_train(const _ann: variant; const _train_data: variant): boolean;
function php_fann_destroy_train(const _train_data: variant): boolean;
function php_fann_destroy(const _ann: variant): boolean;
function php_fann_duplicate_train_data(const _data: variant): variant;
function php_fann_get_activation_function(const _ann: variant; const _layer: integer; const _neuron: integer): integer;
function php_fann_get_activation_steepness(const _ann: variant; const _layer: integer; const _neuron: integer): extended;
function php_fann_get_bias_array(const _ann: variant): variant;
function php_fann_get_bit_fail_limit(const _ann: variant): extended;
function php_fann_get_bit_fail(const _ann: variant): integer;
function php_fann_get_cascade_activation_functions_count(const _ann: variant): integer;
function php_fann_get_cascade_activation_functions(const _ann: variant): variant;
function php_fann_get_cascade_activation_steepnesses_count(const _ann: variant): integer;
function php_fann_get_cascade_activation_steepnesses(const _ann: variant): variant;
function php_fann_get_cascade_candidate_change_fraction(const _ann: variant): extended;
function php_fann_get_cascade_candidate_limit(const _ann: variant): extended;
function php_fann_get_cascade_candidate_stagnation_epochs(const _ann: variant): extended;
function php_fann_get_cascade_max_cand_epochs(const _ann: variant): integer;
function php_fann_get_cascade_max_out_epochs(const _ann: variant): integer;
function php_fann_get_cascade_min_cand_epochs(const _ann: variant): integer;
function php_fann_get_cascade_min_out_epochs(const _ann: variant): integer;
function php_fann_get_cascade_num_candidate_groups(const _ann: variant): integer;
function php_fann_get_cascade_num_candidates(const _ann: variant): integer;
function php_fann_get_cascade_output_change_fraction(const _ann: variant): extended;
function php_fann_get_cascade_output_stagnation_epochs(const _ann: variant): integer;
function php_fann_get_cascade_weight_multiplier(const _ann: variant): extended;
function php_fann_get_connection_array(const _ann: variant): variant;
function php_fann_get_connection_rate(const _ann: variant): extended;
function php_fann_get_errno(const _errdat: variant): integer;
function php_fann_get_errstr(const _errdat: variant): string;
function php_fann_get_layer_array(const _ann: variant): variant;
function php_fann_get_learning_momentum(const _ann: variant): extended;
function php_fann_get_learning_rate(const _ann: variant): extended;
function php_fann_get_MSE(const _ann: variant): extended;
function php_fann_get_network_type(const _ann: variant): integer;
function php_fann_get_num_input(const _ann: variant): integer;
function php_fann_get_num_layers(const _ann: variant): integer;
function php_fann_get_num_output(const _ann: variant): integer;
function php_fann_get_quickprop_decay(const _ann: variant): extended;
function php_fann_get_quickprop_mu(const _ann: variant): extended;
function php_fann_get_rprop_decrease_factor(const _ann: variant): extended;
function php_fann_get_rprop_delta_max(const _ann: variant): extended;
function php_fann_get_rprop_delta_min(const _ann: variant): extended;
function php_fann_get_rprop_increase_factor(const _ann: variant): extended;
function php_fann_get_sarprop_step_error_shift(const _ann: variant): extended;
function php_fann_get_sarprop_step_error_threshold_factor(const _ann: variant): extended;
function php_fann_get_sarprop_temperature(const _ann: variant): extended;
function php_fann_get_sarprop_weight_decay_shift(const _ann: variant): extended;
function php_fann_get_total_connections(const _ann: variant): integer;
function php_fann_get_total_neurons(const _ann: variant): integer;
function php_fann_get_train_error_function(const _ann: variant): integer;
function php_fann_get_train_stop_function(const _ann: variant): integer;
function php_fann_get_training_algorithm(const _ann: variant): integer;
function php_fann_init_weights(const _ann: variant; const _train_data: variant): boolean;
function php_fann_length_train_data(const _data: variant): integer;
function php_fann_merge_train_data(const _data1: variant; const _data2: variant): variant;
function php_fann_num_input_train_data(const _data: variant): integer;
function php_fann_num_output_train_data(const _data: variant): integer;
procedure php_fann_print_error(const _errdat: string);
function php_fann_randomize_weights(const _ann: variant; const _min_weight: extended; const _max_weight: extended): boolean;
function php_fann_read_train_from_file(const _filename: string): variant;
procedure php_fann_reset_errno(const _errdat: variant);
procedure php_fann_reset_errstr(const _errdat: variant);
function php_fann_reset_MSE(const _ann: string): boolean;
function php_fann_run(const _ann: variant; const _input: variant): variant;
function php_fann_save_train(const _data: variant; const _file_name: string): boolean;
function php_fann_save(const _ann: variant; const _configuration_file: string): boolean;
function php_fann_scale_input_train_data(const _train_data: variant; const _new_min: extended; const _new_max: extended): boolean;
function php_fann_scale_input(const _ann: variant; const _input_vector: variant): boolean;
function php_fann_scale_output_train_data(const _train_data: variant; const _new_min: extended; const _new_max: extended): boolean;
function php_fann_scale_output(const _ann: variant; const _output_vector: variant): boolean;
function php_fann_scale_train_data(const _train_data: variant; const _new_min: extended; const _new_max: extended): boolean;
function php_fann_scale_train(const _ann: variant; const _train_data: variant): boolean;
function php_fann_set_activation_function_hidden(const _ann: variant; const _activation_function: integer): boolean;
function php_fann_set_activation_function_layer(const _ann: variant; const _activation_function: integer; const _layer: integer): boolean;
function php_fann_set_activation_function_output(const _ann: variant; const _activation_function: integer): boolean;
function php_fann_set_activation_function(const _ann: variant; const _activation_function: integer; const _layer: integer; const _neuron: integer): boolean;
function php_fann_set_activation_steepness_hidden(const _ann: variant; const _activation_steepness: extended): boolean;
function php_fann_set_activation_steepness_layer(const _ann: variant; const _activation_steepness: extended; const _layer: integer): boolean;
function php_fann_set_activation_steepness_output(const _ann: variant; const _activation_steepness: extended): boolean;
function php_fann_set_activation_steepness(const _ann: variant; const _activation_steepness: extended; const _layer: integer; const _neuron: integer): boolean;
function php_fann_set_bit_fail_limit(const _ann: variant; const _bit_fail_limit: extended): boolean;
function php_fann_set_callback(const _ann: variant; const _callback: variant): boolean;
function php_fann_set_cascade_activation_functions(const _ann: variant; const _cascade_activation_functions: variant): boolean;
function php_fann_set_cascade_activation_steepnesses(const _ann: variant; const _cascade_activation_steepnesses_count: variant): boolean;
function php_fann_set_cascade_candidate_change_fraction(const _ann: variant; const _cascade_candidate_change_fraction: extended): boolean;
function php_fann_set_cascade_candidate_limit(const _ann: variant; const _cascade_candidate_limit: extended): boolean;
function php_fann_set_cascade_candidate_stagnation_epochs(const _ann: variant; const _cascade_candidate_stagnation_epochs: integer): boolean;
function php_fann_set_cascade_max_cand_epochs(const _ann: variant; const _cascade_max_cand_epochs: integer): boolean;
function php_fann_set_cascade_max_out_epochs(const _ann: variant; const _cascade_max_out_epochs: integer): boolean;
function php_fann_set_cascade_min_cand_epochs(const _ann: variant; const _cascade_min_cand_epochs: integer): boolean;
function php_fann_set_cascade_min_out_epochs(const _ann: variant; const _cascade_min_out_epochs: integer): boolean;
function php_fann_set_cascade_num_candidate_groups(const _ann: variant; const _cascade_num_candidate_groups: integer): boolean;
function php_fann_set_cascade_output_change_fraction(const _ann: variant; const _cascade_output_change_fraction: extended): boolean;
function php_fann_set_cascade_output_stagnation_epochs(const _ann: variant; const _cascade_output_stagnation_epochs: integer): boolean;
function php_fann_set_cascade_weight_multiplier(const _ann: variant; const _cascade_weight_multiplier: extended): boolean;
procedure php_fann_set_error_log(const _errdat: variant; const _log_file: string);
function php_fann_set_input_scaling_params(const _ann: variant; const _train_data: variant; const _new_input_min: extended; const _new_input_max: extended): boolean;
function php_fann_set_learning_momentum(const _ann: variant; const _learning_momentum: extended): boolean;
function php_fann_set_learning_rate(const _ann: variant; const _learning_rate: extended): boolean;
function php_fann_set_output_scaling_params(const _ann: variant; const _train_data: variant; const _new_output_min: extended; const _new_output_max: extended): boolean;
function php_fann_set_quickprop_decay(const _ann: variant; const _quickprop_decay: extended): boolean;
function php_fann_set_quickprop_mu(const _ann: variant; const _quickprop_mu: extended): boolean;
function php_fann_set_rprop_decrease_factor(const _ann: variant; const _rprop_decrease_factor: extended): boolean;
function php_fann_set_rprop_delta_max(const _ann: variant; const _rprop_delta_max: extended): boolean;
function php_fann_set_rprop_delta_min(const _ann: variant; const _rprop_delta_min: extended): boolean;
function php_fann_set_rprop_delta_zero(const _ann: variant; const _rprop_delta_zero: extended): boolean;
function php_fann_set_rprop_increase_factor(const _ann: variant; const _rprop_increase_factor: extended): boolean;
function php_fann_set_sarprop_step_error_shift(const _ann: variant; const _sarprop_step_error_shift: extended): boolean;
function php_fann_set_sarprop_step_error_threshold_factor(const _ann: variant; const _sarprop_step_error_threshold_factor: extended): boolean;
function php_fann_set_sarprop_temperature(const _ann: variant; const _sarprop_temperature: extended): boolean;
function php_fann_set_sarprop_weight_decay_shift(const _ann: variant; const _sarprop_weight_decay_shift: extended): boolean;
function php_fann_set_scaling_params(const _ann: variant; const _train_data: variant; const _new_input_min: extended; const _new_input_max: extended; const _new_output_min: extended; const _new_output_max: extended): boolean;
function php_fann_set_train_error_function(const _ann: variant; const _error_function: integer): boolean;
function php_fann_set_train_stop_function(const _ann: variant; const _stop_function: integer): boolean;
function php_fann_set_training_algorithm(const _ann: variant; const _training_algorithm: integer): boolean;
function php_fann_set_weight_array(const _ann: variant; const _connections: variant): boolean;
function php_fann_set_weight(const _ann: variant; const _from_neuron: integer; const _to_neuron: integer; const _weight: extended): boolean;
function php_fann_shuffle_train_data(const _train_data: variant): boolean;
function php_fann_subset_train_data(const _data: variant; const _pos: integer; const _length: integer): variant;
function php_fann_test_data(const _ann: variant; const _data: variant): extended;
function php_fann_test(const _ann: variant; const _input: variant; const _desired_output: variant): boolean;
function php_fann_train_epoch(const _ann: variant; const _data: variant): extended;
function php_fann_train_on_data(const _ann: variant; const _data: variant; const _max_epochs: integer; const _epochs_between_reports: integer; const _desired_error: extended): boolean;
function php_fann_train_on_file(const _ann: variant; const _filename: string; const _max_epochs: integer; const _epochs_between_reports: integer; const _desired_error: extended): boolean;
function php_fann_train(const _ann: variant; const _input: variant; const _desired_output: variant): boolean;
function php_getFromNeuron(): integer;
function php_getToNeuron(): integer;
procedure php_getWeight();
function php_setWeight(const _weight: extended): boolean;
function php_jsonSerialize(): variant;
function php_json_decode(const _json: string; const _assoc: boolean; const _depth: integer; const _options: integer): variant;
function php_json_encode(const _value: variant; const _options: integer; const _depth: integer): string;
function php_json_last_error_msg(): string;
function php_json_last_error(): integer;
function php_byCount(const _nth_index: integer): integer;
function php_count(const _index_start: integer; const _index_end: integer): integer;
function php_first(const _index: variant): variant;
function php_firstEmpty(const _index: variant): integer;
procedure php_last(const _index: string);
function php_lastEmpty(const _index: integer): integer;
function php_memoryUsage(): integer;
function php_next(const _index: variant): variant;
function php_nextEmpty(const _index: integer): integer;
function php_prev(const _index: variant): variant;
function php_prevEmpty(const _index: variant): integer;
function php_judy_type(const _array: variant): integer;
function php_judy_version(): string;
function php_assign(const _name: string; const _value: string): variant;
function php_call(const _lua_func: variant; const _args: variant; const _use_self: integer): variant;
function php_eval(const _statements: string): variant;
function php_include(const _file: string): variant;
function php_registerCallback(const _name: string; const _function: variant): variant;
function php_connection_aborted(): integer;
function php_connection_status(): integer;
function php_constant(const _name: string): variant;
function php_define(const _name: string; const _value: variant; const _case_insensitive: boolean): boolean;
function php_defined(const _name: string): boolean;
procedure php_exit(const _status: string);
procedure php_exit(const _status: integer);
function php_get_browser(const _user_agent: string; const _return_array: boolean): variant;
function php_highlight_file(const _filename: string; const _return: boolean): variant;
function php_highlight_string(const _str: string; const _return: boolean): variant;
function php_ignore_user_abort(const _value: boolean): integer;
function php_pack(const _format: string; const _args: variant): string;
function php_php_check_syntax(const _filename: string; var _error_message: string): boolean;
function php_php_strip_whitespace(const _filename: string): string;
function php_sleep(const _seconds: integer): integer;
function php_sys_getloadavg(): variant;
function php_time_nanosleep(const _seconds: integer; const _nanoseconds: integer): variant;
function php_time_sleep_until(const _timestamp: extended): boolean;
function php_uniqid(const _prefix: string; const _more_entropy: boolean): string;
function php_unpack(const _format: string; const _data: string): variant;
procedure php_usleep(const _micro_seconds: integer);
function php_parsekit_compile_file(const _filename: string; var _errors: variant; const _options: integer): variant;
function php_parsekit_compile_string(const _phpcode: string; var _errors: variant; const _options: integer): variant;
function php_parsekit_func_arginfo(const _function: variant): variant;
procedure php_add(const _index: variant; const _newval: variant);
function php_bottom(): variant;
function php_getIteratorMode(): integer;
procedure php_push(const _value: variant);
procedure php_setIteratorMode(const _mode: integer);
function php_top(): variant;
procedure php_unshift(const _value: variant);
function php_dequeue(): variant;
procedure php_enqueue(const _value: variant);
function php_compare(const _value1: variant; const _value2: variant): integer;
function php_extract(): variant;
procedure php_recoverFromCorruption();
procedure php_insert(const _value: variant; const _priority: variant);
procedure php_setExtractFlags(const _flags: integer);
function php_offsetExists(const _index: integer): boolean;
function php_offsetGet(const _index: integer): variant;
procedure php_offsetSet(const _index: integer; const _newval: variant);
procedure php_offsetUnset(const _index: integer);
procedure php_addAll(const _storage: variant);
procedure php_attach(const _object: variant; const _data: variant);
function php_contains(const _object: variant): boolean;
procedure php_detach(const _object: variant);
function php_getHash(const _object: variant): string;
procedure php_removeAll(const _storage: variant);
procedure php_removeAllExcept(const _storage: variant);
procedure php_setInfo(const _data: variant);
procedure php_getArrayIterator();
procedure php_asort();
function php_getArrayCopy(): variant;
procedure php_getFlags();
procedure php_ksort();
procedure php_natcasesort();
procedure php_natsort();
procedure php_seek(const _position: integer);
procedure php_setFlags(const _flags: string);
procedure php_uasort(const _cmp_function: string);
procedure php_uksort(const _cmp_function: string);
function php_getCache(): variant;
procedure php_setFlags(const _flags: integer);
function php_accept(): string;
function php_getATime(): integer;
function php_getBasename(const _suffix: string): string;
function php_getCTime(): integer;
function php_getExtension(): string;
function php_getGroup(): integer;
function php_getInode(): integer;
function php_getMTime(): integer;
function php_getOwner(): integer;
function php_getPath(): string;
function php_getPathname(): string;
function php_getPerms(): integer;
function php_isDir(): boolean;
function php_isDot(): boolean;
function php_isExecutable(): boolean;
function php_isFile(): boolean;
function php_isLink(): boolean;
function php_isReadable(): boolean;
function php_getPosition(): integer;
procedure php_attachIterator(const _iterator: variant; const _infos: string);
function php_containsIterator(const _iterator: variant): boolean;
function php_countIterators(): integer;
procedure php_detachIterator(const _iterator: variant);
function php_hasChildren(): boolean;
function php_getChildren(): variant;
function php_getSubPath(): string;
function php_getSubPathname(): string;
function php_hasChildren(const _allow_links: boolean): boolean;
procedure php_beginChildren();
procedure php_beginIteration();
function php_callHasChildren(): boolean;
procedure php_endChildren();
procedure php_endIteration();
function php_getDepth(): integer;
function php_getMaxDepth(): variant;
procedure php_nextElement();
procedure php_setMaxDepth(const _max_depth: string);
function php_getEntry(): string;
procedure php_getPostfix();
function php_getPrefix(): string;
procedure php_setPrefixPart(const _part: integer; const _value: string);
function php_getPregFlags(): integer;
function php_getRegex(): string;
procedure php_setMode(const _mode: integer);
procedure php_setPregFlags(const _preg_flags: integer);
function php_class_implements(const _class: variant; const _autoload: boolean): variant;
function php_class_parents(const _class: variant; const _autoload: boolean): variant;
function php_class_uses(const _class: variant; const _autoload: boolean): variant;
function php_iterator_apply(const _iterator: variant; const _function: variant; const _args: variant): integer;
function php_iterator_count(const _iterator: variant): integer;
function php_iterator_to_array(const _iterator: variant; const _use_keys: boolean): variant;
procedure php_spl_autoload_call(const _class_name: string);
function php_spl_autoload_extensions(const _file_extensions: string): string;
function php_spl_autoload_functions(): variant;
function php_spl_autoload_register(const _autoload_function: variant; const _throw: boolean; const _prepend: boolean): boolean;
function php_spl_autoload_unregister(const _autoload_function: variant): boolean;
procedure php_spl_autoload(const _class_name: string; const _file_extensions: string);
function php_spl_classes(): variant;
function php_spl_object_hash(const _obj: variant): string;
function php_getLinkTarget(): string;
function php_getRealPath(): string;
procedure php_setFileClass(const _class_name: string);
procedure php_setInfoClass(const _class_name: string);
function php_fflush(): boolean;
function php_fgetc(): string;
function php_fgetcsv(const _delimiter: string; const _enclosure: string; const _escape: string): variant;
function php_fgets(): string;
function php_fgetss(const _allowable_tags: string): string;
function php_flock(const _operation: integer; var _wouldblock: integer): boolean;
function php_fpassthru(): integer;
function php_fputcsv(const _fields: variant; const _delimiter: string; const _enclosure: string; const _escape: string): integer;
function php_fread(const _length: integer): string;
function php_fscanf(const _format: string): variant;
function php_fseek(const _offset: integer; const _whence: integer): integer;
function php_fstat(): variant;
function php_ftell(): integer;
function php_ftruncate(const _size: integer): boolean;
function php_fwrite(const _str: string; const _length: integer): integer;
function php_getCsvControl(): variant;
function php_getMaxLineLen(): integer;
procedure php_setCsvControl(const _delimiter: string; const _enclosure: string; const _escape: string);
procedure php_setMaxLineLen(const _max_len: integer);
function php_exchangeArray(const _input: variant): variant;
function php_getIteratorClass(): string;
procedure php_setIteratorClass(const _iterator_class: string);
procedure php_uasort(const _cmp_function: variant);
procedure php_uksort(const _cmp_function: variant);
procedure php_update(const _subject: variant);
procedure php_attach(const _observer: variant);
function php_getConstList(const _include_default: boolean): variant;
function php_filter(const _in: variant; const _out: variant; var _consumed: integer; const _closing: boolean): integer;
procedure php_onClose();
function php_onCreate(): boolean;
function php_dir_closedir(): boolean;
function php_dir_opendir(const _path: string; const _options: integer): boolean;
function php_dir_readdir(): string;
function php_dir_rewinddir(): boolean;
function php_mkdir(const _path: string; const _mode: integer; const _options: integer): boolean;
function php_rename(const _path_from: string; const _path_to: string): boolean;
function php_rmdir(const _path: string; const _options: integer): boolean;
function php_stream_cast(const _cast_as: integer): variant;
procedure php_stream_close();
function php_stream_eof(): boolean;
function php_stream_flush(): boolean;
function php_stream_lock(const _operation: integer): boolean;
function php_stream_metadata(const _path: string; const _option: integer; const _value: variant): boolean;
function php_stream_open(const _path: string; const _mode: string; const _options: integer; var _opened_path: string): boolean;
function php_stream_read(const _count: integer): string;
function php_stream_seek(const _offset: integer; const _whence: integer): boolean;
function php_stream_set_option(const _option: integer; const _arg1: integer; const _arg2: integer): boolean;
function php_stream_stat(): variant;
function php_stream_tell(): integer;
function php_stream_truncate(const _new_size: integer): boolean;
function php_stream_write(const _data: string): integer;
function php_unlink(const _path: string): boolean;
function php_url_stat(const _path: string; const _flags: integer): variant;
procedure php_stream_bucket_append(const _brigade: variant; const _bucket: variant);
function php_stream_bucket_make_writeable(const _brigade: variant): variant;
function php_stream_bucket_new(const _stream: variant; const _buffer: string): variant;
procedure php_stream_bucket_prepend(const _brigade: variant; const _bucket: variant);
function php_stream_context_create(const _options: variant; const _params: variant): variant;
function php_stream_context_get_default(const _options: variant): variant;
function php_stream_context_get_options(const _stream_or_context: variant): variant;
function php_stream_context_get_params(const _stream_or_context: variant): variant;
function php_stream_context_set_default(const _options: variant): variant;
function php_stream_context_set_option(const _stream_or_context: variant; const _wrapper: string; const _option: string; const _value: variant): boolean;
function php_stream_context_set_option(const _stream_or_context: variant; const _options: variant): boolean;
function php_stream_context_set_params(const _stream_or_context: variant; const _params: variant): boolean;
function php_stream_copy_to_stream(const _source: variant; const _dest: variant; const _maxlength: integer; const _offset: integer): integer;
function php_stream_encoding(const _stream: variant; const _encoding: string): boolean;
function php_stream_filter_append(const _stream: variant; const _filtername: string; const _read_write: integer; const _params: variant): variant;
function php_stream_filter_prepend(const _stream: variant; const _filtername: string; const _read_write: integer; const _params: variant): variant;
function php_stream_filter_register(const _filtername: string; const _classname: string): boolean;
function php_stream_filter_remove(const _stream_filter: variant): boolean;
function php_stream_get_contents(const _handle: variant; const _maxlength: integer; const _offset: integer): string;
function php_stream_get_filters(): variant;
function php_stream_get_line(const _handle: variant; const _length: integer; const _ending: string): string;
function php_stream_get_meta_data(const _stream: variant): variant;
function php_stream_get_transports(): variant;
function php_stream_get_wrappers(): variant;
function php_stream_is_local(const _stream_or_url: variant): boolean;
procedure php_stream_notification_callback(const _notification_code: integer; const _severity: integer; const _message: string; const _message_code: integer; const _bytes_transferred: integer; const _bytes_max: integer);
function php_stream_resolve_include_path(const _filename: string): string;
function php_stream_select(var _read: variant; var _write: variant; var _except: variant; const _tv_sec: integer; const _tv_usec: integer): integer;
function php_stream_set_blocking(const _stream: variant; const _mode: boolean): boolean;
function php_stream_set_chunk_size(const _fp: variant; const _chunk_size: integer): integer;
function php_stream_set_read_buffer(const _stream: variant; const _buffer: integer): integer;
function php_stream_set_timeout(const _stream: variant; const _seconds: integer; const _microseconds: integer): boolean;
function php_stream_set_write_buffer(const _stream: variant; const _buffer: integer): integer;
function php_stream_socket_accept(const _server_socket: variant; const _timeout: extended): variant;
function php_stream_socket_client(const _remote_socket: string; var _errno: integer; var _errstr: string; const _timeout: extended): variant;
function php_stream_socket_enable_crypto(const _stream: variant; const _enable: boolean; const _crypto_type: integer; const _session_stream: variant): variant;
function php_stream_socket_get_name(const _handle: variant; const _want_peer: boolean): string;
function php_stream_socket_pair(const _domain: integer; const _type: integer; const _protocol: integer): variant;
function php_stream_socket_recvfrom(const _socket: variant; const _length: integer; const _flags: integer; var _address: string): string;
function php_stream_socket_sendto(const _socket: variant; const _data: string; const _flags: integer; const _address: string): integer;
function php_stream_socket_server(const _local_socket: string; var _errno: integer; var _errstr: string; const _flags: integer; const _context: variant): variant;
function php_stream_socket_shutdown(const _stream: variant; const _how: integer): boolean;
function php_stream_supports_lock(const _stream: variant): boolean;
function php_stream_wrapper_register(const _protocol: string; const _classname: string; const _flags: integer): boolean;
function php_stream_wrapper_restore(const _protocol: string): boolean;
function php_stream_wrapper_unregister(const _protocol: string): boolean;
function php_cleanRepair(): boolean;
function php_diagnose(): boolean;
function php_getConfig(): variant;
function php_getHtmlVer(): integer;
function php_getOpt(const _option: string): variant;
function php_getOptDoc(const _optname: string): string;
function php_getRelease(): string;
function php_getStatus(): integer;
function php_isXhtml(): boolean;
function php_isXml(): boolean;
function php_parseFile(const _filename: string; const _config: variant; const _encoding: string; const _use_include_path: boolean): boolean;
function php_parseString(const _input: string; const _config: variant; const _encoding: string): boolean;
function php_repairFile(const _filename: string; const _config: variant; const _encoding: string; const _use_include_path: boolean): string;
function php_repairString(const _data: string; const _config: variant; const _encoding: string): string;
function php_tidy_clean_repair(const _object: variant): boolean;
function php_tidy_diagnose(const _object: variant): boolean;
function php_tidy_get_error_buffer(const _tidy: variant): string;
function php_tidy_get_config(const _object: variant): variant;
function php_tidy_get_html_ver(const _object: variant): integer;
function php_tidy_getopt(const _object: variant; const _option: string): variant;
function php_tidy_get_opt_doc(const _object: variant; const _optname: string): string;
function php_tidy_get_release(): string;
function php_tidy_get_status(const _object: variant): integer;
function php_tidy_is_xhtml(const _object: variant): boolean;
function php_tidy_is_xml(const _object: variant): boolean;
function php_tidy_repair_file(const _filename: string; const _config: variant; const _encoding: string; const _use_include_path: boolean): string;
function php_tidy_repair_string(const _data: string; const _config: variant; const _encoding: string): string;
function php_hasSiblings(): boolean;
function php_isAsp(): boolean;
function php_isComment(): boolean;
function php_isHtml(): boolean;
function php_isJste(): boolean;
function php_isPhp(): boolean;
function php_isText(): boolean;
function php_ob_tidyhandler(const _input: string; const _mode: integer): string;
function php_tidy_access_count(const _object: variant): integer;
function php_tidy_config_count(const _object: variant): integer;
function php_tidy_error_count(const _object: variant): integer;
function php_tidy_get_output(const _object: variant): string;
procedure php_tidy_load_config(const _filename: string; const _encoding: string);
function php_tidy_reset_config(): boolean;
function php_tidy_save_config(const _filename: string): boolean;
function php_tidy_set_encoding(const _encoding: string): boolean;
function php_tidy_setopt(const _option: string; const _value: variant): boolean;
function php_tidy_warning_count(const _object: variant): integer;
function php_token_get_all(const _source: string; const _flags: integer): variant;
function php_token_name(const _token: integer): string;
function php_base64_decode(const _data: string; const _strict: boolean): string;
function php_base64_encode(const _data: string): string;
function php_get_headers(const _url: string; const _format: integer): variant;
function php_get_meta_tags(const _filename: string; const _use_include_path: boolean): variant;
function php_http_build_query(const _query_data: variant; const _numeric_prefix: string; const _arg_separator: string; const _enc_type: integer): string;
function php_parse_url(const _url: string; const _component: integer): variant;
function php_rawurldecode(const _str: string): string;
function php_rawurlencode(const _str: string): string;
function php_urldecode(const _str: string): string;
function php_urlencode(const _str: string): string;
function php_executeString(const _script: string; const _identifier: string; const _flags: integer): variant;
function php_getExtensions(): variant;
function php_registerExtension(const _extension_name: string; const _script: string; const _dependencies: variant): boolean;
function php_getJsFileName(): string;
function php_getJsLineNumber(): integer;
function php_getJsSourceLine(): string;
function php_getJsTrace(): string;
function php_yaml_emit_file(const _filename: string; const _data: variant; const _encoding: integer; const _linebreak: integer; const _callbacks: variant): boolean;
function php_yaml_emit(const _data: variant; const _encoding: integer; const _linebreak: integer; const _callbacks: variant): string;
function php_yaml_parse_file(const _filename: string; const _pos: integer; var _ndocs: integer; const _callbacks: variant): variant;
function php_yaml_parse_url(const _url: string; const _pos: integer; var _ndocs: integer; const _callbacks: variant): variant;
function php_yaml_parse(const _input: string; const _pos: integer; var _ndocs: integer; const _callbacks: variant): variant;
procedure php_app();
procedure php_bootstrap(const _bootstrap: variant);
procedure php_environ();
function php_getLastErrorMsg(): string;
function php_getLastErrorNo(): integer;
function php_getModules(): variant;
function php_disableView(): boolean;
function php_get(const _name: string; const _value: variant): variant;
function php_readonly(): boolean;
function php_display(const _tpl: string; const _parameters: variant): boolean;
procedure php_forward(const _action: string; const _paramters: variant);
procedure php_getInvokeArg(const _name: string);
procedure php_getInvokeArgs();
function php_getModuleName(): string;
procedure php_getViewpath();
procedure php_init();
procedure php_initView(const _options: variant);
function php_redirect(const _url: string): boolean;
function php_render(const _tpl: string; const _parameters: variant): string;
procedure php_setViewpath(const _view_directory: string);
procedure php_getScriptPath();
procedure php_setScriptPath(const _template_dir: string);
function php_assign(const _name: string; const _value: variant): boolean;
function php_assignRef(const _name: string; var _value: variant): boolean;
function php_clear(const _name: string): boolean;
function php_eval(const _tpl_content: string; const _tpl_vars: variant): string;
procedure php_autoload();
procedure php_clearLocalNamespace();
procedure php_getInstance();
procedure php_getLocalNamespace();
procedure php_import();
procedure php_isLocalName();
procedure php_registerLocalNamespace(const _prefix: variant);
procedure php_dispatchLoopShutdown(const _request: variant; const _response: variant);
procedure php_dispatchLoopStartup(const _request: variant; const _response: variant);
procedure php_postDispatch(const _request: variant; const _response: variant);
procedure php_preDispatch(const _request: variant; const _response: variant);
procedure php_preResponse(const _request: variant; const _response: variant);
procedure php_routerShutdown(const _request: variant; const _response: variant);
procedure php_routerStartup(const _request: variant; const _response: variant);
procedure php_del(const _name: string);
function php_get(const _name: string): variant;
function php_has(const _name: string): boolean;
function php_set(const _name: string; const _value: string): boolean;
procedure php_getActionName();
procedure php_getBaseUri();
procedure php_getControllerName();
procedure php_getEnv(const _name: string; const _default: string);
procedure php_getException();
procedure php_getLanguage();
procedure php_getParam(const _name: string; const _default: string);
procedure php_getParams();
procedure php_getRequestUri();
procedure php_getServer(const _name: string; const _default: string);
procedure php_isCli();
procedure php_isDispatched();
procedure php_isGet();
procedure php_isHead();
procedure php_isOptions();
procedure php_isPost();
procedure php_isPut();
procedure php_isRouted();
procedure php_isXmlHttpRequest();
procedure php_setActionName(const _action: string);
function php_setBaseUri(const _uir: string): boolean;
procedure php_setControllerName(const _controller: string);
procedure php_setDispatched();
procedure php_setModuleName(const _module: string);
procedure php_setParam(const _name: string; const _value: string);
procedure php_setRequestUri(const _uir: string);
procedure php_setRouted(const _flag: string);
function php_get(const _name: string; const _default: string): variant;
function php_getCookie(const _name: string; const _default: string): variant;
procedure php_getFiles();
function php_getPost(const _name: string; const _default: string): variant;
function php_getQuery(const _name: string; const _default: string): variant;
procedure php_getRequest();
procedure php_get();
procedure php_getCookie();
procedure php_getPost();
procedure php_getQuery();
function php_appendBody(const _content: string; const _key: string): boolean;
function php_clearBody(const _key: string): boolean;
procedure php_clearHeaders();
function php_getBody(const _key: string): variant;
procedure php_getHeader();
function php_prependBody(const _content: string; const _key: string): boolean;
procedure php_response();
procedure php_setAllHeaders();
function php_setBody(const _content: string; const _key: string): boolean;
procedure php_setHeader();
procedure php_setRedirect();
function php_assemble(const _info: variant; const _query: variant): string;
function php_route(const _request: variant): boolean;
function php_addConfig(const _config: variant): boolean;
function php_addRoute(const _name: string; const _route: variant): boolean;
function php_getCurrentRoute(): string;
function php_getRoutes(): variant;
procedure php_match(const _uri: string);
procedure php_getPrevious();
function php_is_tainted(const _string: string): boolean;
function php_taint(var _string: string): boolean;
function php_untaint(var _string: string): boolean;
function php_chdb_create(const _pathname: string; const _data: variant): boolean;
procedure php_curl_close(const _ch: variant);
function php_curl_copy_handle(const _ch: variant): variant;
function php_curl_errno(const _ch: variant): integer;
function php_curl_error(const _ch: variant): string;
function php_curl_escape(const _ch: variant; const _str: string): string;
function php_curl_exec(const _ch: variant): variant;
function php_curl_getinfo(const _ch: variant; const _opt: integer): variant;
function php_curl_init(const _url: string): variant;
function php_curl_multi_add_handle(const _mh: variant; const _ch: variant): integer;
procedure php_curl_multi_close(const _mh: variant);
function php_curl_multi_exec(const _mh: variant; var _still_running: integer): integer;
function php_curl_multi_getcontent(const _ch: variant): string;
function php_curl_multi_info_read(const _mh: variant; var _msgs_in_queue: integer): variant;
function php_curl_multi_init(): variant;
function php_curl_multi_remove_handle(const _mh: variant; const _ch: variant): integer;
function php_curl_multi_select(const _mh: variant; const _timeout: extended): integer;
function php_curl_multi_setopt(const _mh: variant; const _option: integer; const _value: variant): boolean;
function php_curl_multi_strerror(const _errornum: integer): string;
function php_curl_pause(const _ch: variant; const _bitmask: integer): integer;
procedure php_curl_reset(const _ch: variant);
function php_curl_setopt_array(const _ch: variant; const _options: variant): boolean;
function php_curl_setopt(const _ch: variant; const _option: integer; const _value: variant): boolean;
procedure php_curl_share_close(const _sh: variant);
function php_curl_share_init(): variant;
function php_curl_share_setopt(const _sh: variant; const _option: integer; const _value: string): boolean;
function php_curl_strerror(const _errornum: integer): string;
function php_curl_unescape(const _ch: variant; const _str: string): string;
function php_curl_version(const _age: integer): variant;
function php_getPostFilename(): string;
procedure php_setMimeType(const _mime: string);
procedure php_setPostFilename(const _postname: string);
procedure php_callback(const _fd: variant; const _what: integer; const _arg: variant);
procedure php_callback(const _arg: variant);
procedure php_callback(const _signum: integer; const _arg: variant);
function php_addSignal(const _timeout: variant): boolean;
function php_addTimer(const _timeout: variant): boolean;
function php_del(): boolean;
function php_delSignal(): boolean;
function php_delTimer(): boolean;
function php_getSupportedMethods(): variant;
function php_pending(const _flags: integer): boolean;
function php_set(const _base: variant; const _fd: variant; const _what: integer; const _cb: variant; const _arg: variant): boolean;
function php_setPriority(const _priority: integer): boolean;
function php_setTimer(const _base: variant; const _cb: variant; const _arg: variant): boolean;
procedure php_dispatch();
function php_exit(const _timeout: variant): boolean;
function php_getFeatures(): integer;
function php_gotExit(): boolean;
function php_gotStop(): boolean;
function php_loop(const _flags: integer): boolean;
function php_priorityInit(const _n_priorities: integer): boolean;
function php_reInit(): boolean;
function php_add(const _data: string): boolean;
function php_addBuffer(const _buf: variant): boolean;
function php_appendFrom(const _buf: variant; const _len: integer): integer;
function php_copyout(var _data: string; const _max_bytes: integer): integer;
function php_drain(const _len: integer): boolean;
procedure php_enableLocking();
function php_expand(const _len: integer): boolean;
function php_freeze(const _at_front: boolean): boolean;
function php_prepend(const _data: string): boolean;
function php_prependBuffer(const _buf: variant): boolean;
function php_pullup(const _size: integer): string;
function php_read(const _fd: variant; const _howmuch: integer): integer;
function php_readLine(const _eol_style: integer): string;
function php_search(const _what: string; const _start: integer; const _end: integer): variant;
function php_searchEol(const _start: integer; const _eol_style: integer): variant;
function php_substr(const _start: integer; const _length: integer): string;
function php_unfreeze(const _at_front: boolean): boolean;
function php_write(const _fd: variant; const _howmuch: integer): integer;
function php_connectHost(const _dns_base: variant; const _hostname: string; const _port: integer; const _family: integer): boolean;
function php_createPair(const _base: variant; const _options: integer): variant;
function php_disable(const _events: integer): boolean;
function php_enable(const _events: integer): boolean;
function php_getDnsErrorString(): string;
function php_getEnabled(): integer;
function php_readBuffer(const _buf: variant): boolean;
procedure php_setCallbacks(const _readcb: variant; const _writecb: variant; const _eventcb: variant; const _arg: string);
function php_setTimeouts(const _timeout_read: extended; const _timeout_write: extended): boolean;
procedure php_setWatermark(const _events: integer; const _lowmark: integer; const _highmark: integer);
function php_sslError(): string;
function php_sslGetCipherInfo(): string;
function php_sslGetCipherName(): string;
function php_sslGetCipherVersion(): string;
function php_sslGetProtocol(): string;
procedure php_sslRenegotiate();
function php_writeBuffer(const _buf: variant): boolean;
function php_avoidMethod(const _method: string): boolean;
function php_requireFeatures(const _feature: integer): boolean;
procedure php_setMaxDispatchInterval(const _max_interval: integer; const _max_callbacks: integer; const _min_priority: integer);
function php_addNameserverIp(const _ip: string): boolean;
procedure php_addSearch(const _domain: string);
procedure php_clearSearch();
function php_countNameservers(): integer;
function php_loadHosts(const _hosts: string): boolean;
function php_parseResolvConf(const _flags: integer; const _filename: string): boolean;
function php_setSearchNdots(const _ndots: integer): boolean;
function php_accept(const _socket: variant): boolean;
function php_addServerAlias(const _alias: string): boolean;
procedure php_bind(const _address: string; const _port: integer);
function php_removeServerAlias(const _alias: string): boolean;
procedure php_setAllowedMethods(const _methods: integer);
procedure php_setCallback(const _path: string; const _cb: string; const _arg: string);
procedure php_setDefaultCallback(const _cb: string; const _arg: string);
procedure php_setMaxBodySize(const _value: integer);
procedure php_setMaxHeadersSize(const _value: integer);
procedure php_setTimeout(const _value: integer);
procedure php_getPeer(var _address: string; var _port: integer);
function php_makeRequest(const _req: variant; const _type: integer; const _uri: string): boolean;
procedure php_setCloseCallback(const _callback: variant; const _data: variant);
procedure php_setLocalAddress(const _address: string);
procedure php_setLocalPort(const _port: integer);
procedure php_setMaxBodySize(const _max_size: string);
procedure php_setMaxHeadersSize(const _max_size: string);
procedure php_setRetries(const _retries: integer);
function php_addHeader(const _key: string; const _value: string; const _type: integer): boolean;
procedure php_cancel();
procedure php_closeConnection();
procedure php_findHeader(const _key: string; const _type: string);
procedure php_getCommand();
function php_getInputHeaders(): variant;
procedure php_getOutputHeaders();
function php_getResponseCode(): integer;
function php_getUri(): string;
procedure php_removeHeader(const _key: string; const _type: string);
procedure php_sendError(const _error: integer; const _reason: string);
procedure php_sendReply(const _code: integer; const _reason: string; const _buf: variant);
procedure php_sendReplyChunk(const _buf: variant);
procedure php_sendReplyEnd();
procedure php_sendReplyStart(const _code: integer; const _reason: string);
function php_disable(): boolean;
function php_enable(): boolean;
procedure php_getBase();
function php_getSocketName(var _address: string; var _port: variant): boolean;
procedure php_setCallback(const _cb: variant; const _arg: variant);
procedure php_setErrorCallback(const _cb: string);
procedure php_callback(const _listener: variant; const _fd: variant; const _address: variant; const _arg: variant);
function php_getLastSocketErrno(const _socket: variant): integer;
function php_getLastSocketError(const _socket: variant): string;
function php_getSocketFd(const _socket: variant): integer;
function php_getSocketName(const _socket: variant; var _address: string; var _port: variant): boolean;
function php_setSocketOption(const _socket: variant; const _level: integer; const _optname: integer; const _optval: variant): boolean;
procedure php_sslRandPoll();
function php_fam_cancel_monitor(const _fam: variant; const _fam_monitor: variant): boolean;
procedure php_fam_close(const _fam: variant);
function php_fam_monitor_collection(const _fam: variant; const _dirname: string; const _depth: integer; const _mask: string): variant;
function php_fam_monitor_directory(const _fam: variant; const _dirname: string): variant;
function php_fam_monitor_file(const _fam: variant; const _filename: string): variant;
function php_fam_next_event(const _fam: variant): variant;
function php_fam_open(const _appname: string): variant;
function php_fam_pending(const _fam: variant): integer;
function php_fam_resume_monitor(const _fam: variant; const _fam_monitor: variant): boolean;
function php_fam_suspend_monitor(const _fam: variant; const _fam_monitor: variant): boolean;
function php_ftp_alloc(const _ftp_stream: variant; const _filesize: integer; var _result: string): boolean;
function php_ftp_cdup(const _ftp_stream: variant): boolean;
function php_ftp_chdir(const _ftp_stream: variant; const _directory: string): boolean;
function php_ftp_chmod(const _ftp_stream: variant; const _mode: integer; const _filename: string): integer;
function php_ftp_close(const _ftp_stream: variant): boolean;
function php_ftp_connect(const _host: string; const _port: integer; const _timeout: integer): variant;
function php_ftp_delete(const _ftp_stream: variant; const _path: string): boolean;
function php_ftp_exec(const _ftp_stream: variant; const _command: string): boolean;
function php_ftp_fget(const _ftp_stream: variant; const _handle: variant; const _remote_file: string; const _mode: integer; const _resumepos: integer): boolean;
function php_ftp_fput(const _ftp_stream: variant; const _remote_file: string; const _handle: variant; const _mode: integer; const _startpos: integer): boolean;
function php_ftp_get_option(const _ftp_stream: variant; const _option: integer): variant;
function php_ftp_get(const _ftp_stream: variant; const _local_file: string; const _remote_file: string; const _mode: integer; const _resumepos: integer): boolean;
function php_ftp_login(const _ftp_stream: variant; const _username: string; const _password: string): boolean;
function php_ftp_mdtm(const _ftp_stream: variant; const _remote_file: string): integer;
function php_ftp_mkdir(const _ftp_stream: variant; const _directory: string): string;
function php_ftp_nb_continue(const _ftp_stream: variant): integer;
function php_ftp_nb_fget(const _ftp_stream: variant; const _handle: variant; const _remote_file: string; const _mode: integer; const _resumepos: integer): integer;
function php_ftp_nb_fput(const _ftp_stream: variant; const _remote_file: string; const _handle: variant; const _mode: integer; const _startpos: integer): integer;
function php_ftp_nb_get(const _ftp_stream: variant; const _local_file: string; const _remote_file: string; const _mode: integer; const _resumepos: integer): integer;
function php_ftp_nb_put(const _ftp_stream: variant; const _remote_file: string; const _local_file: string; const _mode: integer; const _startpos: integer): integer;
function php_ftp_nlist(const _ftp_stream: variant; const _directory: string): variant;
function php_ftp_pasv(const _ftp_stream: variant; const _pasv: boolean): boolean;
function php_ftp_put(const _ftp_stream: variant; const _remote_file: string; const _local_file: string; const _mode: integer; const _startpos: integer): boolean;
function php_ftp_pwd(const _ftp_stream: variant): string;
function php_ftp_raw(const _ftp_stream: variant; const _command: string): variant;
function php_ftp_rawlist(const _ftp_stream: variant; const _directory: string; const _recursive: boolean): variant;
function php_ftp_rename(const _ftp_stream: variant; const _oldname: string; const _newname: string): boolean;
function php_ftp_rmdir(const _ftp_stream: variant; const _directory: string): boolean;
function php_ftp_set_option(const _ftp_stream: variant; const _option: integer; const _value: variant): boolean;
function php_ftp_site(const _ftp_stream: variant; const _command: string): boolean;
function php_ftp_size(const _ftp_stream: variant; const _remote_file: string): integer;
function php_ftp_ssl_connect(const _host: string; const _port: integer; const _timeout: integer): variant;
function php_ftp_systype(const _ftp_stream: variant): string;
function php_addOptions(const _options: integer): boolean;
function php_addServer(const _host: string; const _port: integer): boolean;
function php_addServers(const _servers: string): boolean;
function php_clearCallbacks(): boolean;
function php_context(): string;
function php_data(): string;
function php_do(const _function_name: string; const _workload: string; const _unique: string): string;
function php_doBackground(const _function_name: string; const _workload: string; const _unique: string): string;
function php_doHigh(const _function_name: string; const _workload: string; const _unique: string): string;
function php_doHighBackground(const _function_name: string; const _workload: string; const _unique: string): string;
function php_doJobHandle(): string;
function php_doLow(const _function_name: string; const _workload: string; const _unique: string): string;
function php_doLowBackground(const _function_name: string; const _workload: string; const _unique: string): string;
function php_doNormal(const _function_name: string; const _workload: string; const _unique: string): string;
function php_doStatus(): variant;
function php_echo(const _workload: string): boolean;
function php_error(): string;
function php_getErrno(): integer;
function php_jobStatus(const _job_handle: string): variant;
function php_ping(const _workload: string): boolean;
function php_removeOptions(const _options: integer): boolean;
function php_returnCode(): integer;
function php_runTasks(): boolean;
procedure php_setClientCallback(const _callback: variant);
function php_setCompleteCallback(const _callback: variant): boolean;
function php_setContext(const _context: string): boolean;
function php_setCreatedCallback(const _callback: string): boolean;
function php_setData(const _data: string): boolean;
function php_setDataCallback(const _callback: variant): boolean;
function php_setExceptionCallback(const _callback: variant): boolean;
function php_setFailCallback(const _callback: variant): boolean;
function php_setOptions(const _options: integer): boolean;
function php_setStatusCallback(const _callback: variant): boolean;
function php_setWarningCallback(const _callback: variant): boolean;
function php_setWorkloadCallback(const _callback: variant): boolean;
function php_timeout(): integer;
function php_complete(const _result: string): boolean;
function php_data(const _data: string): boolean;
function php_exception(const _exception: string): boolean;
function php_fail(): boolean;
function php_functionName(): string;
function php_handle(): string;
function php_sendComplete(const _result: string): boolean;
function php_sendData(const _data: string): boolean;
function php_sendException(const _exception: string): boolean;
function php_sendFail(): boolean;
function php_sendStatus(const _numerator: integer; const _denominator: integer): boolean;
function php_sendWarning(const _warning: string): boolean;
function php_setReturn(const _gearman_return_t: integer): boolean;
function php_status(const _numerator: integer; const _denominator: integer): boolean;
function php_unique(): string;
function php_warning(const _warning: string): boolean;
function php_workload(): string;
function php_workloadSize(): integer;
function php_dataSize(): integer;
function php_function(): string;
function php_isKnown(): boolean;
function php_jobHandle(): string;
function php_recvData(const _data_len: integer): variant;
function php_sendWorkload(const _data: string): integer;
function php_taskDenominator(): integer;
function php_taskNumerator(): integer;
function php_uuid(): string;
function php_addFunction(const _function_name: string; const _function: variant; var _context: variant; const _timeout: integer): boolean;
procedure php_clone();
function php_options(): integer;
function php_register(const _function_name: string; const _timeout: integer): boolean;
function php_setId(const _id: string): boolean;
function php_unregister(const _function_name: string): boolean;
function php_unregisterAll(): boolean;
function php_wait(): boolean;
function php_work(): boolean;
function php_gopher_parsedir(const _dirent: string): variant;
function php_gupnp_context_get_host_ip(const _context: variant): string;
function php_gupnp_context_get_port(const _context: variant): integer;
function php_gupnp_context_get_subscription_timeout(const _context: variant): integer;
function php_gupnp_context_host_path(const _context: variant; const _local_path: string; const _server_path: string): boolean;
function php_gupnp_context_new(const _host_ip: string; const _port: integer): variant;
procedure php_gupnp_context_set_subscription_timeout(const _context: variant; const _timeout: integer);
function php_gupnp_context_timeout_add(const _context: variant; const _timeout: integer; const _callback: variant; const _arg: variant): boolean;
function php_gupnp_context_unhost_path(const _context: variant; const _server_path: string): boolean;
function php_gupnp_control_point_browse_start(const _cpoint: variant): boolean;
function php_gupnp_control_point_browse_stop(const _cpoint: variant): boolean;
function php_gupnp_control_point_callback_set(const _cpoint: variant; const _signal: integer; const _callback: variant; const _arg: variant): boolean;
function php_gupnp_control_point_new(const _context: variant; const _target: string): variant;
function php_gupnp_device_action_callback_set(const _root_device: variant; const _signal: integer; const _action_name: string; const _callback: variant; const _arg: variant): boolean;
function php_gupnp_device_info_get_service(const _root_device: variant; const _type: string): variant;
function php_gupnp_device_info_get(const _root_device: variant): variant;
function php_gupnp_root_device_get_available(const _root_device: variant): boolean;
function php_gupnp_root_device_get_relative_location(const _root_device: variant): string;
function php_gupnp_root_device_new(const _context: variant; const _location: string; const _description_dir: string): variant;
function php_gupnp_root_device_set_available(const _root_device: variant; const _available: boolean): boolean;
function php_gupnp_root_device_start(const _root_device: variant): boolean;
function php_gupnp_root_device_stop(const _root_device: variant): boolean;
function php_gupnp_service_action_get(const _action: variant; const _name: string; const _type: integer): variant;
function php_gupnp_service_action_return_error(const _action: variant; const _error_code: integer; const _error_description: string): boolean;
function php_gupnp_service_action_return(const _action: variant): boolean;
function php_gupnp_service_action_set(const _action: variant; const _name: string; const _type: integer; const _value: variant): boolean;
function php_gupnp_service_freeze_notify(const _service: variant): boolean;
function php_gupnp_service_info_get_introspection(const _proxy: variant; const _callback: variant; const _arg: variant): variant;
function php_gupnp_service_info_get(const _proxy: variant): variant;
function php_gupnp_service_introspection_get_state_variable(const _introspection: variant; const _variable_name: string): variant;
function php_gupnp_service_notify(const _service: variant; const _name: string; const _type: integer; const _value: variant): boolean;
function php_gupnp_service_proxy_action_get(const _proxy: variant; const _action: string; const _name: string; const _type: integer): variant;
function php_gupnp_service_proxy_action_set(const _proxy: variant; const _action: string; const _name: string; const _value: variant; const _type: integer): boolean;
function php_gupnp_service_proxy_add_notify(const _proxy: variant; const _value: string; const _type: integer; const _callback: variant; const _arg: variant): boolean;
function php_gupnp_service_proxy_callback_set(const _proxy: variant; const _signal: integer; const _callback: variant; const _arg: variant): boolean;
function php_gupnp_service_proxy_get_subscribed(const _proxy: variant): boolean;
function php_gupnp_service_proxy_remove_notify(const _proxy: variant; const _value: string): boolean;
function php_gupnp_service_proxy_send_action(const _proxy: variant; const _action: string; const _in_params: variant; const _out_params: variant): variant;
function php_gupnp_service_proxy_set_subscribed(const _proxy: variant; const _subscribed: boolean): boolean;
function php_gupnp_service_thaw_notify(const _service: variant): boolean;
function php_ldap_8859_to_t61(const _value: string): string;
function php_ldap_add(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean;
function php_ldap_bind(const _link_identifier: variant; const _bind_rdn: string; const _bind_password: string): boolean;
function php_ldap_compare(const _link_identifier: variant; const _dn: string; const _attribute: string; const _value: string): variant;
function php_ldap_connect(const _host: string; const _port: integer): variant;
function php_ldap_control_paged_result_response(const _link: variant; const _result: variant; var _cookie: string; var _estimated: integer): boolean;
function php_ldap_control_paged_result(const _link: variant; const _pagesize: integer; const _iscritical: boolean; const _cookie: string): boolean;
function php_ldap_count_entries(const _link_identifier: variant; const _result_identifier: variant): integer;
function php_ldap_delete(const _link_identifier: variant; const _dn: string): boolean;
function php_ldap_dn2ufn(const _dn: string): string;
function php_ldap_err2str(const _errno: integer): string;
function php_ldap_errno(const _link_identifier: variant): integer;
function php_ldap_error(const _link_identifier: variant): string;
function php_ldap_escape(const _value: string; const _ignore: string; const _flags: integer): string;
function php_ldap_explode_dn(const _dn: string; const _with_attrib: integer): variant;
function php_ldap_first_attribute(const _link_identifier: variant; const _result_entry_identifier: variant): string;
function php_ldap_first_entry(const _link_identifier: variant; const _result_identifier: variant): variant;
function php_ldap_first_reference(const _link: variant; const _result: variant): variant;
function php_ldap_free_result(const _result_identifier: variant): boolean;
function php_ldap_get_attributes(const _link_identifier: variant; const _result_entry_identifier: variant): variant;
function php_ldap_get_dn(const _link_identifier: variant; const _result_entry_identifier: variant): string;
function php_ldap_get_entries(const _link_identifier: variant; const _result_identifier: variant): variant;
function php_ldap_get_option(const _link_identifier: variant; const _option: integer; var _retval: variant): boolean;
function php_ldap_get_values_len(const _link_identifier: variant; const _result_entry_identifier: variant; const _attribute: string): variant;
function php_ldap_get_values(const _link_identifier: variant; const _result_entry_identifier: variant; const _attribute: string): variant;
function php_ldap_list(const _link_identifier: variant; const _base_dn: string; const _filter: string; const _attributes: variant; const _attrsonly: integer; const _sizelimit: integer; const _timelimit: integer; const _deref: integer): variant;
function php_ldap_mod_add(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean;
function php_ldap_mod_del(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean;
function php_ldap_mod_replace(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean;
function php_ldap_modify_batch(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean;
function php_ldap_modify(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean;
function php_ldap_next_attribute(const _link_identifier: variant; const _result_entry_identifier: variant): string;
function php_ldap_next_entry(const _link_identifier: variant; const _result_entry_identifier: variant): variant;
function php_ldap_next_reference(const _link: variant; const _entry: variant): variant;
function php_ldap_parse_reference(const _link: variant; const _entry: variant; var _referrals: variant): boolean;
function php_ldap_parse_result(const _link: variant; const _result: variant; var _errcode: integer; var _matcheddn: string; var _errmsg: string; var _referrals: variant): boolean;
function php_ldap_read(const _link_identifier: variant; const _base_dn: string; const _filter: string; const _attributes: variant; const _attrsonly: integer; const _sizelimit: integer; const _timelimit: integer; const _deref: integer): variant;
function php_ldap_rename(const _link_identifier: variant; const _dn: string; const _newrdn: string; const _newparent: string; const _deleteoldrdn: boolean): boolean;
function php_ldap_sasl_bind(const _link: variant; const _binddn: string; const _password: string; const _sasl_mech: string; const _sasl_realm: string; const _sasl_authc_id: string; const _sasl_authz_id: string; const _props: string): boolean;
function php_ldap_search(const _link_identifier: variant; const _base_dn: string; const _filter: string; const _attributes: variant; const _attrsonly: integer; const _sizelimit: integer; const _timelimit: integer; const _deref: integer): variant;
function php_ldap_set_option(const _link_identifier: variant; const _option: integer; const _newval: variant): boolean;
function php_ldap_set_rebind_proc(const _link: variant; const _callback: variant): boolean;
function php_ldap_sort(const _link: variant; const _result: variant; const _sortfilter: string): boolean;
function php_ldap_start_tls(const _link: variant): boolean;
function php_ldap_t61_to_8859(const _value: string): string;
function php_ldap_unbind(const _link_identifier: variant): boolean;
function php_add(const _key: string; const _var: variant; const _flag: integer; const _expire: integer): boolean;
function php_addServer(const _host: string; const _port: integer; const _persistent: boolean; const _weight: integer; const _timeout: integer; const _retry_interval: integer; const _status: boolean; const _failure_callback: variant; const _timeoutms: integer): boolean;
function php_connect(const _host: string; const _port: integer; const _timeout: integer): boolean;
function php_decrement(const _key: string; const _value: integer): integer;
function php_delete(const _key: string; const _timeout: integer): boolean;
function php_getExtendedStats(const _type: string; const _slabid: integer; const _limit: integer): variant;
function php_getServerStatus(const _host: string; const _port: integer): integer;
function php_getStats(const _type: string; const _slabid: integer; const _limit: integer): variant;
function php_increment(const _key: string; const _value: integer): integer;
function php_pconnect(const _host: string; const _port: integer; const _timeout: integer): variant;
function php_replace(const _key: string; const _var: variant; const _flag: integer; const _expire: integer): boolean;
function php_set(const _key: string; const _var: variant; const _flag: integer; const _expire: integer): boolean;
function php_setCompressThreshold(const _threshold: integer; const _min_savings: extended): boolean;
function php_setServerParams(const _host: string; const _port: integer; const _timeout: integer; const _retry_interval: integer; const _status: boolean; const _failure_callback: variant): boolean;
function php_memcache_debug(const _on_off: boolean): boolean;
function php_addByKey(const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean;
function php_addServer(const _host: string; const _port: integer; const _weight: integer): boolean;
function php_addServers(const _servers: variant): boolean;
function php_append(const _key: string; const _value: string): boolean;
function php_appendByKey(const _server_key: string; const _key: string; const _value: string): boolean;
function php_cas(const _cas_token: extended; const _key: string; const _value: variant; const _expiration: integer): boolean;
function php_casByKey(const _cas_token: extended; const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean;
function php_decrement(const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer;
function php_decrementByKey(const _server_key: string; const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer;
function php_deleteByKey(const _server_key: string; const _key: string; const _time: integer): boolean;
function php_deleteMulti(const _keys: variant; const _time: integer): boolean;
function php_deleteMultiByKey(const _server_key: string; const _keys: variant; const _time: integer): boolean;
function php_fetchAll(): variant;
function php_get(const _key: string; const _cache_cb: variant; var _cas_token: extended): variant;
function php_getAllKeys(): variant;
function php_getByKey(const _server_key: string; const _key: string; const _cache_cb: variant; var _cas_token: extended): variant;
function php_getDelayed(const _keys: variant; const _with_cas: boolean; const _value_cb: variant): boolean;
function php_getDelayedByKey(const _server_key: string; const _keys: variant; const _with_cas: boolean; const _value_cb: variant): boolean;
function php_getMulti(const _keys: variant; var _cas_tokens: variant; const _flags: integer): variant;
function php_getMultiByKey(const _server_key: string; const _keys: variant; var _cas_tokens: string; const _flags: integer): variant;
function php_getOption(const _option: integer): variant;
function php_getResultCode(): integer;
function php_getResultMessage(): string;
function php_getServerByKey(const _server_key: string): variant;
function php_getServerList(): variant;
function php_getStats(): variant;
function php_increment(const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer;
function php_incrementByKey(const _server_key: string; const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer;
function php_isPersistent(): boolean;
function php_isPristine(): boolean;
function php_prepend(const _key: string; const _value: string): boolean;
function php_prependByKey(const _server_key: string; const _key: string; const _value: string): boolean;
function php_quit(): boolean;
function php_replace(const _key: string; const _value: variant; const _expiration: integer): boolean;
function php_replaceByKey(const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean;
function php_resetServerList(): boolean;
function php_set(const _key: string; const _value: variant; const _expiration: integer): boolean;
function php_setByKey(const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean;
function php_setMulti(const _items: variant; const _expiration: integer): boolean;
function php_setMultiByKey(const _server_key: string; const _items: variant; const _expiration: integer): boolean;
function php_setOption(const _option: integer; const _value: variant): boolean;
function php_setOptions(const _options: variant): boolean;
procedure php_setSaslAuthData(const _username: string; const _password: string);
function php_touchByKey(const _server_key: string; const _key: string; const _expiration: integer): boolean;
procedure php_mqseries_back(const _hconn: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_begin(const _hconn: variant; const _beginOptions: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_close(const _hconn: variant; const _hobj: variant; const _options: integer; var _compCode: variant; var _reason: variant);
procedure php_mqseries_cmit(const _hconn: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_conn(const _qManagerName: string; var _hconn: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_connx(const _qManagerName: string; var _connOptions: variant; var _hconn: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_disc(const _hconn: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_get(const _hConn: variant; const _hObj: variant; var _md: variant; var _gmo: variant; var _bufferLength: integer; var _msg: string; var _data_length: integer; var _compCode: variant; var _reason: variant);
procedure php_mqseries_inq(const _hconn: variant; const _hobj: variant; const _selectorCount: integer; const _selectors: variant; const _intAttrCount: integer; var _intAttr: variant; const _charAttrLength: integer; var _charAttr: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_open(const _hconn: variant; var _objDesc: variant; const _option: integer; var _hobj: variant; var _compCode: variant; var _reason: variant);
procedure php_mqseries_put1(const _hconn: variant; var _objDesc: variant; var _msgDesc: variant; var _pmo: variant; const _buffer: string; var _compCode: variant; var _reason: variant);
procedure php_mqseries_put(const _hConn: variant; const _hObj: variant; var _md: variant; var _pmo: variant; const _message: string; var _compCode: variant; var _reason: variant);
procedure php_mqseries_set(const _hconn: variant; const _hobj: variant; const _selectorcount: integer; const _selectors: variant; const _intattrcount: integer; const _intattrs: variant; const _charattrlength: integer; const _charattrs: variant; var _compCode: variant; var _reason: variant);
function php_mqseries_strerror(const _reason: integer): string;
function php_checkdnsrr(const _host: string; const _type: string): boolean;
function php_closelog(): boolean;
procedure php_define_syslog_variables();
function php_dns_get_record(const _hostname: string; const _type: integer; var _authns: variant; var _addtl: variant; var _raw: boolean): variant;
function php_fsockopen(const _hostname: string; const _port: integer; var _errno: integer; var _errstr: string; const _timeout: extended): variant;
function php_gethostbyaddr(const _ip_address: string): string;
function php_gethostbyname(const _hostname: string): string;
function php_gethostbynamel(const _hostname: string): variant;
function php_getmxrr(const _hostname: string; var _mxhosts: variant; var _weight: variant): boolean;
function php_getprotobyname(const _name: string): integer;
function php_getprotobynumber(const _number: integer): string;
function php_getservbyname(const _service: string; const _protocol: string): integer;
function php_getservbyport(const _port: integer; const _protocol: string): string;
function php_header_register_callback(const _callback: variant): boolean;
procedure php_header_remove(const _name: string);
procedure php_header(const _string: string; const _replace: boolean; const _http_response_code: integer);
function php_headers_list(): variant;
function php_headers_sent(var _file: string; var _line: integer): boolean;
function php_http_response_code(const _response_code: integer): variant;
function php_inet_ntop(const _in_addr: string): string;
function php_inet_pton(const _address: string): string;
function php_ip2long(const _ip_address: string): integer;
function php_long2ip(const _proper_address: string): string;
function php_openlog(const _ident: string; const _option: integer; const _facility: integer): boolean;
function php_pfsockopen(const _hostname: string; const _port: integer; var _errno: integer; var _errstr: string; const _timeout: extended): variant;
function php_setcookie(const _name: string; const _value: string; const _expire: integer; const _path: string; const _domain: string; const _secure: boolean; const _httponly: boolean): boolean;
function php_setrawcookie(const _name: string; const _value: string; const _expire: integer; const _path: string; const _domain: string; const _secure: boolean; const _httponly: boolean): boolean;
function php_syslog(const _priority: integer; const _message: string): boolean;
function php_rrd_create(const _filename: string; const _options: variant): boolean;
function php_rrd_error(): string;
function php_rrd_fetch(const _filename: string; const _options: variant): variant;
function php_rrd_first(const _file: string; const _raaindex: integer): integer;
function php_rrd_graph(const _filename: string; const _options: variant): variant;
function php_rrd_info(const _filename: string): variant;
function php_rrd_last(const _filename: string): integer;
function php_rrd_lastupdate(const _filename: string): variant;
function php_rrd_restore(const _xml_file: string; const _rrd_file: string; const _options: variant): boolean;
function php_rrd_tune(const _filename: string; const _options: variant): boolean;
function php_rrd_update(const _filename: string; const _options: variant): boolean;
function php_rrd_version(): string;
function php_rrd_xport(const _options: variant): variant;
procedure php_rrdc_disconnect();
procedure php_addArchive(const _description: string);
procedure php_addDataSource(const _description: string);
function php_saveVerbose(): variant;
function php_update(const _values: variant; const _time: string): boolean;
function php_snmp_get_quick_print(): boolean;
function php_snmp_get_valueretrieval(): integer;
function php_snmp_read_mib(const _filename: string): boolean;
function php_snmp_set_enum_print(const _enum_print: integer): boolean;
procedure php_snmp_set_oid_numeric_print(const _oid_format: integer);
function php_snmp_set_oid_output_format(const _oid_format: integer): boolean;
function php_snmp_set_quick_print(const _quick_print: boolean): boolean;
function php_snmp_set_valueretrieval(const _method: integer): boolean;
function php_snmp2_get(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): string;
function php_snmp2_getnext(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): string;
function php_snmp2_real_walk(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): variant;
function php_snmp2_set(const _host: string; const _community: string; const _object_id: string; const _type: string; const _value: string; const _timeout: string; const _retries: string): boolean;
function php_snmp2_walk(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): variant;
function php_snmp3_get(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): string;
function php_snmp3_getnext(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): string;
function php_snmp3_real_walk(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): variant;
function php_snmp3_set(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _type: string; const _value: string; const _timeout: integer; const _retries: integer): boolean;
function php_snmp3_walk(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): variant;
function php_snmpget(const _hostname: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): string;
function php_snmpgetnext(const _host: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): string;
function php_snmprealwalk(const _host: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): variant;
function php_snmpset(const _host: string; const _community: string; const _object_id: string; const _type: string; const _value: variant; const _timeout: integer; const _retries: integer): boolean;
function php_snmpwalk(const _hostname: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): variant;
function php_snmpwalkoid(const _hostname: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): variant;
function php_get(const _object_id: variant; const _preserve_keys: boolean): variant;
function php_getError(): string;
function php_getnext(const _object_id: variant): variant;
function php_set(const _object_id: variant; const _type: variant; const _value: variant): boolean;
function php_setSecurity(const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _contextName: string; const _contextEngineID: string): boolean;
function php_walk(const _object_id: string; const _suffix_as_key: boolean; const _max_repetitions: integer; const _non_repeaters: integer): variant;
function php_socket_accept(const _socket: variant): variant;
function php_socket_bind(const _socket: variant; const _address: string; const _port: integer): boolean;
procedure php_socket_clear_error(const _socket: variant);
procedure php_socket_close(const _socket: variant);
function php_socket_cmsg_space(const _level: integer; const _type: integer): integer;
function php_socket_connect(const _socket: variant; const _address: string; const _port: integer): boolean;
function php_socket_create_listen(const _port: integer; const _backlog: integer): variant;
function php_socket_create_pair(const _domain: integer; const _type: integer; const _protocol: integer; var _fd: variant): boolean;
function php_socket_create(const _domain: integer; const _type: integer; const _protocol: integer): variant;
function php_socket_get_option(const _socket: variant; const _level: integer; const _optname: integer): variant;
function php_socket_getpeername(const _socket: variant; var _address: string; var _port: integer): boolean;
function php_socket_getsockname(const _socket: variant; var _addr: string; var _port: integer): boolean;
function php_socket_import_stream(const _stream: variant): variant;
function php_socket_last_error(const _socket: variant): integer;
function php_socket_listen(const _socket: variant; const _backlog: integer): boolean;
function php_socket_read(const _socket: variant; const _length: integer; const _type: integer): string;
function php_socket_recv(const _socket: variant; var _buf: string; const _len: integer; const _flags: integer): integer;
function php_socket_recvfrom(const _socket: variant; var _buf: string; const _len: integer; const _flags: integer; var _name: string; var _port: integer): integer;
function php_socket_recvmsg(const _socket: variant; const _message: string; const _flags: integer): integer;
function php_socket_select(var _read: variant; var _write: variant; var _except: variant; const _tv_sec: integer; const _tv_usec: integer): integer;
function php_socket_send(const _socket: variant; const _buf: string; const _len: integer; const _flags: integer): integer;
function php_socket_sendmsg(const _socket: variant; const _message: variant; const _flags: integer): integer;
function php_socket_sendto(const _socket: variant; const _buf: string; const _len: integer; const _flags: integer; const _addr: string; const _port: integer): integer;
function php_socket_set_block(const _socket: variant): boolean;
function php_socket_set_nonblock(const _socket: variant): boolean;
function php_socket_set_option(const _socket: variant; const _level: integer; const _optname: integer; const _optval: variant): boolean;
function php_socket_shutdown(const _socket: variant; const _how: integer): boolean;
function php_socket_strerror(const _errno: integer): string;
function php_socket_write(const _socket: variant; const _buffer: string; const _length: integer): integer;
function php_ssh2_auth_agent(const _session: variant; const _username: string): boolean;
function php_ssh2_auth_hostbased_file(const _session: variant; const _username: string; const _hostname: string; const _pubkeyfile: string; const _privkeyfile: string; const _passphrase: string; const _local_username: string): boolean;
function php_ssh2_auth_none(const _session: variant; const _username: string): variant;
function php_ssh2_auth_password(const _session: variant; const _username: string; const _password: string): boolean;
function php_ssh2_auth_pubkey_file(const _session: variant; const _username: string; const _pubkeyfile: string; const _privkeyfile: string; const _passphrase: string): boolean;
function php_ssh2_connect(const _host: string; const _port: integer; const _methods: variant; const _callbacks: variant): variant;
function php_ssh2_exec(const _session: variant; const _command: string; const _pty: string; const _env: variant; const _width: integer; const _height: integer; const _width_height_type: integer): variant;
function php_ssh2_fetch_stream(const _channel: variant; const _streamid: integer): variant;
function php_ssh2_fingerprint(const _session: variant; const _flags: integer): string;
function php_ssh2_methods_negotiated(const _session: variant): variant;
function php_ssh2_publickey_add(const _pkey: variant; const _algoname: string; const _blob: string; const _overwrite: boolean; const _attributes: variant): boolean;
function php_ssh2_publickey_init(const _session: variant): variant;
function php_ssh2_publickey_list(const _pkey: variant): variant;
function php_ssh2_publickey_remove(const _pkey: variant; const _algoname: string; const _blob: string): boolean;
function php_ssh2_scp_recv(const _session: variant; const _remote_file: string; const _local_file: string): boolean;
function php_ssh2_scp_send(const _session: variant; const _local_file: string; const _remote_file: string; const _create_mode: integer): boolean;
function php_ssh2_sftp_chmod(const _sftp: variant; const _filename: string; const _mode: integer): boolean;
function php_ssh2_sftp_lstat(const _sftp: variant; const _path: string): variant;
function php_ssh2_sftp_mkdir(const _sftp: variant; const _dirname: string; const _mode: integer; const _recursive: boolean): boolean;
function php_ssh2_sftp_readlink(const _sftp: variant; const _link: string): string;
function php_ssh2_sftp_realpath(const _sftp: variant; const _filename: string): string;
function php_ssh2_sftp_rename(const _sftp: variant; const _from: string; const _to: string): boolean;
function php_ssh2_sftp_rmdir(const _sftp: variant; const _dirname: string): boolean;
function php_ssh2_sftp_stat(const _sftp: variant; const _path: string): variant;
function php_ssh2_sftp_symlink(const _sftp: variant; const _target: string; const _link: string): boolean;
function php_ssh2_sftp_unlink(const _sftp: variant; const _filename: string): boolean;
function php_ssh2_sftp(const _session: variant): variant;
function php_ssh2_shell(const _session: variant; const _term_type: string; const _env: variant; const _width: integer; const _height: integer; const _width_height_type: integer): variant;
function php_ssh2_tunnel(const _session: variant; const _host: string; const _port: integer): variant;
function php_stomp_connect_error(): string;
function php_stomp_version(): string;
function php_abort(const _transaction_id: string; const _headers: variant): boolean;
function php_ack(const _msg: variant; const _headers: variant): boolean;
function php_begin(const _transaction_id: string; const _headers: variant): boolean;
function php_commit(const _transaction_id: string; const _headers: variant): boolean;
function php_getReadTimeout(): variant;
function php_getSessionId(): string;
function php_hasFrame(): boolean;
function php_send(const _destination: string; const _msg: variant; const _headers: variant): boolean;
procedure php_setReadTimeout(const _seconds: integer; const _microseconds: integer);
function php_subscribe(const _destination: string; const _headers: variant): boolean;
function php_unsubscribe(const _destination: string; const _headers: variant): boolean;
function php_stomp_abort(const _link: variant; const _transaction_id: string; const _headers: variant): boolean;
function php_stomp_ack(const _link: variant; const _msg: variant; const _headers: variant): boolean;
function php_stomp_begin(const _link: variant; const _transaction_id: string; const _headers: variant): boolean;
function php_stomp_commit(const _link: variant; const _transaction_id: string; const _headers: variant): boolean;
function php_stomp_connect(const _broker: string): variant;
function php_stomp_close(const _link: variant): boolean;
function php_stomp_error(const _link: variant): string;
function php_stomp_get_read_timeout(const _link: variant): variant;
function php_stomp_get_session_id(const _link: variant): string;
function php_stomp_has_frame(const _link: variant): boolean;
function php_stomp_read_frame(const _link: variant): variant;
function php_stomp_send(const _link: variant; const _destination: string; const _msg: variant; const _headers: variant): boolean;
procedure php_stomp_set_read_timeout(const _link: variant; const _seconds: integer; const _microseconds: integer);
function php_stomp_subscribe(const _link: variant; const _destination: string; const _headers: variant): boolean;
function php_stomp_unsubscribe(const _link: variant; const _destination: string; const _headers: variant): boolean;
function php_getDetails(): string;
function php_getOptions(): variant;
function php_checkProbabilityModel(): boolean;
function php_getLabels(): variant;
function php_getNrClass(): integer;
function php_getSvmType(): integer;
function php_getSvrProbability(): extended;
function php_load(const _filename: string): boolean;
function php_predict_probability(const _data: variant): extended;
function php_predict(const _data: variant): extended;
function php_svn_add(const _path: string; const _recursive: boolean; const _force: boolean): boolean;
function php_svn_auth_get_parameter(const _key: string): string;
procedure php_svn_auth_set_parameter(const _key: string; const _value: string);
function php_svn_blame(const _repository_url: string; const _revision_no: integer): variant;
function php_svn_cat(const _repos_url: string; const _revision_no: integer): string;
function php_svn_checkout(const _repos: string; const _targetpath: string; const _revision: integer; const _flags: integer): boolean;
function php_svn_cleanup(const _workingdir: string): boolean;
function php_svn_client_version(): string;
function php_svn_commit(const _log: string; const _targets: variant; const _recursive: boolean): variant;
function php_svn_delete(const _path: string; const _force: boolean): boolean;
function php_svn_diff(const _path1: string; const _rev1: integer; const _path2: string; const _rev2: integer): variant;
function php_svn_export(const _frompath: string; const _topath: string; const _working_copy: boolean; const _revision_no: integer): boolean;
function php_svn_fs_abort_txn(const _txn: variant): boolean;
function php_svn_fs_apply_text(const _root: variant; const _path: string): variant;
function php_svn_fs_begin_txn2(const _repos: variant; const _rev: integer): variant;
function php_svn_fs_change_node_prop(const _root: variant; const _path: string; const _name: string; const _value: string): boolean;
function php_svn_fs_check_path(const _fsroot: variant; const _path: string): integer;
function php_svn_fs_contents_changed(const _root1: variant; const _path1: string; const _root2: variant; const _path2: string): boolean;
function php_svn_fs_copy(const _from_root: variant; const _from_path: string; const _to_root: variant; const _to_path: string): boolean;
function php_svn_fs_delete(const _root: variant; const _path: string): boolean;
function php_svn_fs_dir_entries(const _fsroot: variant; const _path: string): variant;
function php_svn_fs_file_contents(const _fsroot: variant; const _path: string): variant;
function php_svn_fs_file_length(const _fsroot: variant; const _path: string): integer;
function php_svn_fs_is_dir(const _root: variant; const _path: string): boolean;
function php_svn_fs_is_file(const _root: variant; const _path: string): boolean;
function php_svn_fs_make_dir(const _root: variant; const _path: string): boolean;
function php_svn_fs_make_file(const _root: variant; const _path: string): boolean;
function php_svn_fs_node_created_rev(const _fsroot: variant; const _path: string): integer;
function php_svn_fs_node_prop(const _fsroot: variant; const _path: string; const _propname: string): string;
function php_svn_fs_props_changed(const _root1: variant; const _path1: string; const _root2: variant; const _path2: string): boolean;
function php_svn_fs_revision_prop(const _fs: variant; const _revnum: integer; const _propname: string): string;
function php_svn_fs_revision_root(const _fs: variant; const _revnum: integer): variant;
function php_svn_fs_txn_root(const _txn: variant): variant;
function php_svn_fs_youngest_rev(const _fs: variant): integer;
function php_svn_import(const _path: string; const _url: string; const _nonrecursive: boolean): boolean;
function php_svn_log(const _repos_url: string; const _start_revision: integer; const _end_revision: integer; const _limit: integer; const _flags: integer): variant;
function php_svn_ls(const _repos_url: string; const _revision_no: integer; const _recurse: boolean; const _peg: boolean): variant;
function php_svn_mkdir(const _path: string; const _log_message: string): boolean;
function php_svn_repos_create(const _path: string; const _config: variant; const _fsconfig: variant): variant;
function php_svn_repos_fs_begin_txn_for_commit(const _repos: variant; const _rev: integer; const _author: string; const _log_msg: string): variant;
function php_svn_repos_fs_commit_txn(const _txn: variant): integer;
function php_svn_repos_fs(const _repos: variant): variant;
function php_svn_repos_hotcopy(const _repospath: string; const _destpath: string; const _cleanlogs: boolean): boolean;
function php_svn_repos_open(const _path: string): variant;
function php_svn_repos_recover(const _path: string): boolean;
function php_svn_revert(const _path: string; const _recursive: boolean): boolean;
function php_svn_status(const _path: string; const _flags: integer): variant;
function php_svn_update(const _path: string; const _revno: integer; const _recurse: boolean): integer;
function php_tcpwrap_check(const _daemon: string; const _address: string; const _user: string; const _nodns: boolean): boolean;
function php_auth(): boolean;
function php_ban(const _vcl_regex: string): integer;
function php_banUrl(const _vcl_regex: string): integer;
function php_clearPanic(): integer;
function php_disconnect(): boolean;
function php_getPanic(): string;
procedure php_setCompat(const _compat: integer);
procedure php_setHost(const _host: string);
procedure php_setIdent(const _ident: string);
function php_setParam(const _name: string; const _value: variant): integer;
procedure php_setPort(const _port: integer);
procedure php_setSecret(const _secret: string);
function php_getSnapshot(): variant;
function php_getTagName(const _index: integer): string;
function php_yaz_addinfo(const _id: variant): string;
procedure php_yaz_ccl_conf(const _id: variant; const _config: variant);
function php_yaz_ccl_parse(const _id: variant; const _query: string; var _result: variant): boolean;
function php_yaz_close(const _id: variant): boolean;
function php_yaz_connect(const _zurl: string; const _options: variant): variant;
function php_yaz_database(const _id: variant; const _databases: string): boolean;
function php_yaz_element(const _id: variant; const _elementset: string): boolean;
function php_yaz_errno(const _id: variant): integer;
function php_yaz_error(const _id: variant): string;
function php_yaz_es_result(const _id: variant): variant;
procedure php_yaz_es(const _id: variant; const _type: string; const _args: variant);
function php_yaz_get_option(const _id: variant; const _name: string): string;
function php_yaz_hits(const _id: variant; var _searchresult: variant): integer;
procedure php_yaz_itemorder(const _id: variant; const _args: variant);
function php_yaz_present(const _id: variant): boolean;
procedure php_yaz_range(const _id: variant; const _start: integer; const _number: integer);
function php_yaz_record(const _id: variant; const _pos: integer; const _type: string): string;
function php_yaz_scan_result(const _id: variant; var _result: variant): variant;
procedure php_yaz_scan(const _id: variant; const _type: string; const _startterm: string; const _flags: variant);
procedure php_yaz_schema(const _id: variant; const _schema: string);
function php_yaz_search(const _id: variant; const _type: string; const _query: string): boolean;
procedure php_yaz_set_option(const _id: variant; const _name: string; const _value: string);
procedure php_yaz_set_option(const _id: variant; const _options: variant);
procedure php_yaz_sort(const _id: variant; const _criteria: string);
procedure php_yaz_syntax(const _id: variant; const _syntax: string);
function php_yaz_wait(var _options: variant): variant;
procedure php_yp_all(const _domain: string; const _map: string; const _callback: string);
function php_yp_cat(const _domain: string; const _map: string): variant;
function php_yp_err_string(const _errorcode: integer): string;
function php_yp_errno(): integer;
function php_yp_first(const _domain: string; const _map: string): variant;
function php_yp_get_default_domain(): string;
function php_yp_master(const _domain: string; const _map: string): string;
function php_yp_match(const _domain: string; const _map: string; const _key: string): string;
function php_yp_next(const _domain: string; const _map: string; const _key: string): variant;
function php_yp_order(const _domain: string; const _map: string): integer;
function php_getEndpoints(): variant;
function php_getPersistentId(): string;
function php_getSocketType(): integer;
function php_getSockOpt(const _key: string): variant;
function php_recv(const _mode: integer): string;
function php_recvMulti(const _mode: integer): string;
function php_add(const _entry: variant; const _type: integer): string;
function php_poll(var _readable: variant; var _writable: variant; const _timeout: integer): integer;
function php_udm_add_search_limit(const _agent: variant; const _var: integer; const _val: string): boolean;
function php_udm_alloc_agent_array(const _databases: variant): variant;
function php_udm_alloc_agent(const _dbaddr: string; const _dbmode: string): variant;
function php_udm_api_version(): integer;
function php_udm_cat_list(const _agent: variant; const _category: string): variant;
function php_udm_cat_path(const _agent: variant; const _category: string): variant;
function php_udm_check_charset(const _agent: variant; const _charset: string): boolean;
function php_udm_clear_search_limits(const _agent: variant): boolean;
function php_udm_crc32(const _agent: variant; const _str: string): integer;
function php_udm_errno(const _agent: variant): integer;
function php_udm_error(const _agent: variant): string;
function php_udm_find(const _agent: variant; const _query: string): variant;
function php_udm_free_agent(const _agent: variant): integer;
function php_udm_free_ispell_data(const _agent: integer): boolean;
function php_udm_free_res(const _res: variant): boolean;
function php_udm_get_doc_count(const _agent: variant): integer;
function php_udm_get_res_field(const _res: variant; const _row: integer; const _field: integer): string;
function php_udm_get_res_param(const _res: variant; const _param: integer): string;
function php_udm_hash32(const _agent: variant; const _str: string): integer;
function php_udm_load_ispell_data(const _agent: variant; const _var: integer; const _val1: string; const _val2: string; const _flag: integer): boolean;
function php_udm_set_agent_param(const _agent: variant; const _var: integer; const _val: string): boolean;
function php_solr_get_version(): string;
function php_escapeQueryChars(const _str: string): string;
function php_getSolrVersion(): string;
function php_queryPhrase(const _str: string): string;
function php_addField(const _fieldName: string; const _fieldValue: string; const _fieldBoostValue: extended): boolean;
function php_deleteField(const _fieldName: string): boolean;
function php_fieldExists(const _fieldName: string): boolean;
function php_getBoost(): extended;
function php_getFieldBoost(const _fieldName: string): extended;
function php_getFieldCount(): integer;
function php_getFieldNames(): variant;
function php_setBoost(const _documentBoostValue: extended): boolean;
function php_setFieldBoost(const _fieldName: string; const _fieldBoostValue: extended): boolean;
function php_sort(const _sortOrderBy: integer; const _sortDirection: integer): boolean;
function php_addField(const _fieldName: string; const _fieldValue: string): boolean;
function php_getPropertyNames(): variant;
procedure php_addDocuments(const _docs: variant; const _overwrite: boolean; const _commitWithin: integer);
function php_getDebug(): string;
procedure php_setResponseWriter(const _responseWriter: string);
function php_setServlet(const _type: integer; const _value: string): boolean;
procedure php_system();
procedure php_threads();
function php_getDigestedResponse(): string;
function php_getHttpStatus(): integer;
function php_getHttpStatusMessage(): string;
function php_getRawRequest(): string;
function php_getRawRequestHeaders(): string;
function php_getRawResponse(): string;
function php_getRawResponseHeaders(): string;
function php_getRequestUrl(): string;
function php_setParseMode(const _parser_mode: integer): boolean;
function php_success(): boolean;
function php_getResponse(): string;
function php_getParam(const _param_name: string): variant;
function php_getPreparedParams(): variant;
function php_toString(const _url_encode: boolean): string;
function php_getExpand(): boolean;
function php_getExpandFilterQueries(): variant;
function php_getExpandQuery(): variant;
function php_getExpandRows(): integer;
function php_getExpandSortFields(): variant;
function php_getFacet(): boolean;
function php_getFacetDateEnd(const _field_override: string): string;
function php_getFacetDateFields(): variant;
function php_getFacetDateGap(const _field_override: string): string;
function php_getFacetDateHardEnd(const _field_override: string): string;
function php_getFacetDateOther(const _field_override: string): variant;
function php_getFacetDateStart(const _field_override: string): string;
function php_getFacetFields(): variant;
function php_getFacetLimit(const _field_override: string): integer;
function php_getFacetMethod(const _field_override: string): string;
function php_getFacetMinCount(const _field_override: string): integer;
function php_getFacetMissing(const _field_override: string): boolean;
function php_getFacetOffset(const _field_override: string): integer;
function php_getFacetPrefix(const _field_override: string): string;
function php_getFacetQueries(): variant;
function php_getFacetSort(const _field_override: string): integer;
function php_getFields(): variant;
function php_getFilterQueries(): variant;
function php_getGroupCachePercent(): integer;
function php_getGroupFacet(): boolean;
function php_getGroupFields(): variant;
function php_getGroupFormat(): string;
function php_getGroupFunctions(): variant;
function php_getGroupLimit(): integer;
function php_getGroupMain(): boolean;
function php_getGroupNGroups(): boolean;
function php_getGroupOffset(): integer;
function php_getGroupQueries(): variant;
function php_getGroupSortFields(): variant;
function php_getGroupTruncate(): boolean;
function php_getHighlight(): boolean;
function php_getHighlightAlternateField(const _field_override: string): string;
function php_getHighlightFields(): variant;
function php_getHighlightFormatter(const _field_override: string): string;
function php_getHighlightFragmenter(const _field_override: string): string;
function php_getHighlightFragsize(const _field_override: string): integer;
function php_getHighlightHighlightMultiTerm(): boolean;
function php_getHighlightMaxAlternateFieldLength(const _field_override: string): integer;
function php_getHighlightMaxAnalyzedChars(): integer;
function php_getHighlightMergeContiguous(const _field_override: string): boolean;
function php_getHighlightRegexMaxAnalyzedChars(): integer;
function php_getHighlightRegexPattern(): string;
function php_getHighlightRegexSlop(): extended;
function php_getHighlightRequireFieldMatch(): boolean;
function php_getHighlightSimplePost(const _field_override: string): string;
function php_getHighlightSimplePre(const _field_override: string): string;
function php_getHighlightSnippets(const _field_override: string): integer;
function php_getHighlightUsePhraseHighlighter(): boolean;
function php_getMlt(): boolean;
function php_getMltBoost(): boolean;
function php_getMltCount(): integer;
function php_getMltFields(): variant;
function php_getMltMaxNumQueryTerms(): integer;
function php_getMltMaxNumTokens(): integer;
function php_getMltMaxWordLength(): integer;
function php_getMltMinDocFrequency(): integer;
function php_getMltMinTermFrequency(): integer;
function php_getMltMinWordLength(): integer;
function php_getMltQueryFields(): variant;
function php_getRows(): integer;
function php_getSortFields(): variant;
function php_getStart(): integer;
function php_getStatsFacets(): variant;
function php_getStatsFields(): variant;
function php_getTerms(): boolean;
function php_getTermsField(): string;
function php_getTermsIncludeLowerBound(): boolean;
function php_getTermsIncludeUpperBound(): boolean;
function php_getTermsLimit(): integer;
function php_getTermsLowerBound(): string;
function php_getTermsMaxCount(): integer;
function php_getTermsMinCount(): integer;
function php_getTermsPrefix(): string;
function php_getTermsReturnRaw(): boolean;
function php_getTermsSort(): integer;
function php_getTermsUpperBound(): string;
function php_getTimeAllowed(): integer;
function php_getField(): string;
function php_getHint(): string;
function php_getMax(): string;
function php_getMin(): string;
function php_getNullPolicy(): string;
function php_getInternalInfo(): variant;
function php_addQuery(const _query: string; const _index: string; const _comment: string): integer;
function php_buildExcerpts(const _docs: variant; const _index: string; const _words: string; const _opts: variant): variant;
function php_buildKeywords(const _query: string; const _index: string; const _hits: boolean): variant;
function php_getLastError(): string;
function php_getLastWarning(): string;
function php_open(): boolean;
function php_query(const _query: string; const _index: string; const _comment: string): variant;
procedure php_resetFilters();
procedure php_resetGroupBy();
function php_runQueries(): variant;
function php_setArrayResult(const _array_result: boolean): boolean;
function php_setConnectTimeout(const _timeout: extended): boolean;
function php_setFieldWeights(const _weights: variant): boolean;
function php_setFilter(const _attribute: string; const _values: variant; const _exclude: boolean): boolean;
function php_setFilterFloatRange(const _attribute: string; const _min: extended; const _max: extended; const _exclude: boolean): boolean;
function php_setFilterRange(const _attribute: string; const _min: integer; const _max: integer; const _exclude: boolean): boolean;
function php_setGeoAnchor(const _attrlat: string; const _attrlong: string; const _latitude: extended; const _longitude: extended): boolean;
function php_setGroupBy(const _attribute: string; const _func: integer; const _groupsort: string): boolean;
function php_setGroupDistinct(const _attribute: string): boolean;
function php_setIDRange(const _min: integer; const _max: integer): boolean;
function php_setIndexWeights(const _weights: variant): boolean;
function php_setLimits(const _offset: integer; const _limit: integer; const _max_matches: integer; const _cutoff: integer): boolean;
function php_setMatchMode(const _mode: integer): boolean;
function php_setMaxQueryTime(const _qtime: integer): boolean;
function php_setOverride(const _attribute: string; const _type: integer; const _values: variant): boolean;
function php_setRankingMode(const _ranker: integer): boolean;
function php_setRetries(const _count: integer; const _delay: integer): boolean;
function php_setSelect(const _clause: string): boolean;
function php_setServer(const _server: string; const _port: integer): boolean;
function php_setSortMode(const _mode: integer; const _sortby: string): boolean;
function php_updateAttributes(const _index: string; const _attributes: variant; const _values: variant; const _mva: boolean): integer;
function php_apache_child_terminate(): boolean;
function php_apache_get_modules(): variant;
function php_apache_get_version(): string;
function php_apache_getenv(const _variable: string; const _walk_to_top: boolean): string;
function php_apache_lookup_uri(const _filename: string): variant;
function php_apache_note(const _note_name: string; const _note_value: string): string;
function php_apache_request_headers(): variant;
function php_apache_reset_timeout(): boolean;
function php_apache_response_headers(): variant;
function php_apache_setenv(const _variable: string; const _value: string; const _walk_to_top: boolean): boolean;
function php_getallheaders(): variant;
function php_virtual(const _filename: string): boolean;
function php_fastcgi_finish_request(): boolean;
function php_iis_add_server(const _path: string; const _comment: string; const _server_ip: string; const _port: integer; const _host_name: string; const _rights: integer; const _start_server: integer): integer;
function php_iis_get_dir_security(const _server_instance: integer; const _virtual_path: string): integer;
function php_iis_get_script_map(const _server_instance: integer; const _virtual_path: string; const _script_extension: string): string;
function php_iis_get_server_by_comment(const _comment: string): integer;
function php_iis_get_server_by_path(const _path: string): integer;
function php_iis_get_server_rights(const _server_instance: integer; const _virtual_path: string): integer;
function php_iis_get_service_state(const _service_id: string): integer;
function php_iis_remove_server(const _server_instance: integer): integer;
function php_iis_set_app_settings(const _server_instance: integer; const _virtual_path: string; const _application_scope: string): integer;
function php_iis_set_dir_security(const _server_instance: integer; const _virtual_path: string; const _directory_flags: integer): integer;
function php_iis_set_script_map(const _server_instance: integer; const _virtual_path: string; const _script_extension: string; const _engine_path: string; const _allow_scripting: integer): integer;
function php_iis_set_server_rights(const _server_instance: integer; const _virtual_path: string; const _directory_flags: integer): integer;
function php_iis_start_server(const _server_instance: integer): integer;
function php_iis_start_service(const _service_id: string): integer;
function php_iis_stop_server(const _server_instance: integer): integer;
function php_iis_stop_service(const _service_id: string): integer;
function php_nsapi_request_headers(): variant;
function php_nsapi_response_headers(): variant;
function php_nsapi_virtual(const _uri: string): boolean;
function php_msession_connect(const _host: string; const _port: string): boolean;
function php_msession_count(): integer;
function php_msession_create(const _session: string; const _classname: string; const _data: string): boolean;
function php_msession_destroy(const _name: string): boolean;
procedure php_msession_disconnect();
function php_msession_find(const _name: string; const _value: string): variant;
function php_msession_get_array(const _session: string): variant;
function php_msession_get_data(const _session: string): string;
function php_msession_get(const _session: string; const _name: string; const _value: string): string;
function php_msession_inc(const _session: string; const _name: string): string;
function php_msession_list(): variant;
function php_msession_listvar(const _name: string): variant;
function php_msession_lock(const _name: string): integer;
function php_msession_plugin(const _session: string; const _val: string; const _param: string): string;
function php_msession_randstr(const _param: integer): string;
procedure php_msession_set_array(const _session: string; const _tuples: variant);
function php_msession_set_data(const _session: string; const _value: string): boolean;
function php_msession_set(const _session: string; const _name: string; const _value: string): boolean;
function php_msession_timeout(const _session: string; const _param: integer): integer;
function php_msession_uniq(const _param: integer; const _classname: string; const _data: string): string;
function php_msession_unlock(const _session: string; const _key: integer): integer;
procedure php_session_abort();
function php_session_cache_expire(const _new_cache_expire: string): integer;
function php_session_cache_limiter(const _cache_limiter: string): string;
function php_session_decode(const _data: string): boolean;
function php_session_destroy(): boolean;
function php_session_encode(): string;
function php_session_get_cookie_params(): variant;
function php_session_id(const _id: string): string;
function php_session_is_registered(const _name: string): boolean;
function php_session_module_name(const _module: string): string;
function php_session_name(const _name: string): string;
function php_session_regenerate_id(const _delete_old_session: boolean): boolean;
procedure php_session_register_shutdown();
function php_session_register(const _name: variant): boolean;
procedure php_session_reset();
function php_session_save_path(const _path: string): string;
procedure php_session_set_cookie_params(const _lifetime: integer; const _path: string; const _domain: string; const _secure: boolean; const _httponly: boolean);
function php_session_set_save_handler(const _open: variant; const _close: variant; const _read: variant; const _write: variant; const _destroy: variant; const _gc: variant; const _create_sid: variant): boolean;
function php_session_set_save_handler(const _sessionhandler: variant; const _register_shutdown: boolean): boolean;
function php_session_start(const _options: variant): boolean;
function php_session_status(): integer;
function php_session_unregister(const _name: string): boolean;
procedure php_session_unset();
procedure php_session_write_close();
function php_create_sid(): string;
function php_destroy(const _session_id: string): boolean;
function php_gc(const _maxlifetime: integer): boolean;
function php_open(const _save_path: string; const _session_name: string): boolean;
function php_read(const _session_id: string): string;
function php_write(const _session_id: string; const _session_data: string): boolean;
function php_session_pgsql_add_error(const _error_level: integer; const _error_message: string): boolean;
function php_session_pgsql_get_error(const _with_error_message: boolean): variant;
function php_session_pgsql_get_field(): string;
function php_session_pgsql_reset(): boolean;
function php_session_pgsql_set_field(const _value: string): boolean;
function php_session_pgsql_status(): variant;
function php_bbcode_add_element(const _bbcode_container: variant; const _tag_name: string; const _tag_rules: variant): boolean;
function php_bbcode_add_smiley(const _bbcode_container: variant; const _smiley: string; const _replace_by: string): boolean;
function php_bbcode_create(const _bbcode_initial_tags: variant): variant;
function php_bbcode_destroy(const _bbcode_container: variant): boolean;
function php_bbcode_parse(const _bbcode_container: variant; const _to_parse: string): string;
function php_bbcode_set_arg_parser(const _bbcode_container: variant; const _bbcode_arg_parser: variant): boolean;
function php_bbcode_set_flags(const _bbcode_container: variant; const _flags: integer; const _mode: integer): boolean;
function php_preg_filter(const _pattern: variant; const _replacement: variant; const _subject: variant; const _limit: integer; var _count: integer): variant;
function php_preg_grep(const _pattern: string; const _input: variant; const _flags: integer): variant;
function php_preg_last_error(): integer;
function php_preg_match_all(const _pattern: string; const _subject: string; var _matches: variant; const _flags: integer; const _offset: integer): integer;
function php_preg_match(const _pattern: string; const _subject: string; var _matches: variant; const _flags: integer; const _offset: integer): integer;
function php_preg_quote(const _str: string; const _delimiter: string): string;
function php_preg_replace_callback_array(const _patterns_and_callbacks: variant; const _subject: variant; const _limit: integer; var _count: integer): variant;
function php_preg_replace_callback(const _pattern: variant; const _callback: variant; const _subject: variant; const _limit: integer; var _count: integer): variant;
function php_preg_replace(const _pattern: variant; const _replacement: variant; const _subject: variant; const _limit: integer; var _count: integer): variant;
function php_preg_split(const _pattern: string; const _subject: string; const _limit: integer; const _flags: integer): variant;
function php_ereg_replace(const _pattern: string; const _replacement: string; const _string: string): string;
function php_ereg(const _pattern: string; const _string: string; var _regs: variant): integer;
function php_eregi_replace(const _pattern: string; const _replacement: string; const _string: string): string;
function php_eregi(const _pattern: string; const _string: string; var _regs: variant): integer;
function php_split(const _pattern: string; const _string: string; const _limit: integer): variant;
function php_spliti(const _pattern: string; const _string: string; const _limit: integer): variant;
function php_sql_regcase(const _string: string): string;
function php_ssdeep_fuzzy_compare(const _signature1: string; const _signature2: string): integer;
function php_ssdeep_fuzzy_hash_filename(const _file_name: string): string;
function php_ssdeep_fuzzy_hash(const _to_hash: string): string;
function php_HTML_SPECIALCHARS(): integer;
function php_addcslashes(const _str: string; const _charlist: string): string;
function php_addslashes(const _str: string): string;
function php_bin2hex(const _str: string): string;
function php_chr(const _ascii: integer): string;
function php_chunk_split(const _body: string; const _chunklen: integer; const _end: string): string;
function php_convert_cyr_string(const _str: string; const _from: string; const _to: string): string;
function php_convert_uudecode(const _data: string): string;
function php_convert_uuencode(const _data: string): string;
function php_count_chars(const _string: string; const _mode: integer): variant;
function php_crc32(const _str: string): integer;
function php_crypt(const _str: string; const _salt: string): string;
function php_explode(const _delimiter: string; const _string: string; const _limit: integer): variant;
function php_fprintf(const _handle: variant; const _format: string; const _args: variant): integer;
function php_get_html_translation_table(const _table: integer; const _flags: integer; const _encoding: string): variant;
function php_hebrev(const _hebrew_text: string; const _max_chars_per_line: integer): string;
function php_hebrevc(const _hebrew_text: string; const _max_chars_per_line: integer): string;
function php_hex2bin(const _data: string): string;
function php_html_entity_decode(const _string: string; const _flags: integer; const _encoding: string): string;
function php_htmlentities(const _string: string; const _flags: integer; const _encoding: string): string;
function php_htmlspecialchars_decode(const _string: string; const _flags: integer): string;
function php_htmlspecialchars(const _string: string; const _flags: integer; const _encoding: string): string;
function php_implode(const _glue: string; const _pieces: variant): string;
function php_implode(const _pieces: variant): string;
function php_lcfirst(const _str: string): string;
function php_levenshtein(const _str1: string; const _str2: string): integer;
function php_levenshtein(const _str1: string; const _str2: string; const _cost_ins: integer; const _cost_rep: integer; const _cost_del: integer): integer;
function php_localeconv(): variant;
function php_ltrim(const _str: string; const _character_mask: string): string;
function php_md5_file(const _filename: string; const _raw_output: boolean): string;
function php_md5(const _str: string; const _raw_output: boolean): string;
function php_metaphone(const _str: string; const _phonemes: integer): string;
function php_money_format(const _format: string; const _number: extended): string;
function php_nl_langinfo(const _item: integer): string;
function php_nl2br(const _string: string; const _is_xhtml: boolean): string;
function php_number_format(const _number: extended; const _decimals: integer): string;
function php_number_format(const _number: extended; const _decimals: integer; const _dec_point: string; const _thousands_sep: string): string;
function php_ord(const _string: string): integer;
procedure php_parse_str(const _str: string; var _arr: variant);
function php_print(const _arg: string): integer;
function php_printf(const _format: string; const _args: variant): integer;
function php_quoted_printable_decode(const _str: string): string;
function php_quoted_printable_encode(const _str: string): string;
function php_quotemeta(const _str: string): string;
function php_rtrim(const _str: string; const _character_mask: string): string;
function php_setlocale(const _category: integer; const _locale: string): string;
function php_setlocale(const _category: integer; const _locale: variant): string;
function php_sha1_file(const _filename: string; const _raw_output: boolean): string;
function php_sha1(const _str: string; const _raw_output: boolean): string;
function php_similar_text(const _first: string; const _second: string; var _percent: extended): integer;
function php_soundex(const _str: string): string;
function php_sprintf(const _format: string; const _args: variant): string;
function php_sscanf(const _str: string; const _format: string): variant;
function php_str_getcsv(const _input: string; const _delimiter: string; const _enclosure: string; const _escape: string): variant;
function php_str_ireplace(const _search: variant; const _replace: variant; const _subject: variant; var _count: integer): variant;
function php_str_pad(const _input: string; const _pad_length: integer; const _pad_string: string; const _pad_type: integer): string;
function php_str_repeat(const _input: string; const _multiplier: integer): string;
function php_str_replace(const _search: variant; const _replace: variant; const _subject: variant; var _count: integer): variant;
function php_str_rot13(const _str: string): string;
function php_str_shuffle(const _str: string): string;
function php_str_split(const _string: string; const _split_length: integer): variant;
function php_str_word_count(const _string: string; const _format: integer; const _charlist: string): variant;
function php_strcasecmp(const _str1: string; const _str2: string): integer;
function php_strcmp(const _str1: string; const _str2: string): integer;
function php_strcoll(const _str1: string; const _str2: string): integer;
function php_strcspn(const _subject: string; const _mask: string; const _start: integer; const _length: integer): integer;
function php_strip_tags(const _str: string; const _allowable_tags: string): string;
function php_stripcslashes(const _str: string): string;
function php_stripos(const _haystack: string; const _needle: string; const _offset: integer): variant;
function php_stripslashes(const _str: string): string;
function php_stristr(const _haystack: string; const _needle: variant; const _before_needle: boolean): string;
function php_strlen(const _string: string): integer;
function php_strnatcasecmp(const _str1: string; const _str2: string): integer;
function php_strnatcmp(const _str1: string; const _str2: string): integer;
function php_strncasecmp(const _str1: string; const _str2: string; const _len: integer): integer;
function php_strncmp(const _str1: string; const _str2: string; const _len: integer): integer;
function php_strpbrk(const _haystack: string; const _char_list: string): string;
function php_strpos(const _haystack: string; const _needle: variant; const _offset: integer): variant;
function php_strrchr(const _haystack: string; const _needle: variant): string;
function php_strrev(const _string: string): string;
function php_strripos(const _haystack: string; const _needle: string; const _offset: integer): integer;
function php_strrpos(const _haystack: string; const _needle: string; const _offset: integer): integer;
function php_strspn(const _subject: string; const _mask: string; const _start: integer; const _length: integer): integer;
function php_strstr(const _haystack: string; const _needle: variant; const _before_needle: boolean): string;
function php_strtok(const _str: string; const _token: string): string;
function php_strtok(const _token: string): string;
function php_strtolower(const _string: string): string;
function php_strtoupper(const _string: string): string;
function php_strtr(const _str: string; const _from: string; const _to: string): string;
function php_strtr(const _str: string; const _replace_pairs: variant): string;
function php_substr_compare(const _main_str: string; const _str: string; const _offset: integer; const _length: integer; const _case_insensitivity: boolean): integer;
function php_substr_count(const _haystack: string; const _needle: string; const _offset: integer; const _length: integer): integer;
function php_substr_replace(const _string: variant; const _replacement: variant; const _start: variant; const _length: variant): variant;
function php_substr(const _string: string; const _start: integer; const _length: integer): string;
function php_trim(const _str: string; const _character_mask: string): string;
function php_ucfirst(const _str: string): string;
function php_ucwords(const _str: string; const _delimiters: string): string;
function php_vfprintf(const _handle: variant; const _format: string; const _args: variant): integer;
function php_vprintf(const _format: string; const _args: variant): integer;
function php_vsprintf(const _format: string; const _args: variant): string;
function php_wordwrap(const _str: string; const _width: integer; const _break: string; const _cut: boolean): string;
function php_array_change_key_case(const _array: variant; const _case: integer): variant;
function php_array_chunk(const _array: variant; const _size: integer; const _preserve_keys: boolean): variant;
function php_array_column(const _input: variant; const _column_key: variant; const _index_key: variant): variant;
function php_array_combine(const _keys: variant; const _values: variant): variant;
function php_array_count_values(const _array: variant): variant;
function php_array_diff_assoc(const _array1: variant; const _array2: variant): variant;
function php_array_diff_key(const _array1: variant; const _array2: variant): variant;
function php_array_diff_uassoc(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant;
function php_array_diff_ukey(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant;
function php_array_diff(const _array1: variant; const _array2: variant): variant;
function php_array_fill_keys(const _keys: variant; const _value: variant): variant;
function php_array_fill(const _start_index: integer; const _num: integer; const _value: variant): variant;
function php_array_filter(const _array: variant; const _callback: variant; const _flag: integer): variant;
function php_array_flip(const _array: variant): variant;
function php_array_intersect_assoc(const _array1: variant; const _array2: variant): variant;
function php_array_intersect_key(const _array1: variant; const _array2: variant): variant;
function php_array_intersect_uassoc(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant;
function php_array_intersect_ukey(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant;
function php_array_intersect(const _array1: variant; const _array2: variant): variant;
function php_array_key_exists(const _key: variant; const _array: variant): boolean;
function php_array_keys(const _array: variant; const _search_value: variant; const _strict: boolean): variant;
function php_array_map(const _callback: variant; const _array1: variant): variant;
function php_array_merge_recursive(const _array1: variant): variant;
function php_array_merge(const _array1: variant): variant;
function php_array_multisort(var _array1: variant; const _array1_sort_order: variant; const _array1_sort_flags: variant): boolean;
function php_array_pad(const _array: variant; const _size: integer; const _value: variant): variant;
function php_array_pop(var _array: variant): variant;
function php_array_product(const _array: variant): variant;
function php_array_push(var _array: variant; const _value1: variant): integer;
function php_array_rand(const _array: variant; const _num: integer): variant;
function php_array_reduce(const _array: variant; const _callback: variant; const _initial: variant): variant;
function php_array_replace_recursive(const _array1: variant; const _array2: variant): variant;
function php_array_replace(const _array1: variant; const _array2: variant): variant;
function php_array_reverse(const _array: variant; const _preserve_keys: boolean): variant;
function php_array_search(const _needle: variant; const _haystack: variant; const _strict: boolean): variant;
function php_array_shift(var _array: variant): variant;
function php_array_slice(const _array: variant; const _offset: integer; const _length: integer; const _preserve_keys: boolean): variant;
function php_array_splice(var _input: variant; const _offset: integer; const _length: integer; const _replacement: variant): variant;
function php_array_sum(const _array: variant): variant;
function php_array_udiff_assoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant;
function php_array_udiff_uassoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant; const _key_compare_func: variant): variant;
function php_array_udiff(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant;
function php_array_uintersect_assoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant;
function php_array_uintersect_uassoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant; const _key_compare_func: variant): variant;
function php_array_uintersect(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant;
function php_array_unique(const _array: variant; const _sort_flags: integer): variant;
function php_array_unshift(var _array: variant; const _value1: variant): integer;
function php_array_values(const _array: variant): variant;
function php_array_walk_recursive(var _array: variant; const _callback: variant; const _userdata: variant): boolean;
function php_array_walk(var _array: variant; const _callback: variant; const _userdata: variant): boolean;
function php_array(): variant;
function php_arsort(var _array: variant; const _sort_flags: integer): boolean;
function php_compact(const _varname1: variant): variant;
function php_count(const _array_or_countable: variant; const _mode: integer): integer;
function php_current(var _array: variant): variant;
function php_each(var _array: variant): variant;
function php_end(var _array: variant): variant;
function php_extract(var _array: variant; const _flags: integer; const _prefix: string): integer;
function php_in_array(const _needle: variant; const _haystack: variant; const _strict: boolean): boolean;
function php_key(var _array: variant): variant;
function php_krsort(var _array: variant; const _sort_flags: integer): boolean;
function php_ksort(var _array: variant; const _sort_flags: integer): boolean;
function php_list(const _var1: variant): variant;
function php_natcasesort(var _array: variant): boolean;
function php_natsort(var _array: variant): boolean;
function php_range(const _start: variant; const _end: variant; const _step: variant): variant;
function php_reset(var _array: variant): variant;
function php_rsort(var _array: variant; const _sort_flags: integer): boolean;
function php_shuffle(var _array: variant): boolean;
function php_uasort(var _array: variant; const _value_compare_func: variant): boolean;
function php_uksort(var _array: variant; const _key_compare_func: variant): boolean;
function php_usort(var _array: variant; const _value_compare_func: variant): boolean;
function php_call_user_method_array(const _method_name: string; var _obj: variant; const _params: variant): variant;
function php_call_user_method(const _method_name: string; var _obj: variant; const _parameter: variant): variant;
function php_class_alias(const _original: string; const _alias: string; const _autoload: boolean): boolean;
function php_class_exists(const _class_name: string; const _autoload: boolean): boolean;
function php_get_called_class(): string;
function php_get_class_methods(const _class_name: variant): variant;
function php_get_class_vars(const _class_name: string): variant;
function php_get_class(const _object: variant): string;
function php_get_declared_classes(): variant;
function php_get_declared_interfaces(): variant;
function php_get_declared_traits(): variant;
function php_get_object_vars(const _object: variant): variant;
function php_get_parent_class(const _object: variant): string;
function php_interface_exists(const _interface_name: string; const _autoload: boolean): boolean;
function php_is_a(const _object: variant; const _class_name: string; const _allow_string: boolean): boolean;
function php_is_subclass_of(const _object: variant; const _class_name: string; const _allow_string: boolean): boolean;
function php_method_exists(const _object: variant; const _method_name: string): boolean;
function php_property_exists(const _class: variant; const _property: string): boolean;
function php_trait_exists(const _traitname: string; const _autoload: boolean): boolean;
function php_classkit_import(const _filename: string): variant;
function php_classkit_method_add(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean;
function php_classkit_method_copy(const _dClass: string; const _dMethod: string; const _sClass: string; const _sMethod: string): boolean;
function php_classkit_method_redefine(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean;
function php_classkit_method_remove(const _classname: string; const _methodname: string): boolean;
function php_classkit_method_rename(const _classname: string; const _methodname: string; const _newname: string): boolean;
function php_ctype_alnum(const _text: string): boolean;
function php_ctype_alpha(const _text: string): boolean;
function php_ctype_cntrl(const _text: string): boolean;
function php_ctype_digit(const _text: string): boolean;
function php_ctype_graph(const _text: string): boolean;
function php_ctype_lower(const _text: string): boolean;
function php_ctype_print(const _text: string): boolean;
function php_ctype_punct(const _text: string): boolean;
function php_ctype_space(const _text: string): boolean;
function php_ctype_upper(const _text: string): boolean;
function php_ctype_xdigit(const _text: string): boolean;
function php_filter_has_var(const _type: integer; const _variable_name: string): boolean;
function php_filter_id(const _filtername: string): integer;
function php_filter_input_array(const _type: integer; const _definition: variant; const _add_empty: boolean): variant;
function php_filter_input(const _type: integer; const _variable_name: string; const _filter: integer; const _options: variant): variant;
function php_filter_list(): variant;
function php_filter_var_array(const _data: variant; const _definition: variant; const _add_empty: boolean): variant;
function php_filter_var(const _variable: variant; const _filter: integer; const _options: variant): variant;
function php_call_user_func_array(const _callback: variant; const _param_arr: variant): variant;
function php_call_user_func(const _callback: variant; const _parameter: variant): variant;
function php_create_function(const _args: string; const _code: string): string;
function php_forward_static_call_array(const _function: variant; const _parameters: variant): variant;
function php_forward_static_call(const _function: variant; const _parameter: variant): variant;
function php_func_get_arg(const _arg_num: integer): variant;
function php_func_get_args(): variant;
function php_func_num_args(): integer;
function php_function_exists(const _function_name: string): boolean;
function php_get_defined_functions(): variant;
procedure php_register_shutdown_function(const _callback: variant; const _parameter: variant);
function php_register_tick_function(const _function: variant; const _arg: variant): boolean;
procedure php_unregister_tick_function(const _function_name: string);
function php_add(const _key: integer): boolean;
function php_delete(const _key: integer): boolean;
function php_exists(const _key: integer): boolean;
procedure php_saveToFile(const _filename: string);
function php_saveToString(): string;
function php_update(const _key: integer; const _value: integer): boolean;
function php_add(const _key: string; const _value: integer): boolean;
function php_exists(const _key: string): boolean;
function php_set(const _key: string; const _value: integer): integer;
function php_update(const _key: string; const _value: integer): boolean;
function php_add(const _key: integer; const _value: string): boolean;
function php_set(const _key: integer; const _value: string): integer;
function php_update(const _key: integer; const _value: string): boolean;
function php_export(const _reflector: variant; const _return: boolean): string;
function php_getModifierNames(const _modifiers: integer): variant;
function php_getConstant(const _name: string): variant;
function php_getConstants(): variant;
function php_getDefaultProperties(): variant;
function php_getDocComment(): string;
function php_getEndLine(): integer;
function php_getExtensionName(): string;
function php_getInterfaceNames(): variant;
function php_getInterfaces(): variant;
function php_getMethods(const _filter: integer): variant;
function php_getModifiers(): integer;
function php_getNamespaceName(): string;
function php_getParentClass(): variant;
function php_getProperties(const _filter: integer): variant;
function php_getShortName(): string;
function php_getStartLine(): integer;
function php_getStaticProperties(): variant;
function php_getStaticPropertyValue(const _name: string; var _def_value: variant): variant;
function php_getTraitAliases(): variant;
function php_getTraitNames(): variant;
function php_getTraits(): variant;
function php_hasConstant(const _name: string): boolean;
function php_hasMethod(const _name: string): boolean;
function php_hasProperty(const _name: string): boolean;
function php_implementsInterface(const _interface: string): boolean;
function php_inNamespace(): boolean;
function php_isAbstract(): boolean;
function php_isAnonymous(): boolean;
function php_isCloneable(): boolean;
function php_isFinal(): boolean;
function php_isInstance(const _object: variant): boolean;
function php_isInstantiable(): boolean;
function php_isInterface(): boolean;
function php_isInternal(): boolean;
function php_isIterateable(): boolean;
function php_isSubclassOf(const _class: string): boolean;
function php_isTrait(): boolean;
function php_isUserDefined(): boolean;
function php_newInstance(const _args: variant): variant;
function php_newInstanceArgs(const _args: variant): variant;
function php_newInstanceWithoutConstructor(): variant;
procedure php_setStaticPropertyValue(const _name: string; const _value: string);
function php_export(const _name: string; const _return: string): string;
function php_getAuthor(): string;
function php_getURL(): string;
function php_getClasses(): variant;
function php_getClassNames(): variant;
function php_getDependencies(): variant;
function php_getFunctions(): variant;
function php_getINIEntries(): variant;
procedure php_isTemporary();
function php_invoke(const _parameter: variant): variant;
function php_invokeArgs(const _args: variant): variant;
function php_isDisabled(): boolean;
function php_getClosureThis(): variant;
function php_getNumberOfParameters(): integer;
function php_getNumberOfRequiredParameters(): integer;
function php_getParameters(): variant;
function php_getStaticVariables(): variant;
function php_hasReturnType(): boolean;
function php_isClosure(): boolean;
function php_isDeprecated(): boolean;
function php_isGenerator(): boolean;
function php_isVariadic(): boolean;
function php_returnsReference(): boolean;
function php_export(const _class: string; const _name: string; const _return: boolean): string;
function php_invoke(const _object: variant; const _parameter: variant): variant;
function php_invokeArgs(const _object: variant; const _args: variant): variant;
function php_isConstructor(): boolean;
function php_isDestructor(): boolean;
function php_isPrivate(): boolean;
function php_isProtected(): boolean;
function php_isPublic(): boolean;
function php_isStatic(): boolean;
procedure php_setAccessible(const _accessible: boolean);
function php_export(const _argument: string; const _return: boolean): string;
function php_allowsNull(): boolean;
function php_canBePassedByValue(): boolean;
function php_getDefaultValue(): variant;
function php_getDefaultValueConstantName(): string;
function php_hasType(): boolean;
function php_isArray(): boolean;
function php_isCallable(): boolean;
function php_isDefaultValueAvailable(): boolean;
function php_isDefaultValueConstant(): boolean;
function php_isOptional(): boolean;
function php_isPassedByReference(): boolean;
function php_export(const _class: variant; const _name: string; const _return: boolean): string;
function php_getValue(const _object: variant): variant;
function php_isDefault(): boolean;
procedure php_setValue(const _object: variant; const _value: variant);
function php_isBuiltin(): boolean;
function php_getExecutingFile(): string;
function php_getExecutingLine(): integer;
function php_getThis(): variant;
function php_getTrace(const _options: integer): variant;
function php_export(): string;
function php_boolval(const _var: variant): boolean;
procedure php_debug_zval_dump(const _variable: variant);
function php_empty(const _var: variant): boolean;
function php_floatval(const _var: variant): extended;
function php_get_defined_vars(): variant;
function php_get_resource_type(const _handle: variant): string;
function php_gettype(const _var: variant): string;
function php_import_request_variables(const _types: string; const _prefix: string): boolean;
function php_intval(const _var: variant; const _base: integer): integer;
function php_is_array(const _var: variant): boolean;
function php_is_bool(const _var: variant): boolean;
function php_is_callable(const _var: variant; const _syntax_only: boolean; var _callable_name: string): boolean;
function php_is_float(const _var: variant): boolean;
function php_is_int(const _var: variant): boolean;
function php_is_null(const _var: variant): boolean;
function php_is_numeric(const _var: variant): boolean;
function php_is_object(const _var: variant): boolean;
function php_is_resource(const _var: variant): boolean;
function php_is_scalar(const _var: variant): boolean;
function php_is_string(const _var: variant): boolean;
function php_isset(const _var: variant): boolean;
function php_print_r(const _expression: variant; const _return: boolean): variant;
function php_serialize(const _value: variant): string;
function php_settype(var _var: variant; const _type: string): boolean;
function php_strval(const _var: variant): string;
function php_unserialize(const _str: string; const _options: variant): variant;
procedure php_unset(const _var: variant);
procedure php_var_dump(const _expression: variant);
function php_var_export(const _expression: variant; const _return: boolean): variant;
function php_oauth_get_sbs(const _http_method: string; const _uri: string; const _request_parameters: variant): string;
function php_oauth_urlencode(const _uri: string): string;
function php_disableDebug(): boolean;
function php_disableRedirects(): boolean;
function php_disableSSLChecks(): boolean;
function php_enableDebug(): boolean;
function php_enableRedirects(): boolean;
function php_enableSSLChecks(): boolean;
function php_fetch(const _protected_resource_url: string; const _extra_parameters: variant; const _http_method: string; const _http_headers: variant): variant;
function php_generateSignature(const _http_method: string; const _url: string; const _extra_parameters: variant): string;
function php_getAccessToken(const _access_token_url: string; const _auth_session_handle: string; const _verifier_token: string; const _http_method: string): variant;
function php_getCAPath(): variant;
function php_getLastResponse(): string;
function php_getLastResponseHeaders(): string;
function php_getLastResponseInfo(): variant;
function php_getRequestHeader(const _http_method: string; const _url: string; const _extra_parameters: variant): string;
function php_getRequestToken(const _request_token_url: string; const _callback_url: string; const _http_method: string): variant;
function php_setAuthType(const _auth_type: integer): variant;
function php_setCAPath(const _ca_path: string; const _ca_info: string): variant;
function php_setNonce(const _nonce: string): variant;
procedure php_setRequestEngine(const _reqengine: integer);
function php_setRSACertificate(const _cert: string): variant;
function php_setSSLChecks(const _sslcheck: integer): boolean;
function php_setTimestamp(const _timestamp: string): variant;
function php_setToken(const _token: string; const _token_secret: string): boolean;
function php_setVersion(const _version: string): boolean;
function php_addRequiredParameter(const _req_params: string): boolean;
procedure php_callconsumerHandler();
procedure php_callTimestampNonceHandler();
procedure php_calltokenHandler();
procedure php_checkOAuthRequest(const _uri: string; const _method: string);
procedure php_consumerHandler(const _callback_function: variant);
function php_generateToken(const _size: integer; const _strong: boolean): string;
procedure php_is2LeggedEndpoint(const _params_array: variant);
procedure php_isRequestTokenEndpoint(const _will_issue_request_token: boolean);
function php_removeRequiredParameter(const _req_params: string): boolean;
function php_reportProblem(const _oauthexception: string; const _send_headers: boolean): string;
function php_setRequestTokenPath(const _path: string): boolean;
procedure php_timestampNonceHandler(const _callback_function: variant);
procedure php_tokenHandler(const _callback_function: variant);
function php_is_soap_fault(const _object: variant): boolean;
function php_use_soap_error_handler(const _handler: boolean): boolean;
procedure php_addFunction(const _functions: variant);
procedure php_addSoapHeader(const _object: variant);
procedure php_fault(const _code: string; const _string: string; const _actor: string; const _details: string; const _name: string);
procedure php_handle(const _soap_request: string);
procedure php_setClass(const _class_name: string; const _args: variant);
procedure php_setObject(const _object: variant);
procedure php_setPersistence(const _mode: integer);
function php_setOpt(const _name: variant; const _value: variant): boolean;
function php_call(const _uri: string; const _method: string; const _parameters: variant; const _callback: variant): integer;
function php_loop(const _callback: variant; const _error_callback: variant): boolean;
function php_xmlrpc_decode_request(const _xml: string; var _method: string; const _encoding: string): variant;
function php_xmlrpc_decode(const _xml: string; const _encoding: string): variant;
function php_xmlrpc_encode_request(const _method: string; const _params: variant; const _output_options: variant): string;
function php_xmlrpc_encode(const _value: variant): string;
function php_xmlrpc_get_type(const _value: variant): string;
function php_xmlrpc_is_fault(const _arg: variant): boolean;
function php_xmlrpc_parse_method_descriptions(const _xml: string): variant;
function php_xmlrpc_server_add_introspection_data(const _server: variant; const _desc: variant): integer;
function php_xmlrpc_server_call_method(const _server: variant; const _xml: string; const _user_data: variant; const _output_options: variant): string;
function php_xmlrpc_server_create(): variant;
function php_xmlrpc_server_destroy(const _server: variant): integer;
function php_xmlrpc_server_register_introspection_callback(const _server: variant; const _function: string): boolean;
function php_xmlrpc_server_register_method(const _server: variant; const _method_name: string; const _function: string): boolean;
function php_xmlrpc_set_type(var _value: string; const _type: string): boolean;
function php_com_create_guid(): string;
function php_com_event_sink(const _comobject: variant; const _sinkobject: variant; const _sinkinterface: variant): boolean;
function php_com_get_active_object(const _progid: string; const _code_page: integer): variant;
function php_com_load_typelib(const _typelib_name: string; const _case_insensitive: boolean): boolean;
function php_com_message_pump(const _timeoutms: integer): boolean;
function php_com_print_typeinfo(const _comobject: variant; const _dispinterface: string; const _wantsink: boolean): boolean;
function php_variant_abs(const _val: variant): variant;
function php_variant_add(const _left: variant; const _right: variant): variant;
function php_variant_and(const _left: variant; const _right: variant): variant;
function php_variant_cast(const _variant: variant; const _type: integer): variant;
function php_variant_cat(const _left: variant; const _right: variant): variant;
function php_variant_cmp(const _left: variant; const _right: variant; const _lcid: integer; const _flags: integer): integer;
function php_variant_date_from_timestamp(const _timestamp: integer): variant;
function php_variant_date_to_timestamp(const _variant: variant): integer;
function php_variant_div(const _left: variant; const _right: variant): variant;
function php_variant_eqv(const _left: variant; const _right: variant): variant;
function php_variant_fix(const _variant: variant): variant;
function php_variant_get_type(const _variant: variant): integer;
function php_variant_idiv(const _left: variant; const _right: variant): variant;
function php_variant_imp(const _left: variant; const _right: variant): variant;
function php_variant_int(const _variant: variant): variant;
function php_variant_mod(const _left: variant; const _right: variant): variant;
function php_variant_mul(const _left: variant; const _right: variant): variant;
function php_variant_neg(const _variant: variant): variant;
function php_variant_not(const _variant: variant): variant;
function php_variant_or(const _left: variant; const _right: variant): variant;
function php_variant_pow(const _left: variant; const _right: variant): variant;
function php_variant_round(const _variant: variant; const _decimals: integer): variant;
procedure php_variant_set_type(const _variant: variant; const _type: integer);
procedure php_variant_set(const _variant: variant; const _value: variant);
function php_variant_sub(const _left: variant; const _right: variant): variant;
function php_variant_xor(const _left: variant; const _right: variant): variant;
function php_win32_ps_list_procs(): variant;
function php_win32_ps_stat_mem(): variant;
function php_win32_ps_stat_proc(const _pid: integer): variant;
function php_win32_continue_service(const _servicename: string; const _machine: string): integer;
function php_win32_create_service(const _details: variant; const _machine: string): variant;
function php_win32_delete_service(const _servicename: string; const _machine: string): variant;
function php_win32_get_last_control_message(): integer;
function php_win32_pause_service(const _servicename: string; const _machine: string): integer;
function php_win32_query_service_status(const _servicename: string; const _machine: string): variant;
function php_win32_set_service_status(const _status: integer; const _checkpoint: integer): boolean;
function php_win32_start_service_ctrl_dispatcher(const _name: string): variant;
function php_win32_start_service(const _servicename: string; const _machine: string): integer;
function php_win32_stop_service(const _servicename: string; const _machine: string): integer;
function php_isId(): boolean;
procedure php_appendData(const _data: string);
procedure php_deleteData(const _offset: integer; const _count: integer);
procedure php_insertData(const _offset: integer; const _data: string);
procedure php_replaceData(const _offset: integer; const _count: integer; const _data: string);
function php_substringData(const _offset: integer; const _count: integer): string;
function php_load(const _filename: string; const _options: integer): variant;
function php_loadHTML(const _source: string; const _options: integer): boolean;
function php_loadHTMLFile(const _filename: string; const _options: integer): boolean;
function php_loadXML(const _source: string; const _options: integer): variant;
procedure php_normalizeDocument();
function php_registerNodeClass(const _baseclass: string; const _extendedclass: string): boolean;
function php_relaxNGValidate(const _filename: string): boolean;
function php_relaxNGValidateSource(const _source: string): boolean;
function php_saveHTML(const _node: variant): string;
function php_saveHTMLFile(const _filename: string): integer;
function php_saveXML(const _node: variant; const _options: integer): string;
function php_schemaValidate(const _filename: string; const _flags: integer): boolean;
function php_schemaValidateSource(const _source: string; const _flags: integer): boolean;
function php_validate(): boolean;
function php_xinclude(const _options: integer): integer;
function php_appendXML(const _data: string): boolean;
function php_getAttribute(const _name: string): string;
function php_getAttributeNS(const _namespaceURI: string; const _localName: string): string;
function php_hasAttribute(const _name: string): boolean;
function php_hasAttributeNS(const _namespaceURI: string; const _localName: string): boolean;
function php_removeAttribute(const _name: string): boolean;
function php_removeAttributeNode(const _oldnode: variant): boolean;
function php_removeAttributeNS(const _namespaceURI: string; const _localName: string): boolean;
procedure php_setAttributeNS(const _namespaceURI: string; const _qualifiedName: string; const _value: string);
procedure php_setIdAttribute(const _name: string; const _isId: boolean);
procedure php_setIdAttributeNode(const _attr: variant; const _isId: boolean);
procedure php_setIdAttributeNS(const _namespaceURI: string; const _localName: string; const _isId: boolean);
function php_hasFeature(const _feature: string; const _version: string): boolean;
function php_C14N(const _exclusive: boolean; const _with_comments: boolean; const _xpath: variant; const _ns_prefixes: variant): string;
function php_C14NFile(const _uri: string; const _exclusive: boolean; const _with_comments: boolean; const _xpath: variant; const _ns_prefixes: variant): integer;
function php_getLineNo(): integer;
function php_getNodePath(): string;
function php_hasAttributes(): boolean;
function php_hasChildNodes(): boolean;
function php_isDefaultNamespace(const _namespaceURI: string): boolean;
function php_isSameNode(const _node: variant): boolean;
function php_isSupported(const _feature: string; const _version: string): boolean;
function php_lookupNamespaceURI(const _prefix: string): string;
function php_lookupPrefix(const _namespaceURI: string): string;
procedure php_normalize();
function php_isWhitespaceInElementContent(): boolean;
function php_evaluate(const _expression: string; const _contextnode: variant; const _registerNodeNS: boolean): variant;
function php_registerNamespace(const _prefix: string; const _namespaceURI: string): boolean;
procedure php_registerPhpFunctions(const _restrict: variant);
procedure php_libxml_clear_errors();
function php_libxml_disable_entity_loader(const _disable: boolean): boolean;
function php_libxml_get_errors(): variant;
procedure php_libxml_set_external_entity_loader(const _resolver_function: variant);
procedure php_libxml_set_streams_context(const _streams_context: variant);
function php_libxml_use_internal_errors(const _use_errors: boolean): boolean;
procedure php_addAttribute(const _name: string; const _value: string; const _namespace: string);
function php_asXML(const _filename: string): variant;
function php_getDocNamespaces(const _recursive: boolean; const _from_root: boolean): variant;
function php_getNamespaces(const _recursive: boolean): variant;
function php_registerXPathNamespace(const _prefix: string; const _ns: string): boolean;
function php_xpath(const _path: string): variant;
function php_wddx_add_vars(const _packet_id: variant; const _var_name: variant): boolean;
function php_wddx_deserialize(const _packet: string): variant;
function php_wddx_packet_end(const _packet_id: variant): string;
function php_wddx_packet_start(const _comment: string): variant;
function php_wddx_serialize_value(const _var: variant; const _comment: string): string;
function php_wddx_serialize_vars(const _var_name: variant): string;
function php_diff(const _from: variant; const _to: variant): variant;
function php_merge(const _src: variant; const _diff: variant): variant;
function php_diff(const _from: string; const _to: string): string;
function php_merge(const _src: string; const _diff: string): string;
function php_utf8_decode(const _data: string): string;
function php_utf8_encode(const _data: string): string;
function php_xml_error_string(const _code: integer): string;
function php_xml_get_current_byte_index(const _parser: variant): integer;
function php_xml_get_current_column_number(const _parser: variant): integer;
function php_xml_get_current_line_number(const _parser: variant): integer;
function php_xml_get_error_code(const _parser: variant): integer;
function php_xml_parse_into_struct(const _parser: variant; const _data: string; var _values: variant; var _index: variant): integer;
function php_xml_parse(const _parser: variant; const _data: string; const _is_final: boolean): integer;
function php_xml_parser_create_ns(const _encoding: string; const _separator: string): variant;
function php_xml_parser_create(const _encoding: string): variant;
function php_xml_parser_free(const _parser: variant): boolean;
function php_xml_parser_get_option(const _parser: variant; const _option: integer): variant;
function php_xml_parser_set_option(const _parser: variant; const _option: integer; const _value: variant): boolean;
function php_xml_set_character_data_handler(const _parser: variant; const _handler: variant): boolean;
function php_xml_set_default_handler(const _parser: variant; const _handler: variant): boolean;
function php_xml_set_element_handler(const _parser: variant; const _start_element_handler: variant; const _end_element_handler: variant): boolean;
function php_xml_set_end_namespace_decl_handler(const _parser: variant; const _handler: variant): boolean;
function php_xml_set_external_entity_ref_handler(const _parser: variant; const _handler: variant): boolean;
function php_xml_set_notation_decl_handler(const _parser: variant; const _handler: variant): boolean;
function php_xml_set_object(const _parser: variant; var _object: variant): boolean;
function php_xml_set_processing_instruction_handler(const _parser: variant; const _handler: variant): boolean;
function php_xml_set_start_namespace_decl_handler(const _parser: variant; const _handler: variant): boolean;
function php_xml_set_unparsed_entity_decl_handler(const _parser: variant; const _handler: variant): boolean;
function php_getAttributeNo(const _index: integer): string;
function php_getParserProperty(const _property: integer): boolean;
function php_isValid(): boolean;
function php_lookupNamespace(const _prefix: string): string;
function php_moveToAttribute(const _name: string): boolean;
function php_moveToAttributeNo(const _index: integer): boolean;
function php_moveToAttributeNs(const _localName: string; const _namespaceURI: string): boolean;
function php_moveToElement(): boolean;
function php_moveToFirstAttribute(): boolean;
function php_moveToNextAttribute(): boolean;
function php_next(const _localname: string): boolean;
function php_open(const _URI: string; const _encoding: string; const _options: integer): boolean;
function php_read(): boolean;
function php_readInnerXML(): string;
function php_readOuterXML(): string;
function php_readString(): string;
function php_setParserProperty(const _property: integer; const _value: boolean): boolean;
function php_setRelaxNGSchema(const _filename: string): boolean;
function php_setRelaxNGSchemaSource(const _source: string): boolean;
function php_setSchema(const _filename: string): boolean;
function php_xml(const _source: string; const _encoding: string; const _options: integer): boolean;
function php_xmlwriter_end_attribute(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_cdata(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_comment(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_document(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_dtd_attlist(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_dtd_element(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_dtd_entity(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_dtd(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_element(const _xmlwriter: variant): boolean;
function php_xmlwriter_end_pi(const _xmlwriter: variant): boolean;
function php_xmlwriter_flush(const _xmlwriter: variant; const _empty: boolean): variant;
function php_xmlwriter_full_end_element(const _xmlwriter: variant): boolean;
function php_xmlwriter_open_memory(): variant;
function php_xmlwriter_open_uri(const _uri: string): variant;
function php_xmlwriter_output_memory(const _xmlwriter: variant; const _flush: boolean): string;
function php_xmlwriter_set_indent_string(const _xmlwriter: variant; const _indentString: string): boolean;
function php_xmlwriter_set_indent(const _xmlwriter: variant; const _indent: boolean): boolean;
function php_xmlwriter_start_attribute_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string): boolean;
function php_xmlwriter_start_attribute(const _xmlwriter: variant; const _name: string): boolean;
function php_xmlwriter_start_cdata(const _xmlwriter: variant): boolean;
function php_xmlwriter_start_comment(const _xmlwriter: variant): boolean;
function php_xmlwriter_start_document(const _xmlwriter: variant; const _version: string; const _encoding: string; const _standalone: string): boolean;
function php_xmlwriter_start_dtd_attlist(const _xmlwriter: variant; const _name: string): boolean;
function php_xmlwriter_start_dtd_element(const _xmlwriter: variant; const _qualifiedName: string): boolean;
function php_xmlwriter_start_dtd_entity(const _xmlwriter: variant; const _name: string; const _isparam: boolean): boolean;
function php_xmlwriter_start_dtd(const _xmlwriter: variant; const _qualifiedName: string; const _publicId: string; const _systemId: string): boolean;
function php_xmlwriter_start_element_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string): boolean;
function php_xmlwriter_start_element(const _xmlwriter: variant; const _name: string): boolean;
function php_xmlwriter_start_pi(const _xmlwriter: variant; const _target: string): boolean;
function php_xmlwriter_text(const _xmlwriter: variant; const _content: string): boolean;
function php_xmlwriter_write_attribute_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string; const _content: string): boolean;
function php_xmlwriter_write_attribute(const _xmlwriter: variant; const _name: string; const _value: string): boolean;
function php_xmlwriter_write_cdata(const _xmlwriter: variant; const _content: string): boolean;
function php_xmlwriter_write_comment(const _xmlwriter: variant; const _content: string): boolean;
function php_xmlwriter_write_dtd_attlist(const _xmlwriter: variant; const _name: string; const _content: string): boolean;
function php_xmlwriter_write_dtd_element(const _xmlwriter: variant; const _name: string; const _content: string): boolean;
function php_xmlwriter_write_dtd_entity(const _xmlwriter: variant; const _name: string; const _content: string; const _pe: boolean; const _pubid: string; const _sysid: string; const _ndataid: string): boolean;
function php_xmlwriter_write_dtd(const _xmlwriter: variant; const _name: string; const _publicId: string; const _systemId: string; const _subset: string): boolean;
function php_xmlwriter_write_element_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string; const _content: string): boolean;
function php_xmlwriter_write_element(const _xmlwriter: variant; const _name: string; const _content: string): boolean;
function php_xmlwriter_write_pi(const _xmlwriter: variant; const _target: string; const _content: string): boolean;
function php_xmlwriter_write_raw(const _xmlwriter: variant; const _content: string): boolean;
function php_getParameter(const _namespaceURI: string; const _localName: string): string;
function php_hasExsltSupport(): boolean;
function php_importStylesheet(const _stylesheet: variant): boolean;
function php_removeParameter(const _namespaceURI: string; const _localName: string): boolean;
function php_setParameter(const _namespace: string; const _name: string; const _value: string): boolean;
function php_setProfiling(const _filename: string): boolean;
function php_transformToURI(const _doc: variant; const _uri: string): integer;
function php_transformToXML(const _doc: variant): string;
function php_getValue(): integer;
procedure php_resetValue();
function php_getMeta(const _attribute: integer): variant;
procedure php_setCounterClass(const _name: string);
function php_counter_get(): integer;
procedure php_counter_bump(const _offset: integer);
procedure php_counter_reset();
function php_counter_create(const _name: string; const _initial_value: integer; const _flags: integer): variant;
function php_counter_get_value(const _counter: variant): integer;
procedure php_counter_bump_value(const _counter: variant; const _offset: integer);
procedure php_counter_reset_value(const _counter: variant);
function php_counter_get_meta(const _counter: variant; const _attribute: integer): variant;

{$ENDIF}

implementation

{$IFDEF FPC}

function php_base64_decode(const AString: string): string; begin end;
function php_file_get_contents(const AFileName: string): string; begin end;
function php_htmlspecialchars(const AString: string): string; begin end;
function php_htmlspecialchars_decode(const AString: string): string; begin end;
function php_str_ireplace(const AFrom, ATo, AString: string): string; begin end;
function php_str_replace(const AFrom, ATo, AString: string): string; begin end;
function php_mysql_connect(const AServer, AUser, APass: string): variant; begin end;
function php_array_keys(const AArray: variant): variant; begin end;
function php_basename(const AFileName: string): string; begin end;
function php_ltrim(const AString: string): string; begin end;
function php_rtrim(const AString: string): string; begin end;
function php_str_pad(const AString: string; const ALength: integer): string; begin end;
function php_trim(const AString: string): string; begin end;
procedure php_include_once(const A: string); begin end;

function php_float(): integer; begin end;
function php_getMessage(): string; begin end;
function php_getCode(): variant; begin end;
function php_getFile(): string; begin end;
function php_getLine(): integer; begin end;
function php_getTrace(): variant; begin end;
function php_getTraceAsString(): string; begin end;
function php_getSeverity(): integer; begin end;
function php_current(): variant; begin end;
function php_key(): variant; begin end;
procedure php_next(); begin end;
procedure php_rewind(); begin end;
function php_valid(): boolean; begin end;
function php_offsetExists(const _offset: variant): boolean; begin end;
function php_offsetGet(const _offset: variant): variant; begin end;
procedure php_offsetSet(const _offset: variant; const _value: variant); begin end;
procedure php_offsetUnset(const _offset: variant); begin end;
function php_serialize(): string; begin end;
procedure php_unserialize(const _serialized: string); begin end;
function php_call(const _newthis: variant): variant; begin end;
function php_getReturn(): variant; begin end;
function php_send(const _value: variant): variant; begin end;
function php_throw(const _exception: variant): variant; begin end;
function php_apc_add(const _key: string; const _var: variant; const _ttl: integer): boolean; begin end;
function php_apc_add(const _values: variant; const _unused: variant; const _ttl: integer): variant; begin end;
function php_apc_bin_dump(const _files: variant; const _user_vars: variant): string; begin end;
function php_apc_bin_dumpfile(const _files: variant; const _user_vars: variant; const _filename: string; const _flags: integer; const _context: variant): integer; begin end;
function php_apc_bin_load(const _data: string; const _flags: integer): boolean; begin end;
function php_apc_bin_loadfile(const _filename: string; const _context: variant; const _flags: integer): boolean; begin end;
function php_apc_cache_info(const _cache_type: string; const _limited: boolean): variant; begin end;
function php_apc_cas(const _key: string; const _old: integer; const _new: integer): boolean; begin end;
function php_apc_clear_cache(const _cache_type: string): boolean; begin end;
function php_apc_compile_file(const _filename: string; const _atomic: boolean): variant; begin end;
function php_apc_dec(const _key: string; const _step: integer; var _success: boolean): integer; begin end;
function php_apc_define_constants(const _key: string; const _constants: variant; const _case_sensitive: boolean): boolean; begin end;
function php_apc_delete_file(const _keys: variant): variant; begin end;
function php_apc_delete(const _key: string): variant; begin end;
function php_apc_exists(const _keys: variant): variant; begin end;
function php_apc_fetch(const _key: variant; var _success: boolean): variant; begin end;
function php_apc_inc(const _key: string; const _step: integer; var _success: boolean): integer; begin end;
function php_apc_load_constants(const _key: string; const _case_sensitive: boolean): boolean; begin end;
function php_apc_sma_info(const _limited: boolean): variant; begin end;
function php_apc_store(const _key: string; const _var: variant; const _ttl: integer): boolean; begin end;
function php_apc_store(const _values: variant; const _unused: variant; const _ttl: integer): variant; begin end;
function php_getTotalCount(): integer; begin end;
function php_getTotalHits(): integer; begin end;
function php_getTotalSize(): integer; begin end;
function php_apcu_add(const _key: string; const _var: variant; const _ttl: integer): boolean; begin end;
function php_apcu_add(const _values: variant; const _unused: variant; const _ttl: integer): variant; begin end;
function php_apcu_cache_info(const _limited: boolean): variant; begin end;
function php_apcu_cas(const _key: string; const _old: integer; const _new: integer): boolean; begin end;
function php_apcu_clear_cache(): boolean; begin end;
function php_apcu_dec(const _key: string; const _step: integer; var _success: boolean): integer; begin end;
function php_apcu_delete(const _key: string): variant; begin end;
function php_apcu_entry(const _key: string; const _generator: variant; const _ttl: integer): variant; begin end;
function php_apcu_exists(const _keys: variant): variant; begin end;
function php_apcu_fetch(const _key: variant; var _success: boolean): variant; begin end;
function php_apcu_inc(const _key: string; const _step: integer; var _success: boolean): integer; begin end;
function php_apcu_sma_info(const _limited: boolean): variant; begin end;
function php_apcu_store(const _key: string; const _var: variant; const _ttl: integer): boolean; begin end;
function php_apcu_store(const _values: variant; const _unused: variant; const _ttl: integer): variant; begin end;
function php_apd_breakpoint(const _debug_level: integer): boolean; begin end;
function php_apd_callstack(): variant; begin end;
procedure php_apd_clunk(const _warning: string; const _delimiter: string); begin end;
function php_apd_continue(const _debug_level: integer): boolean; begin end;
procedure php_apd_croak(const _warning: string; const _delimiter: string); begin end;
procedure php_apd_dump_function_table(); begin end;
function php_apd_dump_persistent_resources(): variant; begin end;
function php_apd_dump_regular_resources(): variant; begin end;
function php_apd_echo(const _output: string): boolean; begin end;
function php_apd_get_active_symbols(): variant; begin end;
function php_apd_set_pprof_trace(const _dump_directory: string): string; begin end;
function php_apd_set_session_trace_socket(const _tcp_server: string; const _socket_type: integer; const _port: integer; const _debug_level: integer): boolean; begin end;
procedure php_apd_set_session_trace(const _debug_level: integer; const _dump_directory: string); begin end;
procedure php_apd_set_session(const _debug_level: integer); begin end;
function php_override_function(const _function_name: string; const _function_args: string; const _function_code: string): boolean; begin end;
function php_rename_function(const _original_name: string; const _new_name: string): boolean; begin end;
function php_bcompiler_load_exe(const _filename: string): boolean; begin end;
function php_bcompiler_load(const _filename: string): boolean; begin end;
function php_bcompiler_parse_class(const _class: string; const _callback: string): boolean; begin end;
function php_bcompiler_read(const _filehandle: variant): boolean; begin end;
function php_bcompiler_write_class(const _filehandle: variant; const _className: string; const _extends: string): boolean; begin end;
function php_bcompiler_write_constant(const _filehandle: variant; const _constantName: string): boolean; begin end;
function php_bcompiler_write_exe_footer(const _filehandle: variant; const _startpos: integer): boolean; begin end;
function php_bcompiler_write_file(const _filehandle: variant; const _filename: string): boolean; begin end;
function php_bcompiler_write_footer(const _filehandle: variant): boolean; begin end;
function php_bcompiler_write_function(const _filehandle: variant; const _functionName: string): boolean; begin end;
function php_bcompiler_write_functions_from_file(const _filehandle: variant; const _fileName: string): boolean; begin end;
function php_bcompiler_write_header(const _filehandle: variant; const _write_ver: string): boolean; begin end;
function php_bcompiler_write_included_filename(const _filehandle: variant; const _filename: string): boolean; begin end;
function php_blenc_encrypt(const _plaintext: string; const _encodedfile: string; const _encryption_key: string): string; begin end;
function php_debug_backtrace(const _options: integer; const _limit: integer): variant; begin end;
procedure php_debug_print_backtrace(const _options: integer; const _limit: integer); begin end;
procedure php_error_clear_last(); begin end;
function php_error_get_last(): variant; begin end;
function php_error_log(const _message: string; const _message_type: integer; const _destination: string; const _extra_headers: string): boolean; begin end;
function php_error_reporting(const _level: integer): integer; begin end;
function php_restore_error_handler(): boolean; begin end;
function php_restore_exception_handler(): boolean; begin end;
function php_set_error_handler(const _error_handler: variant; const _error_types: integer): variant; begin end;
function php_handler(const _errno: integer; const _errstr: string; const _errfile: string; const _errline: integer; const _errcontext: variant): boolean; begin end;
procedure php_handler(const _ex: variant); begin end;
function php_trigger_error(const _error_msg: string; const _error_type: integer): boolean; begin end;
function php_inclued_get_data(): variant; begin end;
function php_opcache_compile_file(const _file: string): boolean; begin end;
function php_opcache_get_configuration(): variant; begin end;
function php_opcache_get_status(const _get_scripts: boolean): variant; begin end;
function php_opcache_invalidate(const _script: string; const _force: boolean): boolean; begin end;
function php_opcache_is_script_cached(const _file: string): boolean; begin end;
function php_opcache_reset(): boolean; begin end;
procedure php_flush(); begin end;
procedure php_ob_clean(); begin end;
function php_ob_end_clean(): boolean; begin end;
function php_ob_end_flush(): boolean; begin end;
procedure php_ob_flush(); begin end;
function php_ob_get_clean(): string; begin end;
function php_ob_get_contents(): string; begin end;
function php_ob_get_flush(): string; begin end;
function php_ob_get_length(): integer; begin end;
function php_ob_get_level(): integer; begin end;
function php_ob_get_status(const _full_status: boolean): variant; begin end;
function php_ob_gzhandler(const _buffer: string; const _mode: integer): string; begin end;
procedure php_ob_implicit_flush(const _flag: integer); begin end;
function php_ob_list_handlers(): variant; begin end;
function php_ob_start(const _output_callback: variant; const _chunk_size: integer; const _flags: integer): boolean; begin end;
function php_handler(const _buffer: string; const _phase: integer): string; begin end;
function php_output_add_rewrite_var(const _name: string; const _value: string): boolean; begin end;
function php_output_reset_rewrite_vars(): boolean; begin end;
function php_assert_options(const _what: integer; const _value: variant): variant; begin end;
function php_assert(const _assertion: variant; const _description: string): boolean; begin end;
function php_assert(const _assertion: variant; const _exception: variant): boolean; begin end;
function php_cli_get_process_title(): string; begin end;
function php_cli_set_process_title(const _title: string): boolean; begin end;
function php_dl(const _library: string): boolean; begin end;
function php_extension_loaded(const _name: string): boolean; begin end;
function php_gc_collect_cycles(): integer; begin end;
procedure php_gc_disable(); begin end;
procedure php_gc_enable(); begin end;
function php_gc_enabled(): boolean; begin end;
function php_gc_mem_caches(): integer; begin end;
function php_get_cfg_var(const _option: string): string; begin end;
function php_get_current_user(): string; begin end;
function php_get_defined_constants(const _categorize: boolean): variant; begin end;
function php_get_extension_funcs(const _module_name: string): variant; begin end;
function php_get_include_path(): string; begin end;
function php_get_included_files(): variant; begin end;
function php_get_loaded_extensions(const _zend_extensions: boolean): variant; begin end;
function php_get_magic_quotes_gpc(): boolean; begin end;
function php_get_magic_quotes_runtime(): boolean; begin end;
function php_get_resources(const _type: string): variant; begin end;
function php_getenv(const _varname: string): string; begin end;
function php_getlastmod(): integer; begin end;
function php_getmygid(): integer; begin end;
function php_getmyinode(): integer; begin end;
function php_getmypid(): integer; begin end;
function php_getmyuid(): integer; begin end;
function php_getopt(const _options: string; const _longopts: variant): variant; begin end;
function php_getrusage(const _who: integer): variant; begin end;
function php_ini_get_all(const _extension: string; const _details: boolean): variant; begin end;
function php_ini_get(const _varname: string): string; begin end;
procedure php_ini_restore(const _varname: string); begin end;
function php_ini_set(const _varname: string; const _newvalue: string): string; begin end;
function php_memory_get_peak_usage(const _real_usage: boolean): integer; begin end;
function php_memory_get_usage(const _real_usage: boolean): integer; begin end;
function php_php_ini_loaded_file(): string; begin end;
function php_php_ini_scanned_files(): string; begin end;
function php_php_logo_guid(): string; begin end;
function php_php_sapi_name(): string; begin end;
function php_php_uname(const _mode: string): string; begin end;
function php_phpcredits(const _flag: integer): boolean; begin end;
function php_phpinfo(const _what: integer): boolean; begin end;
function php_phpversion(const _extension: string): string; begin end;
function php_putenv(const _setting: string): boolean; begin end;
procedure php_restore_include_path(); begin end;
function php_set_include_path(const _new_include_path: string): string; begin end;
function php_set_magic_quotes_runtime(const _new_setting: boolean): boolean; begin end;
function php_set_time_limit(const _seconds: integer): boolean; begin end;
function php_sys_get_temp_dir(): string; begin end;
function php_version_compare(const _version1: string; const _version2: string; const _operator: string): variant; begin end;
function php_zend_logo_guid(): string; begin end;
function php_zend_thread_id(): integer; begin end;
function php_zend_version(): string; begin end;
function php_runkit_class_adopt(const _classname: string; const _parentname: string): boolean; begin end;
function php_runkit_class_emancipate(const _classname: string): boolean; begin end;
function php_runkit_constant_add(const _constname: string; const _value: variant): boolean; begin end;
function php_runkit_constant_redefine(const _constname: string; const _newvalue: variant): boolean; begin end;
function php_runkit_constant_remove(const _constname: string): boolean; begin end;
function php_runkit_function_add(const _funcname: string; const _arglist: string; const _code: string): boolean; begin end;
function php_runkit_function_copy(const _funcname: string; const _targetname: string): boolean; begin end;
function php_runkit_function_redefine(const _funcname: string; const _arglist: string; const _code: string): boolean; begin end;
function php_runkit_function_remove(const _funcname: string): boolean; begin end;
function php_runkit_function_rename(const _funcname: string; const _newname: string): boolean; begin end;
function php_runkit_import(const _filename: string; const _flags: integer): boolean; begin end;
function php_runkit_lint_file(const _filename: string): boolean; begin end;
function php_runkit_lint(const _code: string): boolean; begin end;
function php_runkit_method_add(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean; begin end;
function php_runkit_method_copy(const _dClass: string; const _dMethod: string; const _sClass: string; const _sMethod: string): boolean; begin end;
function php_runkit_method_redefine(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean; begin end;
function php_runkit_method_remove(const _classname: string; const _methodname: string): boolean; begin end;
function php_runkit_method_rename(const _classname: string; const _methodname: string; const _newname: string): boolean; begin end;
function php_runkit_return_value_used(): boolean; begin end;
function php_runkit_sandbox_output_handler(const _sandbox: variant; const _callback: variant): variant; begin end;
function php_runkit_superglobals(): variant; begin end;
procedure php_uopz_backup(const _class: string; const _function: string); begin end;
procedure php_uopz_backup(const _function: string); begin end;
procedure php_uopz_compose(const _name: string; const _classes: variant; const _methods: variant; const _properties: variant; const _flags: integer); begin end;
procedure php_uopz_delete(const _class: string; const _function: string); begin end;
procedure php_uopz_delete(const _function: string); begin end;
procedure php_uopz_extend(const _class: string; const _parent: string); begin end;
function php_uopz_flags(const _class: string; const _function: string; const _flags: integer): integer; begin end;
function php_uopz_flags(const _function: string; const _flags: integer): integer; begin end;
procedure php_uopz_function(const _class: string; const _function: string; const _handler: variant; const _modifiers: integer); begin end;
procedure php_uopz_function(const _function: string; const _handler: variant; const _modifiers: integer); begin end;
procedure php_uopz_implement(const _class: string; const _interface: string); begin end;
procedure php_uopz_overload(const _opcode: integer; const _callable: variant); begin end;
procedure php_uopz_redefine(const _class: string; const _constant: string; const _value: variant); begin end;
procedure php_uopz_redefine(const _constant: string; const _value: variant); begin end;
procedure php_uopz_rename(const _class: string; const _function: string; const _rename: string); begin end;
procedure php_uopz_rename(const _function: string; const _rename: string); begin end;
procedure php_uopz_restore(const _class: string; const _function: string); begin end;
procedure php_uopz_restore(const _function: string); begin end;
procedure php_uopz_undefine(const _class: string; const _constant: string); begin end;
procedure php_uopz_undefine(const _constant: string); begin end;
function php_count(): integer; begin end;
function php_wincache_fcache_fileinfo(const _summaryonly: boolean): variant; begin end;
function php_wincache_fcache_meminfo(): variant; begin end;
function php_wincache_lock(const _key: string; const _isglobal: boolean): boolean; begin end;
function php_wincache_ocache_fileinfo(const _summaryonly: boolean): variant; begin end;
function php_wincache_ocache_meminfo(): variant; begin end;
function php_wincache_refresh_if_changed(const _files: variant): boolean; begin end;
function php_wincache_rplist_fileinfo(const _summaryonly: boolean): variant; begin end;
function php_wincache_rplist_meminfo(): variant; begin end;
function php_wincache_scache_info(const _summaryonly: boolean): variant; begin end;
function php_wincache_scache_meminfo(): variant; begin end;
function php_wincache_ucache_add(const _key: string; const _value: variant; const _ttl: integer): boolean; begin end;
function php_wincache_ucache_add(const _values: variant; const _unused: variant; const _ttl: integer): boolean; begin end;
function php_wincache_ucache_cas(const _key: string; const _old_value: integer; const _new_value: integer): boolean; begin end;
function php_wincache_ucache_clear(): boolean; begin end;
function php_wincache_ucache_dec(const _key: string; const _dec_by: integer; var _success: boolean): variant; begin end;
function php_wincache_ucache_delete(const _key: variant): boolean; begin end;
function php_wincache_ucache_exists(const _key: string): boolean; begin end;
function php_wincache_ucache_get(const _key: variant; var _success: boolean): variant; begin end;
function php_wincache_ucache_inc(const _key: string; const _inc_by: integer; var _success: boolean): variant; begin end;
function php_wincache_ucache_info(const _summaryonly: boolean; const _key: string): variant; begin end;
function php_wincache_ucache_meminfo(): variant; begin end;
function php_wincache_ucache_set(const _key: variant; const _value: variant; const _ttl: integer): boolean; begin end;
function php_wincache_unlock(const _key: string): boolean; begin end;
function php_xhprof_disable(): variant; begin end;
procedure php_xhprof_enable(const _flags: integer; const _options: variant); begin end;
function php_xhprof_sample_disable(): variant; begin end;
procedure php_xhprof_sample_enable(); begin end;
function php_id3_get_frame_long_name(const _frameId: string): string; begin end;
function php_id3_get_frame_short_name(const _frameId: string): string; begin end;
function php_id3_get_genre_id(const _genre: string): integer; begin end;
function php_id3_get_genre_list(): variant; begin end;
function php_id3_get_genre_name(const _genre_id: integer): string; begin end;
function php_id3_get_tag(const _filename: string; const _version: integer): variant; begin end;
function php_id3_get_version(const _filename: string): integer; begin end;
function php_id3_remove_tag(const _filename: string; const _version: integer): boolean; begin end;
function php_id3_set_tag(const _filename: string; const _tag: variant; const _version: integer): boolean; begin end;
function php_getAlbum(): string; begin end;
function php_getArtist(): string; begin end;
function php_getComment(): string; begin end;
function php_getGenre(): string; begin end;
function php_getTitle(): string; begin end;
function php_getTrack(): integer; begin end;
function php_getYear(): integer; begin end;
function php_isEmpty(): boolean; begin end;
function php_addFrame(const _frame: variant): boolean; begin end;
function php_getFrameList(): variant; begin end;
function php_getSize(): integer; begin end;
function php_getDescription(): string; begin end;
function php_getMimeType(): string; begin end;
function php_getType(): integer; begin end;
function php_savePicture(const _filename: string): boolean; begin end;
function php_getMimeType(const _type: string): string; begin end;
procedure php_setPicture(const _filename: string); begin end;
procedure php_setType(const _type: integer); begin end;
function php_openal_buffer_create(): variant; begin end;
function php_openal_buffer_data(const _buffer: variant; const _format: integer; const _data: string; const _freq: integer): boolean; begin end;
function php_openal_buffer_destroy(const _buffer: variant): boolean; begin end;
function php_openal_buffer_get(const _buffer: variant; const _property: integer): integer; begin end;
function php_openal_buffer_loadwav(const _buffer: variant; const _wavfile: string): boolean; begin end;
function php_openal_context_create(const _device: variant): variant; begin end;
function php_openal_context_current(const _context: variant): boolean; begin end;
function php_openal_context_destroy(const _context: variant): boolean; begin end;
function php_openal_context_process(const _context: variant): boolean; begin end;
function php_openal_context_suspend(const _context: variant): boolean; begin end;
function php_openal_device_close(const _device: variant): boolean; begin end;
function php_openal_device_open(const _device_desc: string): variant; begin end;
function php_openal_listener_get(const _property: integer): variant; begin end;
function php_openal_listener_set(const _property: integer; const _setting: variant): boolean; begin end;
function php_openal_source_create(): variant; begin end;
function php_openal_source_destroy(const _source: variant): boolean; begin end;
function php_openal_source_get(const _source: variant; const _property: integer): variant; begin end;
function php_openal_source_pause(const _source: variant): boolean; begin end;
function php_openal_source_play(const _source: variant): boolean; begin end;
function php_openal_source_rewind(const _source: variant): boolean; begin end;
function php_openal_source_set(const _source: variant; const _property: integer; const _setting: variant): boolean; begin end;
function php_openal_source_stop(const _source: variant): boolean; begin end;
function php_openal_stream(const _source: variant; const _format: integer; const _rate: integer): variant; begin end;
function php_kadm5_chpass_principal(const _handle: variant; const _principal: string; const _password: string): boolean; begin end;
function php_kadm5_create_principal(const _handle: variant; const _principal: string; const _password: string; const _options: variant): boolean; begin end;
function php_kadm5_delete_principal(const _handle: variant; const _principal: string): boolean; begin end;
function php_kadm5_destroy(const _handle: variant): boolean; begin end;
function php_kadm5_flush(const _handle: variant): boolean; begin end;
function php_kadm5_get_policies(const _handle: variant): variant; begin end;
function php_kadm5_get_principal(const _handle: variant; const _principal: string): variant; begin end;
function php_kadm5_get_principals(const _handle: variant): variant; begin end;
function php_kadm5_init_with_password(const _admin_server: string; const _realm: string; const _principal: string; const _password: string): variant; begin end;
function php_kadm5_modify_principal(const _handle: variant; const _principal: string; const _options: variant): boolean; begin end;
function php_radius_acct_open(): variant; begin end;
function php_radius_add_server(const _radius_handle: variant; const _hostname: string; const _port: integer; const _secret: string; const _timeout: integer; const _max_tries: integer): boolean; begin end;
function php_radius_auth_open(): variant; begin end;
function php_radius_close(const _radius_handle: variant): boolean; begin end;
function php_radius_config(const _radius_handle: variant; const _file: string): boolean; begin end;
function php_radius_create_request(const _radius_handle: variant; const _type: integer): boolean; begin end;
function php_radius_cvt_addr(const _data: string): string; begin end;
function php_radius_cvt_int(const _data: string): integer; begin end;
function php_radius_cvt_string(const _data: string): string; begin end;
function php_radius_demangle_mppe_key(const _radius_handle: variant; const _mangled: string): string; begin end;
function php_radius_demangle(const _radius_handle: variant; const _mangled: string): string; begin end;
function php_radius_get_attr(const _radius_handle: variant): variant; begin end;
function php_radius_get_tagged_attr_data(const _data: string): string; begin end;
function php_radius_get_tagged_attr_tag(const _data: string): integer; begin end;
function php_radius_get_vendor_attr(const _data: string): variant; begin end;
function php_radius_put_addr(const _radius_handle: variant; const _type: integer; const _addr: string; const _options: integer; const _tag: integer): boolean; begin end;
function php_radius_put_attr(const _radius_handle: variant; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean; begin end;
function php_radius_put_int(const _radius_handle: variant; const _type: integer; const _value: integer; const _options: integer; const _tag: integer): boolean; begin end;
function php_radius_put_string(const _radius_handle: variant; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean; begin end;
function php_radius_put_vendor_addr(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _addr: string): boolean; begin end;
function php_radius_put_vendor_attr(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean; begin end;
function php_radius_put_vendor_int(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _value: integer; const _options: integer; const _tag: integer): boolean; begin end;
function php_radius_put_vendor_string(const _radius_handle: variant; const _vendor: integer; const _type: integer; const _value: string; const _options: integer; const _tag: integer): boolean; begin end;
function php_radius_request_authenticator(const _radius_handle: variant): string; begin end;
function php_radius_salt_encrypt_attr(const _radius_handle: variant; const _data: string): string; begin end;
function php_radius_send_request(const _radius_handle: variant): integer; begin end;
function php_radius_server_secret(const _radius_handle: variant): string; begin end;
function php_radius_strerror(const _radius_handle: variant): string; begin end;
function php_ncurses_addch(const _ch: integer): integer; begin end;
function php_ncurses_addchnstr(const _s: string; const _n: integer): integer; begin end;
function php_ncurses_addchstr(const _s: string): integer; begin end;
function php_ncurses_addnstr(const _s: string; const _n: integer): integer; begin end;
function php_ncurses_addstr(const _text: string): integer; begin end;
function php_ncurses_assume_default_colors(const _fg: integer; const _bg: integer): integer; begin end;
function php_ncurses_attroff(const _attributes: integer): integer; begin end;
function php_ncurses_attron(const _attributes: integer): integer; begin end;
function php_ncurses_attrset(const _attributes: integer): integer; begin end;
function php_ncurses_baudrate(): integer; begin end;
function php_ncurses_beep(): integer; begin end;
function php_ncurses_bkgd(const _attrchar: integer): integer; begin end;
procedure php_ncurses_bkgdset(const _attrchar: integer); begin end;
function php_ncurses_border(const _left: integer; const _right: integer; const _top: integer; const _bottom: integer; const _tl_corner: integer; const _tr_corner: integer; const _bl_corner: integer; const _br_corner: integer): integer; begin end;
function php_ncurses_bottom_panel(const _panel: variant): integer; begin end;
function php_ncurses_can_change_color(): boolean; begin end;
function php_ncurses_cbreak(): boolean; begin end;
function php_ncurses_clear(): boolean; begin end;
function php_ncurses_clrtobot(): boolean; begin end;
function php_ncurses_clrtoeol(): boolean; begin end;
function php_ncurses_color_content(const _color: integer; var _r: integer; var _g: integer; var _b: integer): integer; begin end;
function php_ncurses_color_set(const _pair: integer): integer; begin end;
function php_ncurses_curs_set(const _visibility: integer): integer; begin end;
function php_ncurses_def_prog_mode(): boolean; begin end;
function php_ncurses_def_shell_mode(): boolean; begin end;
function php_ncurses_define_key(const _definition: string; const _keycode: integer): integer; begin end;
function php_ncurses_del_panel(const _panel: variant): boolean; begin end;
function php_ncurses_delay_output(const _milliseconds: integer): integer; begin end;
function php_ncurses_delch(): boolean; begin end;
function php_ncurses_deleteln(): boolean; begin end;
function php_ncurses_delwin(const _window: variant): boolean; begin end;
function php_ncurses_doupdate(): boolean; begin end;
function php_ncurses_echo(): boolean; begin end;
function php_ncurses_echochar(const _character: integer): integer; begin end;
function php_ncurses_end(): integer; begin end;
function php_ncurses_erase(): boolean; begin end;
function php_ncurses_erasechar(): string; begin end;
procedure php_ncurses_filter(); begin end;
function php_ncurses_flash(): boolean; begin end;
function php_ncurses_flushinp(): boolean; begin end;
function php_ncurses_getch(): integer; begin end;
procedure php_ncurses_getmaxyx(const _window: variant; var _y: integer; var _x: integer); begin end;
function php_ncurses_getmouse(var _mevent: variant): boolean; begin end;
procedure php_ncurses_getyx(const _window: variant; var _y: integer; var _x: integer); begin end;
function php_ncurses_halfdelay(const _tenth: integer): integer; begin end;
function php_ncurses_has_colors(): boolean; begin end;
function php_ncurses_has_ic(): boolean; begin end;
function php_ncurses_has_il(): boolean; begin end;
function php_ncurses_has_key(const _keycode: integer): integer; begin end;
function php_ncurses_hide_panel(const _panel: variant): integer; begin end;
function php_ncurses_hline(const _charattr: integer; const _n: integer): integer; begin end;
function php_ncurses_inch(): string; begin end;
function php_ncurses_init_color(const _color: integer; const _r: integer; const _g: integer; const _b: integer): integer; begin end;
function php_ncurses_init_pair(const _pair: integer; const _fg: integer; const _bg: integer): integer; begin end;
procedure php_ncurses_init(); begin end;
function php_ncurses_insch(const _character: integer): integer; begin end;
function php_ncurses_insdelln(const _count: integer): integer; begin end;
function php_ncurses_insertln(): integer; begin end;
function php_ncurses_insstr(const _text: string): integer; begin end;
function php_ncurses_instr(var _buffer: string): integer; begin end;
function php_ncurses_isendwin(): boolean; begin end;
function php_ncurses_keyok(const _keycode: integer; const _enable: boolean): integer; begin end;
function php_ncurses_keypad(const _window: variant; const _bf: boolean): integer; begin end;
function php_ncurses_killchar(): string; begin end;
function php_ncurses_longname(): string; begin end;
function php_ncurses_meta(const _window: variant): integer; begin end;
function php_ncurses_mouse_trafo(var _y: integer; var _x: integer; const _toscreen: boolean): boolean; begin end;
function php_ncurses_mouseinterval(const _milliseconds: integer): integer; begin end;
function php_ncurses_mousemask(const _newmask: integer; var _oldmask: integer): integer; begin end;
function php_ncurses_move_panel(const _panel: variant; const _startx: integer; const _starty: integer): integer; begin end;
function php_ncurses_move(const _y: integer; const _x: integer): integer; begin end;
function php_ncurses_mvaddch(const _y: integer; const _x: integer; const _c: integer): integer; begin end;
function php_ncurses_mvaddchnstr(const _y: integer; const _x: integer; const _s: string; const _n: integer): integer; begin end;
function php_ncurses_mvaddchstr(const _y: integer; const _x: integer; const _s: string): integer; begin end;
function php_ncurses_mvaddnstr(const _y: integer; const _x: integer; const _s: string; const _n: integer): integer; begin end;
function php_ncurses_mvaddstr(const _y: integer; const _x: integer; const _s: string): integer; begin end;
function php_ncurses_mvcur(const _old_y: integer; const _old_x: integer; const _new_y: integer; const _new_x: integer): integer; begin end;
function php_ncurses_mvdelch(const _y: integer; const _x: integer): integer; begin end;
function php_ncurses_mvgetch(const _y: integer; const _x: integer): integer; begin end;
function php_ncurses_mvhline(const _y: integer; const _x: integer; const _attrchar: integer; const _n: integer): integer; begin end;
function php_ncurses_mvinch(const _y: integer; const _x: integer): integer; begin end;
function php_ncurses_mvvline(const _y: integer; const _x: integer; const _attrchar: integer; const _n: integer): integer; begin end;
function php_ncurses_mvwaddstr(const _window: variant; const _y: integer; const _x: integer; const _text: string): integer; begin end;
function php_ncurses_napms(const _milliseconds: integer): integer; begin end;
function php_ncurses_new_panel(const _window: variant): variant; begin end;
function php_ncurses_newpad(const _rows: integer; const _cols: integer): variant; begin end;
function php_ncurses_newwin(const _rows: integer; const _cols: integer; const _y: integer; const _x: integer): variant; begin end;
function php_ncurses_nl(): boolean; begin end;
function php_ncurses_nocbreak(): boolean; begin end;
function php_ncurses_noecho(): boolean; begin end;
function php_ncurses_nonl(): boolean; begin end;
procedure php_ncurses_noqiflush(); begin end;
function php_ncurses_noraw(): boolean; begin end;
function php_ncurses_pair_content(const _pair: integer; var _f: integer; var _b: integer): integer; begin end;
function php_ncurses_panel_above(const _panel: variant): variant; begin end;
function php_ncurses_panel_below(const _panel: variant): variant; begin end;
function php_ncurses_panel_window(const _panel: variant): variant; begin end;
function php_ncurses_pnoutrefresh(const _pad: variant; const _pminrow: integer; const _pmincol: integer; const _sminrow: integer; const _smincol: integer; const _smaxrow: integer; const _smaxcol: integer): integer; begin end;
function php_ncurses_prefresh(const _pad: variant; const _pminrow: integer; const _pmincol: integer; const _sminrow: integer; const _smincol: integer; const _smaxrow: integer; const _smaxcol: integer): integer; begin end;
function php_ncurses_putp(const _text: string): integer; begin end;
procedure php_ncurses_qiflush(); begin end;
function php_ncurses_raw(): boolean; begin end;
function php_ncurses_refresh(const _ch: integer): integer; begin end;
function php_ncurses_replace_panel(const _panel: variant; const _window: variant): integer; begin end;
function php_ncurses_reset_prog_mode(): integer; begin end;
function php_ncurses_reset_shell_mode(): integer; begin end;
function php_ncurses_resetty(): boolean; begin end;
function php_ncurses_savetty(): boolean; begin end;
function php_ncurses_scr_dump(const _filename: string): integer; begin end;
function php_ncurses_scr_init(const _filename: string): integer; begin end;
function php_ncurses_scr_restore(const _filename: string): integer; begin end;
function php_ncurses_scr_set(const _filename: string): integer; begin end;
function php_ncurses_scrl(const _count: integer): integer; begin end;
function php_ncurses_show_panel(const _panel: variant): integer; begin end;
function php_ncurses_slk_attr(): integer; begin end;
function php_ncurses_slk_attroff(const _intarg: integer): integer; begin end;
function php_ncurses_slk_attron(const _intarg: integer): integer; begin end;
function php_ncurses_slk_attrset(const _intarg: integer): integer; begin end;
function php_ncurses_slk_clear(): boolean; begin end;
function php_ncurses_slk_color(const _intarg: integer): integer; begin end;
function php_ncurses_slk_init(const _format: integer): boolean; begin end;
function php_ncurses_slk_noutrefresh(): boolean; begin end;
function php_ncurses_slk_refresh(): integer; begin end;
function php_ncurses_slk_restore(): integer; begin end;
function php_ncurses_slk_set(const _labelnr: integer; const _label: string; const _format: integer): boolean; begin end;
function php_ncurses_slk_touch(): integer; begin end;
function php_ncurses_standend(): integer; begin end;
function php_ncurses_standout(): integer; begin end;
function php_ncurses_start_color(): integer; begin end;
function php_ncurses_termattrs(): boolean; begin end;
function php_ncurses_termname(): string; begin end;
procedure php_ncurses_timeout(const _millisec: integer); begin end;
function php_ncurses_top_panel(const _panel: variant): integer; begin end;
function php_ncurses_typeahead(const _fd: integer): integer; begin end;
function php_ncurses_ungetch(const _keycode: integer): integer; begin end;
function php_ncurses_ungetmouse(const _mevent: variant): boolean; begin end;
procedure php_ncurses_update_panels(); begin end;
function php_ncurses_use_default_colors(): boolean; begin end;
procedure php_ncurses_use_env(const _flag: boolean); begin end;
function php_ncurses_use_extended_names(const _flag: boolean): integer; begin end;
function php_ncurses_vidattr(const _intarg: integer): integer; begin end;
function php_ncurses_vline(const _charattr: integer; const _n: integer): integer; begin end;
function php_ncurses_waddch(const _window: variant; const _ch: integer): integer; begin end;
function php_ncurses_waddstr(const _window: variant; const _str: string; const _n: integer): integer; begin end;
function php_ncurses_wattroff(const _window: variant; const _attrs: integer): integer; begin end;
function php_ncurses_wattron(const _window: variant; const _attrs: integer): integer; begin end;
function php_ncurses_wattrset(const _window: variant; const _attrs: integer): integer; begin end;
function php_ncurses_wborder(const _window: variant; const _left: integer; const _right: integer; const _top: integer; const _bottom: integer; const _tl_corner: integer; const _tr_corner: integer; const _bl_corner: integer; const _br_corner: integer): integer; begin end;
function php_ncurses_wclear(const _window: variant): integer; begin end;
function php_ncurses_wcolor_set(const _window: variant; const _color_pair: integer): integer; begin end;
function php_ncurses_werase(const _window: variant): integer; begin end;
function php_ncurses_wgetch(const _window: variant): integer; begin end;
function php_ncurses_whline(const _window: variant; const _charattr: integer; const _n: integer): integer; begin end;
function php_ncurses_wmouse_trafo(const _window: variant; var _y: integer; var _x: integer; const _toscreen: boolean): boolean; begin end;
function php_ncurses_wmove(const _window: variant; const _y: integer; const _x: integer): integer; begin end;
function php_ncurses_wnoutrefresh(const _window: variant): integer; begin end;
function php_ncurses_wrefresh(const _window: variant): integer; begin end;
function php_ncurses_wstandend(const _window: variant): integer; begin end;
function php_ncurses_wstandout(const _window: variant): integer; begin end;
function php_ncurses_wvline(const _window: variant; const _charattr: integer; const _n: integer): integer; begin end;
procedure php_newt_bell(); begin end;
function php_newt_button_bar(var _buttons: variant): variant; begin end;
function php_newt_button(const _left: integer; const _top: integer; const _text: string): variant; begin end;
function php_newt_centered_window(const _width: integer; const _height: integer; const _title: string): integer; begin end;
function php_newt_checkbox_get_value(const _checkbox: variant): string; begin end;
procedure php_newt_checkbox_set_flags(const _checkbox: variant; const _flags: integer; const _sense: integer); begin end;
procedure php_newt_checkbox_set_value(const _checkbox: variant; const _value: string); begin end;
procedure php_newt_checkbox_tree_add_item(const _checkboxtree: variant; const _text: string; const _data: variant; const _flags: integer; const _index: integer); begin end;
function php_newt_checkbox_tree_find_item(const _checkboxtree: variant; const _data: variant): variant; begin end;
function php_newt_checkbox_tree_get_current(const _checkboxtree: variant): variant; begin end;
function php_newt_checkbox_tree_get_entry_value(const _checkboxtree: variant; const _data: variant): string; begin end;
function php_newt_checkbox_tree_get_multi_selection(const _checkboxtree: variant; const _seqnum: string): variant; begin end;
function php_newt_checkbox_tree_get_selection(const _checkboxtree: variant): variant; begin end;
function php_newt_checkbox_tree_multi(const _left: integer; const _top: integer; const _height: integer; const _seq: string; const _flags: integer): variant; begin end;
procedure php_newt_checkbox_tree_set_current(const _checkboxtree: variant; const _data: variant); begin end;
procedure php_newt_checkbox_tree_set_entry_value(const _checkboxtree: variant; const _data: variant; const _value: string); begin end;
procedure php_newt_checkbox_tree_set_entry(const _checkboxtree: variant; const _data: variant; const _text: string); begin end;
procedure php_newt_checkbox_tree_set_width(const _checkbox_tree: variant; const _width: integer); begin end;
function php_newt_checkbox_tree(const _left: integer; const _top: integer; const _height: integer; const _flags: integer): variant; begin end;
function php_newt_checkbox(const _left: integer; const _top: integer; const _text: string; const _def_value: string; const _seq: string): variant; begin end;
procedure php_newt_clear_key_buffer(); begin end;
procedure php_newt_cls(); begin end;
function php_newt_compact_button(const _left: integer; const _top: integer; const _text: string): variant; begin end;
procedure php_newt_component_add_callback(const _component: variant; const _func_name: variant; const _data: variant); begin end;
procedure php_newt_component_takes_focus(const _component: variant; const _takes_focus: boolean); begin end;
function php_newt_create_grid(const _cols: integer; const _rows: integer): variant; begin end;
procedure php_newt_cursor_off(); begin end;
procedure php_newt_cursor_on(); begin end;
procedure php_newt_delay(const _microseconds: integer); begin end;
procedure php_newt_draw_form(const _form: variant); begin end;
procedure php_newt_draw_root_text(const _left: integer; const _top: integer; const _text: string); begin end;
function php_newt_entry_get_value(const _entry: variant): string; begin end;
procedure php_newt_entry_set_filter(const _entry: variant; const _filter: variant; const _data: variant); begin end;
procedure php_newt_entry_set_flags(const _entry: variant; const _flags: integer; const _sense: integer); begin end;
procedure php_newt_entry_set(const _entry: variant; const _value: string; const _cursor_at_end: boolean); begin end;
function php_newt_entry(const _left: integer; const _top: integer; const _width: integer; const _init_value: string; const _flags: integer): variant; begin end;
function php_newt_finished(): integer; begin end;
procedure php_newt_form_add_component(const _form: variant; const _component: variant); begin end;
procedure php_newt_form_add_components(const _form: variant; const _components: variant); begin end;
procedure php_newt_form_add_hot_key(const _form: variant; const _key: integer); begin end;
procedure php_newt_form_destroy(const _form: variant); begin end;
function php_newt_form_get_current(const _form: variant): variant; begin end;
procedure php_newt_form_run(const _form: variant; var _exit_struct: variant); begin end;
procedure php_newt_form_set_background(const _from: variant; const _background: integer); begin end;
procedure php_newt_form_set_height(const _form: variant; const _height: integer); begin end;
procedure php_newt_form_set_size(const _form: variant); begin end;
procedure php_newt_form_set_timer(const _form: variant; const _milliseconds: integer); begin end;
procedure php_newt_form_set_width(const _form: variant; const _width: integer); begin end;
procedure php_newt_form_watch_fd(const _form: variant; const _stream: variant; const _flags: integer); begin end;
function php_newt_form(const _vert_bar: variant; const _help: string; const _flags: integer): variant; begin end;
procedure php_newt_get_screen_size(var _cols: integer; var _rows: integer); begin end;
procedure php_newt_grid_add_components_to_form(const _grid: variant; const _form: variant; const _recurse: boolean); begin end;
function php_newt_grid_basic_window(const _text: variant; const _middle: variant; const _buttons: variant): variant; begin end;
procedure php_newt_grid_free(const _grid: variant; const _recurse: boolean); begin end;
procedure php_newt_grid_get_size(const _grid: variant; var _width: integer; var _height: integer); begin end;
function php_newt_grid_h_close_stacked(const _element1_type: integer; const _element1: variant): variant; begin end;
function php_newt_grid_h_stacked(const _element1_type: integer; const _element1: variant): variant; begin end;
procedure php_newt_grid_place(const _grid: variant; const _left: integer; const _top: integer); begin end;
procedure php_newt_grid_set_field(const _grid: variant; const _col: integer; const _row: integer; const _type: integer; const _val: variant; const _pad_left: integer; const _pad_top: integer; const _pad_right: integer; const _pad_bottom: integer; const _anchor: integer; const _flags: integer); begin end;
function php_newt_grid_simple_window(const _text: variant; const _middle: variant; const _buttons: variant): variant; begin end;
function php_newt_grid_v_close_stacked(const _element1_type: integer; const _element1: variant): variant; begin end;
function php_newt_grid_v_stacked(const _element1_type: integer; const _element1: variant): variant; begin end;
procedure php_newt_grid_wrapped_window_at(const _grid: variant; const _title: string; const _left: integer; const _top: integer); begin end;
procedure php_newt_grid_wrapped_window(const _grid: variant; const _title: string); begin end;
function php_newt_init(): integer; begin end;
procedure php_newt_label_set_text(const _label: variant; const _text: string); begin end;
function php_newt_label(const _left: integer; const _top: integer; const _text: string): variant; begin end;
procedure php_newt_listbox_append_entry(const _listbox: variant; const _text: string; const _data: variant); begin end;
procedure php_newt_listbox_clear_selection(const _listbox: variant); begin end;
procedure php_newt_listbox_clear(const _listobx: variant); begin end;
procedure php_newt_listbox_delete_entry(const _listbox: variant; const _key: variant); begin end;
function php_newt_listbox_get_current(const _listbox: variant): string; begin end;
function php_newt_listbox_get_selection(const _listbox: variant): variant; begin end;
procedure php_newt_listbox_insert_entry(const _listbox: variant; const _text: string; const _data: variant; const _key: variant); begin end;
function php_newt_listbox_item_count(const _listbox: variant): integer; begin end;
procedure php_newt_listbox_select_item(const _listbox: variant; const _key: variant; const _sense: integer); begin end;
procedure php_newt_listbox_set_current_by_key(const _listbox: variant; const _key: variant); begin end;
procedure php_newt_listbox_set_current(const _listbox: variant; const _num: integer); begin end;
procedure php_newt_listbox_set_data(const _listbox: variant; const _num: integer; const _data: variant); begin end;
procedure php_newt_listbox_set_entry(const _listbox: variant; const _num: integer; const _text: string); begin end;
procedure php_newt_listbox_set_width(const _listbox: variant; const _width: integer); begin end;
function php_newt_listbox(const _left: integer; const _top: integer; const _height: integer; const _flags: integer): variant; begin end;
function php_newt_listitem_get_data(const _item: variant): variant; begin end;
procedure php_newt_listitem_set(const _item: variant; const _text: string); begin end;
function php_newt_listitem(const _left: integer; const _top: integer; const _text: string; const _is_default: boolean; const _prev_item: variant; const _data: variant; const _flags: integer): variant; begin end;
function php_newt_open_window(const _left: integer; const _top: integer; const _width: integer; const _height: integer; const _title: string): integer; begin end;
procedure php_newt_pop_help_line(); begin end;
procedure php_newt_pop_window(); begin end;
procedure php_newt_push_help_line(const _text: string); begin end;
function php_newt_radio_get_current(const _set_member: variant): variant; begin end;
function php_newt_radiobutton(const _left: integer; const _top: integer; const _text: string; const _is_default: boolean; const _prev_button: variant): variant; begin end;
procedure php_newt_redraw_help_line(); begin end;
function php_newt_reflow_text(const _text: string; const _width: integer; const _flex_down: integer; const _flex_up: integer; var _actual_width: integer; var _actual_height: integer): string; begin end;
procedure php_newt_refresh(); begin end;
procedure php_newt_resize_screen(const _redraw: boolean); begin end;
procedure php_newt_resume(); begin end;
function php_newt_run_form(const _form: variant): variant; begin end;
procedure php_newt_scale_set(const _scale: variant; const _amount: integer); begin end;
function php_newt_scale(const _left: integer; const _top: integer; const _width: integer; const _full_value: integer): variant; begin end;
procedure php_newt_scrollbar_set(const _scrollbar: variant; const _where: integer; const _total: integer); begin end;
procedure php_newt_set_help_callback(const _function: variant); begin end;
procedure php_newt_set_suspend_callback(const _function: variant; const _data: variant); begin end;
procedure php_newt_suspend(); begin end;
function php_newt_textbox_get_num_lines(const _textbox: variant): integer; begin end;
function php_newt_textbox_reflowed(const _left: integer; const _top: integer; const _width: integer; const _flex_down: integer; const _flex_up: integer; const _flags: integer): variant; begin end;
procedure php_newt_textbox_set_height(const _textbox: variant; const _height: integer); begin end;
procedure php_newt_textbox_set_text(const _textbox: variant; const _text: string); begin end;
function php_newt_textbox(const _left: integer; const _top: integer; const _width: integer; const _height: integer; const _flags: integer): variant; begin end;
function php_newt_vertical_scrollbar(const _left: integer; const _top: integer; const _height: integer; const _normal_colorset: integer; const _thumb_colorset: integer): variant; begin end;
procedure php_newt_wait_for_key(); begin end;
function php_newt_win_choice(const _title: string; const _button1_text: string; const _button2_text: string; const _format: string; const _args: variant): integer; begin end;
function php_newt_win_entries(const _title: string; const _text: string; const _suggested_width: integer; const _flex_down: integer; const _flex_up: integer; const _data_width: integer; var _items: variant; const _button1: string): integer; begin end;
function php_newt_win_menu(const _title: string; const _text: string; const _suggestedWidth: integer; const _flexDown: integer; const _flexUp: integer; const _maxListHeight: integer; const _items: variant; var _listItem: integer; const _button1: string): integer; begin end;
procedure php_newt_win_message(const _title: string; const _button_text: string; const _format: string; const _args: variant); begin end;
procedure php_newt_win_messagev(const _title: string; const _button_text: string; const _format: string; const _args: variant); begin end;
function php_newt_win_ternary(const _title: string; const _button1_text: string; const _button2_text: string; const _button3_text: string; const _format: string; const _args: variant): integer; begin end;
function php_readline_add_history(const _line: string): boolean; begin end;
function php_readline_callback_handler_install(const _prompt: string; const _callback: variant): boolean; begin end;
function php_readline_callback_handler_remove(): boolean; begin end;
procedure php_readline_callback_read_char(); begin end;
function php_readline_clear_history(): boolean; begin end;
function php_readline_completion_function(const _function: variant): boolean; begin end;
function php_readline_info(const _varname: string; const _newvalue: string): variant; begin end;
function php_readline_list_history(): variant; begin end;
procedure php_readline_on_new_line(); begin end;
function php_readline_read_history(const _filename: string): boolean; begin end;
procedure php_readline_redisplay(); begin end;
function php_readline_write_history(const _filename: string): boolean; begin end;
function php_readline(const _prompt: string): string; begin end;
function php_bzclose(const _bz: variant): integer; begin end;
function php_bzcompress(const _source: string; const _blocksize: integer; const _workfactor: integer): variant; begin end;
function php_bzdecompress(const _source: string; const _small: integer): variant; begin end;
function php_bzerrno(const _bz: variant): integer; begin end;
function php_bzerror(const _bz: variant): variant; begin end;
function php_bzerrstr(const _bz: variant): string; begin end;
function php_bzflush(const _bz: variant): boolean; begin end;
function php_bzopen(const _file: variant; const _mode: string): variant; begin end;
function php_bzread(const _bz: variant; const _length: integer): string; begin end;
function php_bzwrite(const _bz: variant; const _data: string; const _length: integer): integer; begin end;
function php_lzf_compress(const _data: string): string; begin end;
function php_lzf_decompress(const _data: string): string; begin end;
function php_lzf_optimized_for(): integer; begin end;
procedure php_addEmptyDir(const _dirname: string); begin end;
procedure php_addFile(const _file: string; const _localname: string); begin end;
procedure php_addFromString(const _localname: string; const _contents: string); begin end;
function php_apiVersion(): string; begin end;
function php_buildFromDirectory(const _base_dir: string; const _regex: string): variant; begin end;
function php_buildFromIterator(const _iter: variant; const _base_directory: string): variant; begin end;
function php_canCompress(const _type: integer): boolean; begin end;
function php_canWrite(): boolean; begin end;
function php_compress(const _compression: integer; const _extension: string): variant; begin end;
function php_compressAllFilesBZIP2(): boolean; begin end;
function php_compressAllFilesGZ(): boolean; begin end;
procedure php_compressFiles(const _compression: integer); begin end;
function php_copy(const _oldfile: string; const _newfile: string): boolean; begin end;
function php_createDefaultStub(const _indexfile: string; const _webindexfile: string): string; begin end;
function php_decompress(const _extension: string): variant; begin end;
function php_decompressFiles(): boolean; begin end;
function php_delMetadata(): boolean; begin end;
function php_delete(const _entry: string): boolean; begin end;
function php_extractTo(const _pathto: string; const _files: variant; const _overwrite: boolean): boolean; begin end;
function php_getMetadata(): variant; begin end;
function php_getModified(): boolean; begin end;
function php_getSignature(): variant; begin end;
function php_getStub(): string; begin end;
function php_getSupportedCompression(): variant; begin end;
function php_getSupportedSignatures(): variant; begin end;
function php_getVersion(): string; begin end;
function php_hasMetadata(): boolean; begin end;
procedure php_interceptFileFuncs(); begin end;
function php_isBuffering(): boolean; begin end;
function php_isCompressed(): variant; begin end;
function php_isFileFormat(const _format: integer): boolean; begin end;
function php_isValidPharFilename(const _filename: string; const _executable: boolean): boolean; begin end;
function php_isWritable(): boolean; begin end;
function php_loadPhar(const _filename: string; const _alias: string): boolean; begin end;
function php_mapPhar(const _alias: string; const _dataoffset: integer): boolean; begin end;
procedure php_mount(const _pharpath: string; const _externalpath: string); begin end;
procedure php_mungServer(const _munglist: variant); begin end;
function php_offsetExists(const _offset: string): boolean; begin end;
function php_offsetGet(const _offset: string): integer; begin end;
procedure php_offsetSet(const _offset: string; const _value: string); begin end;
function php_offsetUnset(const _offset: string): boolean; begin end;
function php_running(const _retphar: boolean): string; begin end;
function php_setAlias(const _alias: string): boolean; begin end;
function php_setDefaultStub(const _index: string; const _webindex: string): boolean; begin end;
procedure php_setMetadata(const _metadata: variant); begin end;
procedure php_setSignatureAlgorithm(const _sigtype: integer; const _privatekey: string); begin end;
function php_setStub(const _stub: string; const _len: integer): boolean; begin end;
procedure php_startBuffering(); begin end;
procedure php_stopBuffering(); begin end;
function php_uncompressAllFiles(): boolean; begin end;
function php_unlinkArchive(const _archive: string): boolean; begin end;
procedure php_webPhar(const _alias: string; const _index: string; const _f404: string; const _mimetypes: variant; const _rewrites: variant); begin end;
procedure php_chmod(const _permissions: integer); begin end;
function php_compress(const _compression: integer): boolean; begin end;
function php_decompress(): boolean; begin end;
function php_getCRC32(): integer; begin end;
function php_getCompressedSize(): integer; begin end;
function php_getPharFlags(): integer; begin end;
function php_isCRCChecked(): boolean; begin end;
function php_isCompressed(const _compression_type: integer): boolean; begin end;
function php_isCompressedBZIP2(): boolean; begin end;
function php_isCompressedGZ(): boolean; begin end;
function php_setCompressedBZIP2(): boolean; begin end;
function php_setCompressedGZ(): boolean; begin end;
function php_setUncompressed(): boolean; begin end;
function php_rar_wrapper_cache_stats(): string; begin end;
function php_close(): boolean; begin end;
function php_getEntries(): variant; begin end;
function php_isBroken(): boolean; begin end;
function php_isSolid(): boolean; begin end;
function php_setAllowBroken(const _allow_broken: boolean): boolean; begin end;
function php_rar_close(const _rarfile: variant): boolean; begin end;
function php_rar_comment_get(const _rarfile: variant): string; begin end;
function php_rar_list(const _rarfile: variant): variant; begin end;
function php_rar_broken_is(const _rarfile: variant): boolean; begin end;
function php_rar_solid_is(const _rarfile: variant): boolean; begin end;
function php_rar_allow_broken_set(const _rarfile: variant; const _allow_broken: boolean): boolean; begin end;
function php_extract(const _dir: string; const _filepath: string; const _password: string; const _extended_data: boolean): boolean; begin end;
function php_getAttr(): integer; begin end;
function php_getCrc(): string; begin end;
function php_getFileTime(): string; begin end;
function php_getHostOs(): integer; begin end;
function php_getMethod(): integer; begin end;
function php_getName(): string; begin end;
function php_getPackedSize(): integer; begin end;
function php_getStream(const _password: string): variant; begin end;
function php_getUnpackedSize(): integer; begin end;
function php_isDirectory(): boolean; begin end;
function php_isEncrypted(): boolean; begin end;
function php_isUsingExceptions(): boolean; begin end;
procedure php_setUsingExceptions(const _using_exceptions: boolean); begin end;
function php_addFile(const _filename: string; const _localname: string; const _start: integer; const _length: integer): boolean; begin end;
function php_addGlob(const _pattern: string; const _flags: integer; const _options: variant): boolean; begin end;
function php_addPattern(const _pattern: string; const _path: string; const _options: variant): boolean; begin end;
function php_deleteIndex(const _index: integer): boolean; begin end;
function php_deleteName(const _name: string): boolean; begin end;
function php_extractTo(const _destination: string; const _entries: variant): boolean; begin end;
function php_getArchiveComment(const _flags: integer): string; begin end;
function php_getCommentIndex(const _index: integer; const _flags: integer): string; begin end;
function php_getCommentName(const _name: string; const _flags: integer): string; begin end;
function php_GetExternalAttributesIndex(const _index: integer; var _opsys: integer; var _attr: integer; const _flags: integer): boolean; begin end;
function php_getExternalAttributesName(const _name: string; var _opsys: integer; var _attr: integer; const _flags: integer): boolean; begin end;
function php_getFromIndex(const _index: integer; const _length: integer; const _flags: integer): string; begin end;
function php_getFromName(const _name: string; const _length: integer; const _flags: integer): string; begin end;
function php_getNameIndex(const _index: integer; const _flags: integer): string; begin end;
function php_getStatusString(): string; begin end;
function php_locateName(const _name: string; const _flags: integer): integer; begin end;
function php_open(const _filename: string; const _flags: integer): variant; begin end;
function php_renameIndex(const _index: integer; const _newname: string): boolean; begin end;
function php_renameName(const _name: string; const _newname: string): boolean; begin end;
function php_setArchiveComment(const _comment: string): boolean; begin end;
function php_setCommentIndex(const _index: integer; const _comment: string): boolean; begin end;
function php_setCommentName(const _name: string; const _comment: string): boolean; begin end;
function php_setCompressionIndex(const _index: integer; const _comp_method: integer; const _comp_flags: integer): boolean; begin end;
function php_setCompressionName(const _name: string; const _comp_method: integer; const _comp_flags: integer): boolean; begin end;
function php_setExternalAttributesIndex(const _index: integer; const _opsys: integer; const _attr: integer; const _flags: integer): boolean; begin end;
function php_setExternalAttributesName(const _name: string; const _opsys: integer; const _attr: integer; const _flags: integer): boolean; begin end;
function php_setPassword(const _password: string): boolean; begin end;
function php_statIndex(const _index: integer; const _flags: integer): variant; begin end;
function php_statName(const _name: string; const _flags: integer): variant; begin end;
function php_unchangeAll(): boolean; begin end;
function php_unchangeArchive(): boolean; begin end;
function php_unchangeIndex(const _index: integer): boolean; begin end;
function php_unchangeName(const _name: string): boolean; begin end;
procedure php_zip_close(const _zip: variant); begin end;
function php_zip_entry_close(const _zip_entry: variant): boolean; begin end;
function php_zip_entry_compressedsize(const _zip_entry: variant): integer; begin end;
function php_zip_entry_compressionmethod(const _zip_entry: variant): string; begin end;
function php_zip_entry_filesize(const _zip_entry: variant): integer; begin end;
function php_zip_entry_name(const _zip_entry: variant): string; begin end;
function php_zip_entry_open(const _zip: variant; const _zip_entry: variant; const _mode: string): boolean; begin end;
function php_zip_entry_read(const _zip_entry: variant; const _length: integer): string; begin end;
function php_zip_open(const _filename: string): variant; begin end;
function php_zip_read(const _zip: variant): variant; begin end;
function php_gzclose(const _zp: variant): boolean; begin end;
function php_gzcompress(const _data: string; const _level: integer; const _encoding: integer): string; begin end;
function php_gzdecode(const _data: string; const _length: integer): string; begin end;
function php_gzdeflate(const _data: string; const _level: integer; const _encoding: integer): string; begin end;
function php_gzencode(const _data: string; const _level: integer; const _encoding_mode: integer): string; begin end;
function php_gzeof(const _zp: variant): integer; begin end;
function php_gzfile(const _filename: string; const _use_include_path: integer): variant; begin end;
function php_gzgetc(const _zp: variant): string; begin end;
function php_gzgets(const _zp: variant; const _length: integer): string; begin end;
function php_gzgetss(const _zp: variant; const _length: integer; const _allowable_tags: string): string; begin end;
function php_gzinflate(const _data: string; const _length: integer): string; begin end;
function php_gzopen(const _filename: string; const _mode: string; const _use_include_path: integer): variant; begin end;
function php_gzpassthru(const _zp: variant): integer; begin end;
function php_gzread(const _zp: variant; const _length: integer): string; begin end;
function php_gzrewind(const _zp: variant): boolean; begin end;
function php_gzseek(const _zp: variant; const _offset: integer; const _whence: integer): integer; begin end;
function php_gztell(const _zp: variant): integer; begin end;
function php_gzuncompress(const _data: string; const _length: integer): string; begin end;
function php_gzwrite(const _zp: variant; const _string: string; const _length: integer): integer; begin end;
function php_readgzfile(const _filename: string; const _use_include_path: integer): integer; begin end;
function php_zlib_decode(const _data: string; const _max_decoded_len: string): string; begin end;
function php_zlib_encode(const _data: string; const _encoding: string; const _level: string): string; begin end;
function php_zlib_get_coding_type(): string; begin end;
function php_m_checkstatus(const _conn: variant; const _identifier: integer): integer; begin end;
function php_m_completeauthorizations(const _conn: variant; var _array: integer): integer; begin end;
function php_m_connect(const _conn: variant): integer; begin end;
function php_m_connectionerror(const _conn: variant): string; begin end;
function php_m_deletetrans(const _conn: variant; const _identifier: integer): boolean; begin end;
function php_m_destroyconn(const _conn: variant): boolean; begin end;
procedure php_m_destroyengine(); begin end;
function php_m_getcell(const _conn: variant; const _identifier: integer; const _column: string; const _row: integer): string; begin end;
function php_m_getcellbynum(const _conn: variant; const _identifier: integer; const _column: integer; const _row: integer): string; begin end;
function php_m_getcommadelimited(const _conn: variant; const _identifier: integer): string; begin end;
function php_m_getheader(const _conn: variant; const _identifier: integer; const _column_num: integer): string; begin end;
function php_m_initconn(): variant; begin end;
function php_m_initengine(const _location: string): integer; begin end;
function php_m_iscommadelimited(const _conn: variant; const _identifier: integer): integer; begin end;
function php_m_maxconntimeout(const _conn: variant; const _secs: integer): boolean; begin end;
function php_m_monitor(const _conn: variant): integer; begin end;
function php_m_numcolumns(const _conn: variant; const _identifier: integer): integer; begin end;
function php_m_numrows(const _conn: variant; const _identifier: integer): integer; begin end;
function php_m_parsecommadelimited(const _conn: variant; const _identifier: integer): integer; begin end;
function php_m_responsekeys(const _conn: variant; const _identifier: integer): variant; begin end;
function php_m_responseparam(const _conn: variant; const _identifier: integer; const _key: string): string; begin end;
function php_m_returnstatus(const _conn: variant; const _identifier: integer): integer; begin end;
function php_m_setblocking(const _conn: variant; const _tf: integer): integer; begin end;
function php_m_setdropfile(const _conn: variant; const _directory: string): integer; begin end;
function php_m_setip(const _conn: variant; const _host: string; const _port: integer): integer; begin end;
function php_m_setssl_cafile(const _conn: variant; const _cafile: string): integer; begin end;
function php_m_setssl_files(const _conn: variant; const _sslkeyfile: string; const _sslcertfile: string): integer; begin end;
function php_m_setssl(const _conn: variant; const _host: string; const _port: integer): integer; begin end;
function php_m_settimeout(const _conn: variant; const _seconds: integer): integer; begin end;
function php_m_sslcert_gen_hash(const _filename: string): string; begin end;
function php_m_transactionssent(const _conn: variant): integer; begin end;
function php_m_transinqueue(const _conn: variant): integer; begin end;
function php_m_transkeyval(const _conn: variant; const _identifier: integer; const _key: string; const _value: string): integer; begin end;
function php_m_transnew(const _conn: variant): integer; begin end;
function php_m_transsend(const _conn: variant; const _identifier: integer): integer; begin end;
function php_m_uwait(const _microsecs: integer): integer; begin end;
function php_m_validateidentifier(const _conn: variant; const _tf: integer): integer; begin end;
function php_m_verifyconnection(const _conn: variant; const _tf: integer): boolean; begin end;
function php_m_verifysslcert(const _conn: variant; const _tf: integer): boolean; begin end;
function php_calcul_hmac(const _clent: string; const _siretcode: string; const _price: string; const _reference: string; const _validity: string; const _taxation: string; const _devise: string; const _language: string): string; begin end;
function php_calculhmac(const _clent: string; const _data: string): string; begin end;
function php_nthmac(const _clent: string; const _data: string): string; begin end;
function php_crack_check(const _dictionary: variant; const _password: string): boolean; begin end;
function php_crack_check(const _password: string; const _username: string; const _gecos: string; const _dictionary: variant): boolean; begin end;
function php_crack_closedict(const _dictionary: variant): boolean; begin end;
function php_crack_getlastmessage(): string; begin end;
function php_crack_opendict(const _dictionary: string): variant; begin end;
function php_random_bytes(const _length: integer): string; begin end;
function php_random_int(const _min: integer; const _max: integer): integer; begin end;
function php_hash_algos(): variant; begin end;
function php_hash_copy(const _context: variant): variant; begin end;
function php_hash_equals(const _known_string: string; const _user_string: string): boolean; begin end;
function php_hash_file(const _algo: string; const _filename: string; const _raw_output: boolean): string; begin end;
function php_hash_final(const _context: variant; const _raw_output: boolean): string; begin end;
function php_hash_hmac_file(const _algo: string; const _filename: string; const _key: string; const _raw_output: boolean): string; begin end;
function php_hash_hmac(const _algo: string; const _data: string; const _key: string; const _raw_output: boolean): string; begin end;
function php_hash_init(const _algo: string; const _options: integer; const _key: string): variant; begin end;
function php_hash_pbkdf2(const _algo: string; const _password: string; const _salt: string; const _iterations: integer; const _length: integer; const _raw_output: boolean): string; begin end;
function php_hash_update_file(const _hcontext: variant; const _filename: string; const _scontext: variant): boolean; begin end;
function php_hash_update_stream(const _context: variant; const _handle: variant; const _length: integer): integer; begin end;
function php_hash_update(const _context: variant; const _data: string): boolean; begin end;
function php_hash(const _algo: string; const _data: string; const _raw_output: boolean): string; begin end;
function php_mcrypt_cbc(const _cipher: integer; const _key: string; const _data: string; const _mode: integer; const _iv: string): string; begin end;
function php_mcrypt_cbc(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string; begin end;
function php_mcrypt_cfb(const _cipher: integer; const _key: string; const _data: string; const _mode: integer; const _iv: string): string; begin end;
function php_mcrypt_cfb(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string; begin end;
function php_mcrypt_create_iv(const _size: integer; const _source: integer): string; begin end;
function php_mcrypt_decrypt(const _cipher: string; const _key: string; const _data: string; const _mode: string; const _iv: string): string; begin end;
function php_mcrypt_ecb(const _cipher: integer; const _key: string; const _data: string; const _mode: integer): string; begin end;
function php_mcrypt_ecb(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string; begin end;
function php_mcrypt_enc_get_algorithms_name(const _td: variant): string; begin end;
function php_mcrypt_enc_get_block_size(const _td: variant): integer; begin end;
function php_mcrypt_enc_get_iv_size(const _td: variant): integer; begin end;
function php_mcrypt_enc_get_key_size(const _td: variant): integer; begin end;
function php_mcrypt_enc_get_modes_name(const _td: variant): string; begin end;
function php_mcrypt_enc_get_supported_key_sizes(const _td: variant): variant; begin end;
function php_mcrypt_enc_is_block_algorithm_mode(const _td: variant): boolean; begin end;
function php_mcrypt_enc_is_block_algorithm(const _td: variant): boolean; begin end;
function php_mcrypt_enc_is_block_mode(const _td: variant): boolean; begin end;
function php_mcrypt_enc_self_test(const _td: variant): integer; begin end;
function php_mcrypt_encrypt(const _cipher: string; const _key: string; const _data: string; const _mode: string; const _iv: string): string; begin end;
function php_mcrypt_generic_deinit(const _td: variant): boolean; begin end;
function php_mcrypt_generic_end(const _td: variant): boolean; begin end;
function php_mcrypt_generic_init(const _td: variant; const _key: string; const _iv: string): integer; begin end;
function php_mcrypt_generic(const _td: variant; const _data: string): string; begin end;
function php_mcrypt_get_block_size(const _cipher: integer): integer; begin end;
function php_mcrypt_get_block_size(const _cipher: string; const _mode: string): integer; begin end;
function php_mcrypt_get_cipher_name(const _cipher: integer): string; begin end;
function php_mcrypt_get_cipher_name(const _cipher: string): string; begin end;
function php_mcrypt_get_iv_size(const _cipher: string; const _mode: string): integer; begin end;
function php_mcrypt_get_key_size(const _cipher: integer): integer; begin end;
function php_mcrypt_get_key_size(const _cipher: string; const _mode: string): integer; begin end;
function php_mcrypt_list_algorithms(const _lib_dir: string): variant; begin end;
function php_mcrypt_list_modes(const _lib_dir: string): variant; begin end;
function php_mcrypt_module_close(const _td: variant): boolean; begin end;
function php_mcrypt_module_get_algo_block_size(const _algorithm: string; const _lib_dir: string): integer; begin end;
function php_mcrypt_module_get_algo_key_size(const _algorithm: string; const _lib_dir: string): integer; begin end;
function php_mcrypt_module_get_supported_key_sizes(const _algorithm: string; const _lib_dir: string): variant; begin end;
function php_mcrypt_module_is_block_algorithm_mode(const _mode: string; const _lib_dir: string): boolean; begin end;
function php_mcrypt_module_is_block_algorithm(const _algorithm: string; const _lib_dir: string): boolean; begin end;
function php_mcrypt_module_is_block_mode(const _mode: string; const _lib_dir: string): boolean; begin end;
function php_mcrypt_module_open(const _algorithm: string; const _algorithm_directory: string; const _mode: string; const _mode_directory: string): variant; begin end;
function php_mcrypt_module_self_test(const _algorithm: string; const _lib_dir: string): boolean; begin end;
function php_mcrypt_ofb(const _cipher: integer; const _key: string; const _data: string; const _mode: integer; const _iv: string): string; begin end;
function php_mcrypt_ofb(const _cipher: string; const _key: string; const _data: string; const _mode: integer; const _iv: string): string; begin end;
function php_mdecrypt_generic(const _td: variant; const _data: string): string; begin end;
function php_mhash_count(): integer; begin end;
function php_mhash_get_block_size(const _hash: integer): integer; begin end;
function php_mhash_get_hash_name(const _hash: integer): string; begin end;
function php_mhash_keygen_s2k(const _hash: integer; const _password: string; const _salt: string; const _bytes: integer): string; begin end;
function php_mhash(const _hash: integer; const _data: string; const _key: string): string; begin end;
function php_openssl_cipher_iv_length(const _method: string): integer; begin end;
function php_openssl_csr_export_to_file(const _csr: variant; const _outfilename: string; const _notext: boolean): boolean; begin end;
function php_openssl_csr_export(const _csr: variant; var _out: string; const _notext: boolean): boolean; begin end;
function php_openssl_csr_get_public_key(const _csr: variant; const _use_shortnames: boolean): variant; begin end;
function php_openssl_csr_get_subject(const _csr: variant; const _use_shortnames: boolean): variant; begin end;
function php_openssl_csr_new(const _dn: variant; var _privkey: variant; const _configargs: variant; const _extraattribs: variant): variant; begin end;
function php_openssl_csr_sign(const _csr: variant; const _cacert: variant; const _priv_key: variant; const _days: integer; const _configargs: variant; const _serial: integer): variant; begin end;
function php_openssl_decrypt(const _data: string; const _method: string; const _password: string; const _options: integer; const _iv: string): string; begin end;
function php_openssl_dh_compute_key(const _pub_key: string; const _dh_key: variant): string; begin end;
function php_openssl_digest(const _data: string; const _method: string; const _raw_output: boolean): string; begin end;
function php_openssl_encrypt(const _data: string; const _method: string; const _password: string; const _options: integer; const _iv: string): string; begin end;
function php_openssl_error_string(): string; begin end;
procedure php_openssl_free_key(const _key_identifier: variant); begin end;
function php_openssl_get_cert_locations(): variant; begin end;
function php_openssl_get_cipher_methods(const _aliases: boolean): variant; begin end;
function php_openssl_get_md_methods(const _aliases: boolean): variant; begin end;
function php_openssl_open(const _sealed_data: string; var _open_data: string; const _env_key: string; const _priv_key_id: variant; const _method: string): boolean; begin end;
function php_openssl_pbkdf2(const _password: string; const _salt: string; const _key_length: integer; const _iterations: integer; const _digest_algorithm: string): string; begin end;
function php_openssl_pkcs12_export_to_file(const _x509: variant; const _filename: string; const _priv_key: variant; const _pass: string; const _args: variant): boolean; begin end;
function php_openssl_pkcs12_export(const _x509: variant; var _out: string; const _priv_key: variant; const _pass: string; const _args: variant): boolean; begin end;
function php_openssl_pkcs12_read(const _pkcs12: string; var _certs: variant; const _pass: string): boolean; begin end;
function php_openssl_pkcs7_decrypt(const _infilename: string; const _outfilename: string; const _recipcert: variant; const _recipkey: variant): boolean; begin end;
function php_openssl_pkcs7_encrypt(const _infile: string; const _outfile: string; const _recipcerts: variant; const _headers: variant; const _flags: integer; const _cipherid: integer): boolean; begin end;
function php_openssl_pkcs7_sign(const _infilename: string; const _outfilename: string; const _signcert: variant; const _privkey: variant; const _headers: variant; const _flags: integer; const _extracerts: string): boolean; begin end;
function php_openssl_pkcs7_verify(const _filename: string; const _flags: integer; const _outfilename: string; const _cainfo: variant; const _extracerts: string; const _content: string): variant; begin end;
function php_openssl_pkey_export_to_file(const _key: variant; const _outfilename: string; const _passphrase: string; const _configargs: variant): boolean; begin end;
function php_openssl_pkey_export(const _key: variant; var _out: string; const _passphrase: string; const _configargs: variant): boolean; begin end;
procedure php_openssl_pkey_free(const _key: variant); begin end;
function php_openssl_pkey_get_details(const _key: variant): variant; begin end;
function php_openssl_pkey_get_private(const _key: variant; const _passphrase: string): variant; begin end;
function php_openssl_pkey_get_public(const _certificate: variant): variant; begin end;
function php_openssl_pkey_new(const _configargs: variant): variant; begin end;
function php_openssl_private_decrypt(const _data: string; var _decrypted: string; const _key: variant; const _padding: integer): boolean; begin end;
function php_openssl_private_encrypt(const _data: string; var _crypted: string; const _key: variant; const _padding: integer): boolean; begin end;
function php_openssl_public_decrypt(const _data: string; var _decrypted: string; const _key: variant; const _padding: integer): boolean; begin end;
function php_openssl_public_encrypt(const _data: string; var _crypted: string; const _key: variant; const _padding: integer): boolean; begin end;
function php_openssl_random_pseudo_bytes(const _length: integer; var _crypto_strong: boolean): string; begin end;
function php_openssl_seal(const _data: string; var _sealed_data: string; var _env_keys: variant; const _pub_key_ids: variant; const _method: string): integer; begin end;
function php_openssl_sign(const _data: string; var _signature: string; const _priv_key_id: variant; const _signature_alg: variant): boolean; begin end;
function php_openssl_spki_export_challenge(var _spkac: string): string; begin end;
function php_openssl_spki_export(var _spkac: string): string; begin end;
function php_openssl_spki_new(var _privkey: variant; var _challenge: string; const _algorithm: integer): string; begin end;
function php_openssl_spki_verify(var _spkac: string): string; begin end;
function php_openssl_verify(const _data: string; const _signature: string; const _pub_key_id: variant; const _signature_alg: variant): integer; begin end;
function php_openssl_x509_check_private_key(const _cert: variant; const _key: variant): boolean; begin end;
function php_openssl_x509_checkpurpose(const _x509cert: variant; const _purpose: integer; const _cainfo: variant): integer; begin end;
function php_openssl_x509_export_to_file(const _x509: variant; const _outfilename: string; const _notext: boolean): boolean; begin end;
function php_openssl_x509_export(const _x509: variant; var _output: string; const _notext: boolean): boolean; begin end;
function php_openssl_x509_fingerprint(const _x509: variant; const _hash_algorithm: string; const _raw_output: boolean): boolean; begin end;
procedure php_openssl_x509_free(const _x509cert: variant); begin end;
function php_openssl_x509_parse(const _x509cert: variant; const _shortnames: boolean): variant; begin end;
function php_openssl_x509_read(const _x509certdata: variant): variant; begin end;
function php_password_get_info(const _hash: string): variant; begin end;
function php_password_hash(const _password: string; const _algo: integer; const _options: variant): string; begin end;
function php_password_needs_rehash(const _hash: string; const _algo: integer; const _options: variant): boolean; begin end;
function php_password_verify(const _password: string; const _hash: string): boolean; begin end;
procedure php_dba_close(const _handle: variant); begin end;
function php_dba_delete(const _key: string; const _handle: variant): boolean; begin end;
function php_dba_exists(const _key: string; const _handle: variant): boolean; begin end;
function php_dba_fetch(const _key: string; const _handle: variant): string; begin end;
function php_dba_fetch(const _key: string; const _skip: integer; const _handle: variant): string; begin end;
function php_dba_firstkey(const _handle: variant): string; begin end;
function php_dba_handlers(const _full_info: boolean): variant; begin end;
function php_dba_insert(const _key: string; const _value: string; const _handle: variant): boolean; begin end;
function php_dba_key_split(const _key: variant): variant; begin end;
function php_dba_list(): variant; begin end;
function php_dba_nextkey(const _handle: variant): string; begin end;
function php_dba_open(const _path: string; const _mode: string; const _handler: string): variant; begin end;
function php_dba_optimize(const _handle: variant): boolean; begin end;
function php_dba_popen(const _path: string; const _mode: string; const _handler: string): variant; begin end;
function php_dba_replace(const _key: string; const _value: string; const _handle: variant): boolean; begin end;
function php_dba_sync(const _handle: variant): boolean; begin end;
function php_dbx_close(const _link_identifier: variant): integer; begin end;
function php_dbx_compare(const _row_a: variant; const _row_b: variant; const _column_key: string; const _flags: integer): integer; begin end;
function php_dbx_connect(const _module: variant; const _host: string; const _database: string; const _username: string; const _password: string; const _persistent: integer): variant; begin end;
function php_dbx_error(const _link_identifier: variant): string; begin end;
function php_dbx_escape_string(const _link_identifier: variant; const _text: string): string; begin end;
function php_dbx_fetch_row(const _result_identifier: variant): variant; begin end;
function php_dbx_query(const _link_identifier: variant; const _sql_statement: string; const _flags: integer): variant; begin end;
function php_dbx_sort(const _result: variant; const _user_compare_function: string): boolean; begin end;
function php_odbc_autocommit(const _connection_id: variant; const _OnOff: boolean): variant; begin end;
function php_odbc_binmode(const _result_id: variant; const _mode: integer): boolean; begin end;
procedure php_odbc_close_all(); begin end;
procedure php_odbc_close(const _connection_id: variant); begin end;
function php_odbc_columnprivileges(const _connection_id: variant; const _qualifier: string; const _owner: string; const _table_name: string; const _column_name: string): variant; begin end;
function php_odbc_columns(const _connection_id: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _column_name: string): variant; begin end;
function php_odbc_commit(const _connection_id: variant): boolean; begin end;
function php_odbc_connect(const _dsn: string; const _user: string; const _password: string; const _cursor_type: integer): variant; begin end;
function php_odbc_cursor(const _result_id: variant): string; begin end;
function php_odbc_data_source(const _connection_id: variant; const _fetch_type: integer): variant; begin end;
function php_odbc_error(const _connection_id: variant): string; begin end;
function php_odbc_errormsg(const _connection_id: variant): string; begin end;
function php_odbc_exec(const _connection_id: variant; const _query_string: string; const _flags: integer): variant; begin end;
function php_odbc_execute(const _result_id: variant; const _parameters_array: variant): boolean; begin end;
function php_odbc_fetch_array(const _result: variant; const _rownumber: integer): variant; begin end;
function php_odbc_fetch_into(const _result_id: variant; var _result_array: variant; const _rownumber: integer): integer; begin end;
function php_odbc_fetch_object(const _result: variant; const _rownumber: integer): variant; begin end;
function php_odbc_fetch_row(const _result_id: variant; const _row_number: integer): boolean; begin end;
function php_odbc_field_len(const _result_id: variant; const _field_number: integer): integer; begin end;
function php_odbc_field_name(const _result_id: variant; const _field_number: integer): string; begin end;
function php_odbc_field_num(const _result_id: variant; const _field_name: string): integer; begin end;
function php_odbc_field_scale(const _result_id: variant; const _field_number: integer): integer; begin end;
function php_odbc_field_type(const _result_id: variant; const _field_number: integer): string; begin end;
function php_odbc_foreignkeys(const _connection_id: variant; const _pk_qualifier: string; const _pk_owner: string; const _pk_table: string; const _fk_qualifier: string; const _fk_owner: string; const _fk_table: string): variant; begin end;
function php_odbc_free_result(const _result_id: variant): boolean; begin end;
function php_odbc_gettypeinfo(const _connection_id: variant; const _data_type: integer): variant; begin end;
function php_odbc_longreadlen(const _result_id: variant; const _length: integer): boolean; begin end;
function php_odbc_next_result(const _result_id: variant): boolean; begin end;
function php_odbc_num_fields(const _result_id: variant): integer; begin end;
function php_odbc_num_rows(const _result_id: variant): integer; begin end;
function php_odbc_pconnect(const _dsn: string; const _user: string; const _password: string; const _cursor_type: integer): variant; begin end;
function php_odbc_prepare(const _connection_id: variant; const _query_string: string): variant; begin end;
function php_odbc_primarykeys(const _connection_id: variant; const _qualifier: string; const _owner: string; const _table: string): variant; begin end;
function php_odbc_procedurecolumns(const _connection_id: variant): variant; begin end;
function php_odbc_procedurecolumns(const _connection_id: variant; const _qualifier: string; const _owner: string; const _proc: string; const _column: string): variant; begin end;
function php_odbc_procedures(const _connection_id: variant): variant; begin end;
function php_odbc_procedures(const _connection_id: variant; const _qualifier: string; const _owner: string; const _name: string): variant; begin end;
function php_odbc_result_all(const _result_id: variant; const _format: string): integer; begin end;
function php_odbc_result(const _result_id: variant; const _field: variant): variant; begin end;
function php_odbc_rollback(const _connection_id: variant): boolean; begin end;
function php_odbc_setoption(const _id: variant; const _function: integer; const _option: integer; const _param: integer): boolean; begin end;
function php_odbc_specialcolumns(const _connection_id: variant; const _type: integer; const _qualifier: string; const _owner: string; const _table: string; const _scope: integer; const _nullable: integer): variant; begin end;
function php_odbc_statistics(const _connection_id: variant; const _qualifier: string; const _owner: string; const _table_name: string; const _unique: integer; const _accuracy: integer): variant; begin end;
function php_odbc_tableprivileges(const _connection_id: variant; const _qualifier: string; const _owner: string; const _name: string): variant; begin end;
function php_odbc_tables(const _connection_id: variant; const _qualifier: string; const _owner: string; const _name: string; const _types: string): variant; begin end;
function php_beginTransaction(): boolean; begin end;
function php_commit(): boolean; begin end;
function php_errorCode(): variant; begin end;
function php_errorInfo(): variant; begin end;
function php_exec(const _statement: string): integer; begin end;
function php_getAttribute(const _attribute: integer): variant; begin end;
function php_getAvailableDrivers(): variant; begin end;
function php_inTransaction(): boolean; begin end;
function php_lastInsertId(const _name: string): string; begin end;
function php_quote(const _string: string; const _parameter_type: integer): string; begin end;
function php_rollBack(): boolean; begin end;
function php_setAttribute(const _attribute: integer; const _value: variant): boolean; begin end;
function php_pdo_drivers(): variant; begin end;
function php_bindColumn(const _column: variant; var _param: variant; const _type: integer; const _maxlen: integer; const _driverdata: variant): boolean; begin end;
function php_bindParam(const _parameter: variant; var _variable: variant; const _data_type: integer; const _length: integer; const _driver_options: variant): boolean; begin end;
function php_bindValue(const _parameter: variant; const _value: variant; const _data_type: integer): boolean; begin end;
function php_closeCursor(): boolean; begin end;
function php_columnCount(): integer; begin end;
procedure php_debugDumpParams(); begin end;
function php_execute(const _input_parameters: variant): boolean; begin end;
function php_fetch(const _fetch_style: integer; const _cursor_orientation: integer; const _cursor_offset: integer): variant; begin end;
function php_fetchAll(const _fetch_style: integer; const _fetch_argument: variant; const _ctor_args: variant): variant; begin end;
function php_fetchColumn(const _column_number: integer): variant; begin end;
function php_fetchObject(const _class_name: string; const _ctor_args: variant): variant; begin end;
function php_getColumnMeta(const _column: integer): variant; begin end;
function php_nextRowset(): boolean; begin end;
function php_rowCount(): integer; begin end;
function php_setFetchMode(const _mode: integer): boolean; begin end;
function php_step(const _context: variant; const _rownumber: integer; const _value1: variant; const _value2: variant): variant; begin end;
function php_fini(const _context: variant; const _rownumber: integer): variant; begin end;
function php_collation(const _string1: string; const _string2: string): integer; begin end;
function php_cubrid_bind(const _req_identifier: variant; const _bind_index: integer; const _bind_value: variant; const _bind_value_type: string): boolean; begin end;
function php_cubrid_close_prepare(const _req_identifier: variant): boolean; begin end;
function php_cubrid_close_request(const _req_identifier: variant): boolean; begin end;
function php_cubrid_col_get(const _conn_identifier: variant; const _oid: string; const _attr_name: string): variant; begin end;
function php_cubrid_col_size(const _conn_identifier: variant; const _oid: string; const _attr_name: string): integer; begin end;
function php_cubrid_column_names(const _req_identifier: variant): variant; begin end;
function php_cubrid_column_types(const _req_identifier: variant): variant; begin end;
function php_cubrid_commit(const _conn_identifier: variant): boolean; begin end;
function php_cubrid_connect_with_url(const _conn_url: string; const _userid: string; const _passwd: string; const _new_link: boolean): variant; begin end;
function php_cubrid_connect(const _host: string; const _port: integer; const _dbname: string; const _userid: string; const _passwd: string; const _new_link: boolean): variant; begin end;
function php_cubrid_current_oid(const _req_identifier: variant): string; begin end;
function php_cubrid_disconnect(const _conn_identifier: variant): boolean; begin end;
function php_cubrid_drop(const _conn_identifier: variant; const _oid: string): boolean; begin end;
function php_cubrid_error_code_facility(): integer; begin end;
function php_cubrid_error_code(): integer; begin end;
function php_cubrid_error_msg(): string; begin end;
function php_cubrid_execute(const _conn_identifier: variant; const _sql: string; const _option: integer): variant; begin end;
function php_cubrid_execute(const _request_identifier: variant; const _option: integer): boolean; begin end;
function php_cubrid_fetch(const _result: variant; const _type: integer): variant; begin end;
function php_cubrid_free_result(const _req_identifier: variant): boolean; begin end;
function php_cubrid_get_autocommit(const _conn_identifier: variant): boolean; begin end;
function php_cubrid_get_charset(const _conn_identifier: variant): string; begin end;
function php_cubrid_get_class_name(const _conn_identifier: variant; const _oid: string): string; begin end;
function php_cubrid_get_client_info(): string; begin end;
function php_cubrid_get_db_parameter(const _conn_identifier: variant): variant; begin end;
function php_cubrid_get_query_timeout(const _req_identifier: variant): integer; begin end;
function php_cubrid_get_server_info(const _conn_identifier: variant): string; begin end;
function php_cubrid_get(const _conn_identifier: variant; const _oid: string; const _attr: variant): variant; begin end;
function php_cubrid_insert_id(const _conn_identifier: variant): string; begin end;
function php_cubrid_is_instance(const _conn_identifier: variant; const _oid: string): integer; begin end;
function php_cubrid_lob_close(const _lob_identifier_array: variant): boolean; begin end;
function php_cubrid_lob_export(const _conn_identifier: variant; const _lob_identifier: variant; const _path_name: string): boolean; begin end;
function php_cubrid_lob_get(const _conn_identifier: variant; const _sql: string): variant; begin end;
function php_cubrid_lob_send(const _conn_identifier: variant; const _lob_identifier: variant): boolean; begin end;
function php_cubrid_lob_size(const _lob_identifier: variant): string; begin end;
function php_cubrid_lob2_bind(const _req_identifier: variant; const _bind_index: integer; const _bind_value: variant; const _bind_value_type: string): boolean; begin end;
function php_cubrid_lob2_close(const _lob_identifier: variant): boolean; begin end;
function php_cubrid_lob2_export(const _lob_identifier: variant; const _file_name: string): boolean; begin end;
function php_cubrid_lob2_import(const _lob_identifier: variant; const _file_name: string): boolean; begin end;
function php_cubrid_lob2_new(const _conn_identifier: variant; const _type: string): variant; begin end;
function php_cubrid_lob2_read(const _lob_identifier: variant; const _len: integer): string; begin end;
function php_cubrid_lob2_seek64(const _lob_identifier: variant; const _offset: string; const _origin: integer): boolean; begin end;
function php_cubrid_lob2_seek(const _lob_identifier: variant; const _offset: integer; const _origin: integer): boolean; begin end;
function php_cubrid_lob2_size64(const _lob_identifier: variant): string; begin end;
function php_cubrid_lob2_size(const _lob_identifier: variant): integer; begin end;
function php_cubrid_lob2_tell64(const _lob_identifier: variant): string; begin end;
function php_cubrid_lob2_tell(const _lob_identifier: variant): integer; begin end;
function php_cubrid_lob2_write(const _lob_identifier: variant; const _buf: string): boolean; begin end;
function php_cubrid_lock_read(const _conn_identifier: variant; const _oid: string): boolean; begin end;
function php_cubrid_lock_write(const _conn_identifier: variant; const _oid: string): boolean; begin end;
function php_cubrid_move_cursor(const _req_identifier: variant; const _offset: integer; const _origin: integer): integer; begin end;
function php_cubrid_next_result(const _result: variant): boolean; begin end;
function php_cubrid_num_cols(const _result: variant): integer; begin end;
function php_cubrid_num_rows(const _result: variant): integer; begin end;
function php_cubrid_pconnect_with_url(const _conn_url: string; const _userid: string; const _passwd: string): variant; begin end;
function php_cubrid_pconnect(const _host: string; const _port: integer; const _dbname: string; const _userid: string; const _passwd: string): variant; begin end;
function php_cubrid_prepare(const _conn_identifier: variant; const _prepare_stmt: string; const _option: integer): variant; begin end;
function php_cubrid_put(const _conn_identifier: variant; const _oid: string; const _attr: string; const _value: variant): integer; begin end;
function php_cubrid_rollback(const _conn_identifier: variant): boolean; begin end;
function php_cubrid_schema(const _conn_identifier: variant; const _schema_type: integer; const _class_name: string; const _attr_name: string): variant; begin end;
function php_cubrid_seq_drop(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _index: integer): boolean; begin end;
function php_cubrid_seq_insert(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _index: integer; const _seq_element: string): boolean; begin end;
function php_cubrid_seq_put(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _index: integer; const _seq_element: string): boolean; begin end;
function php_cubrid_set_add(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _set_element: string): boolean; begin end;
function php_cubrid_set_autocommit(const _conn_identifier: variant; const _mode: boolean): boolean; begin end;
function php_cubrid_set_db_parameter(const _conn_identifier: variant; const _param_type: integer; const _param_value: integer): boolean; begin end;
function php_cubrid_set_drop(const _conn_identifier: variant; const _oid: string; const _attr_name: string; const _set_element: string): boolean; begin end;
function php_cubrid_set_query_timeout(const _req_identifier: variant; const _timeout: integer): boolean; begin end;
function php_cubrid_version(): string; begin end;
function php_cubrid_affected_rows(const _conn_identifier: variant): integer; begin end;
function php_cubrid_client_encoding(const _conn_identifier: variant): string; begin end;
function php_cubrid_close(const _conn_identifier: variant): boolean; begin end;
function php_cubrid_data_seek(const _result: variant; const _row_number: integer): boolean; begin end;
function php_cubrid_db_name(const _result: variant; const _index: integer): string; begin end;
function php_cubrid_errno(const _conn_identifier: variant): integer; begin end;
function php_cubrid_error(const _connection: variant): string; begin end;
function php_cubrid_fetch_array(const _result: variant; const _type: integer): variant; begin end;
function php_cubrid_fetch_assoc(const _result: variant; const _type: integer): variant; begin end;
function php_cubrid_fetch_field(const _result: variant; const _field_offset: integer): variant; begin end;
function php_cubrid_fetch_lengths(const _result: variant): variant; begin end;
function php_cubrid_fetch_object(const _result: variant; const _class_name: string; const _params: variant; const _type: integer): variant; begin end;
function php_cubrid_fetch_row(const _result: variant; const _type: integer): variant; begin end;
function php_cubrid_field_flags(const _result: variant; const _field_offset: integer): string; begin end;
function php_cubrid_field_len(const _result: variant; const _field_offset: integer): integer; begin end;
function php_cubrid_field_name(const _result: variant; const _field_offset: integer): string; begin end;
function php_cubrid_field_seek(const _result: variant; const _field_offset: integer): boolean; begin end;
function php_cubrid_field_table(const _result: variant; const _field_offset: integer): string; begin end;
function php_cubrid_field_type(const _result: variant; const _field_offset: integer): string; begin end;
function php_cubrid_list_dbs(const _conn_identifier: variant): variant; begin end;
function php_cubrid_num_fields(const _result: variant): integer; begin end;
function php_cubrid_ping(const _conn_identifier: variant): boolean; begin end;
function php_cubrid_query(const _query: string; const _conn_identifier: variant): variant; begin end;
function php_cubrid_real_escape_string(const _unescaped_string: string; const _conn_identifier: variant): string; begin end;
function php_cubrid_result(const _result: variant; const _row: integer; const _field: variant): string; begin end;
function php_cubrid_unbuffered_query(const _query: string; const _conn_identifier: variant): variant; begin end;
function php_cubrid_load_from_glo(const _conn_identifier: variant; const _oid: string; const _file_name: string): integer; begin end;
function php_cubrid_new_glo(const _conn_identifier: variant; const _class_name: string; const _file_name: string): string; begin end;
function php_cubrid_save_to_glo(const _conn_identifier: variant; const _oid: string; const _file_name: string): integer; begin end;
function php_cubrid_send_glo(const _conn_identifier: variant; const _oid: string): integer; begin end;
function php_dbplus_add(const _relation: variant; const _tuple: variant): integer; begin end;
function php_dbplus_aql(const _query: string; const _server: string; const _dbpath: string): variant; begin end;
function php_dbplus_chdir(const _newdir: string): string; begin end;
function php_dbplus_close(const _relation: variant): variant; begin end;
function php_dbplus_curr(const _relation: variant; var _tuple: variant): integer; begin end;
function php_dbplus_errcode(const _errno: integer): string; begin end;
function php_dbplus_errno(): integer; begin end;
function php_dbplus_find(const _relation: variant; const _constraints: variant; const _tuple: variant): integer; begin end;
function php_dbplus_first(const _relation: variant; var _tuple: variant): integer; begin end;
function php_dbplus_flush(const _relation: variant): integer; begin end;
function php_dbplus_freealllocks(): integer; begin end;
function php_dbplus_freelock(const _relation: variant; const _tuple: string): integer; begin end;
function php_dbplus_freerlocks(const _relation: variant): integer; begin end;
function php_dbplus_getlock(const _relation: variant; const _tuple: string): integer; begin end;
function php_dbplus_getunique(const _relation: variant; const _uniqueid: integer): integer; begin end;
function php_dbplus_info(const _relation: variant; const _key: string; var _result: variant): integer; begin end;
function php_dbplus_last(const _relation: variant; var _tuple: variant): integer; begin end;
function php_dbplus_lockrel(const _relation: variant): integer; begin end;
function php_dbplus_next(const _relation: variant; var _tuple: variant): integer; begin end;
function php_dbplus_open(const _name: string): variant; begin end;
function php_dbplus_prev(const _relation: variant; var _tuple: variant): integer; begin end;
function php_dbplus_rchperm(const _relation: variant; const _mask: integer; const _user: string; const _group: string): integer; begin end;
function php_dbplus_rcreate(const _name: string; const _domlist: variant; const _overwrite: boolean): variant; begin end;
function php_dbplus_rcrtexact(const _name: string; const _relation: variant; const _overwrite: boolean): variant; begin end;
function php_dbplus_rcrtlike(const _name: string; const _relation: variant; const _overwrite: integer): variant; begin end;
function php_dbplus_resolve(const _relation_name: string): variant; begin end;
function php_dbplus_restorepos(const _relation: variant; const _tuple: variant): integer; begin end;
function php_dbplus_rkeys(const _relation: variant; const _domlist: variant): variant; begin end;
function php_dbplus_ropen(const _name: string): variant; begin end;
function php_dbplus_rquery(const _query: string; const _dbpath: string): variant; begin end;
function php_dbplus_rrename(const _relation: variant; const _name: string): integer; begin end;
function php_dbplus_rsecindex(const _relation: variant; const _domlist: variant; const _type: integer): variant; begin end;
function php_dbplus_runlink(const _relation: variant): integer; begin end;
function php_dbplus_rzap(const _relation: variant): integer; begin end;
function php_dbplus_savepos(const _relation: variant): integer; begin end;
function php_dbplus_setindex(const _relation: variant; const _idx_name: string): integer; begin end;
function php_dbplus_setindexbynumber(const _relation: variant; const _idx_number: integer): integer; begin end;
function php_dbplus_sql(const _query: string; const _server: string; const _dbpath: string): variant; begin end;
function php_dbplus_tcl(const _sid: integer; const _script: string): string; begin end;
function php_dbplus_tremove(const _relation: variant; const _tuple: variant; var _current: variant): integer; begin end;
function php_dbplus_undo(const _relation: variant): integer; begin end;
function php_dbplus_undoprepare(const _relation: variant): integer; begin end;
function php_dbplus_unlockrel(const _relation: variant): integer; begin end;
function php_dbplus_unselect(const _relation: variant): integer; begin end;
function php_dbplus_update(const _relation: variant; const _old: variant; const _new: variant): integer; begin end;
function php_dbplus_xlockrel(const _relation: variant): integer; begin end;
function php_dbplus_xunlockrel(const _relation: variant): integer; begin end;
function php_dbase_add_record(const _dbase_identifier: integer; const _record: variant): boolean; begin end;
function php_dbase_close(const _dbase_identifier: integer): boolean; begin end;
function php_dbase_create(const _filename: string; const _fields: variant): integer; begin end;
function php_dbase_delete_record(const _dbase_identifier: integer; const _record_number: integer): boolean; begin end;
function php_dbase_get_header_info(const _dbase_identifier: integer): variant; begin end;
function php_dbase_get_record_with_names(const _dbase_identifier: integer; const _record_number: integer): variant; begin end;
function php_dbase_get_record(const _dbase_identifier: integer; const _record_number: integer): variant; begin end;
function php_dbase_numfields(const _dbase_identifier: integer): integer; begin end;
function php_dbase_numrecords(const _dbase_identifier: integer): integer; begin end;
function php_dbase_open(const _filename: string; const _mode: integer): integer; begin end;
function php_dbase_pack(const _dbase_identifier: integer): boolean; begin end;
function php_dbase_replace_record(const _dbase_identifier: integer; const _record: variant; const _record_number: integer): boolean; begin end;
function php_filepro_fieldcount(): integer; begin end;
function php_filepro_fieldname(const _field_number: integer): string; begin end;
function php_filepro_fieldtype(const _field_number: integer): string; begin end;
function php_filepro_fieldwidth(const _field_number: integer): integer; begin end;
function php_filepro_retrieve(const _row_number: integer; const _field_number: integer): string; begin end;
function php_filepro_rowcount(): integer; begin end;
function php_filepro(const _directory: string): boolean; begin end;
function php_ibase_add_user(const _service_handle: variant; const _user_name: string; const _password: string; const _first_name: string; const _middle_name: string; const _last_name: string): boolean; begin end;
function php_ibase_affected_rows(const _link_identifier: variant): integer; begin end;
function php_ibase_backup(const _service_handle: variant; const _source_db: string; const _dest_file: string; const _options: integer; const _verbose: boolean): variant; begin end;
procedure php_ibase_blob_add(const _blob_handle: variant; const _data: string); begin end;
function php_ibase_blob_cancel(const _blob_handle: variant): boolean; begin end;
function php_ibase_blob_close(const _blob_handle: variant): variant; begin end;
function php_ibase_blob_create(const _link_identifier: variant): variant; begin end;
function php_ibase_blob_echo(const _blob_id: string): boolean; begin end;
function php_ibase_blob_echo(const _link_identifier: variant; const _blob_id: string): boolean; begin end;
function php_ibase_blob_get(const _blob_handle: variant; const _len: integer): string; begin end;
function php_ibase_blob_import(const _link_identifier: variant; const _file_handle: variant): string; begin end;
function php_ibase_blob_import(const _file_handle: variant): string; begin end;
function php_ibase_blob_info(const _link_identifier: variant; const _blob_id: string): variant; begin end;
function php_ibase_blob_info(const _blob_id: string): variant; begin end;
function php_ibase_blob_open(const _link_identifier: variant; const _blob_id: string): variant; begin end;
function php_ibase_blob_open(const _blob_id: string): variant; begin end;
function php_ibase_close(const _connection_id: variant): boolean; begin end;
function php_ibase_commit_ret(const _link_or_trans_identifier: variant): boolean; begin end;
function php_ibase_commit(const _link_or_trans_identifier: variant): boolean; begin end;
function php_ibase_connect(const _database: string; const _username: string; const _password: string; const _charset: string; const _buffers: integer; const _dialect: integer; const _role: string; const _sync: integer): variant; begin end;
function php_ibase_db_info(const _service_handle: variant; const _db: string; const _action: integer; const _argument: integer): string; begin end;
function php_ibase_delete_user(const _service_handle: variant; const _user_name: string): boolean; begin end;
function php_ibase_drop_db(const _connection: variant): boolean; begin end;
function php_ibase_errcode(): integer; begin end;
function php_ibase_errmsg(): string; begin end;
function php_ibase_execute(const _query: variant; const _bind_arg: variant): variant; begin end;
function php_ibase_fetch_assoc(const _result: variant; const _fetch_flag: integer): variant; begin end;
function php_ibase_fetch_object(const _result_id: variant; const _fetch_flag: integer): variant; begin end;
function php_ibase_fetch_row(const _result_identifier: variant; const _fetch_flag: integer): variant; begin end;
function php_ibase_field_info(const _result: variant; const _field_number: integer): variant; begin end;
function php_ibase_free_event_handler(const _event: variant): boolean; begin end;
function php_ibase_free_query(const _query: variant): boolean; begin end;
function php_ibase_free_result(const _result_identifier: variant): boolean; begin end;
function php_ibase_gen_id(const _generator: string; const _increment: integer; const _link_identifier: variant): variant; begin end;
function php_ibase_maintain_db(const _service_handle: variant; const _db: string; const _action: integer; const _argument: integer): boolean; begin end;
function php_ibase_modify_user(const _service_handle: variant; const _user_name: string; const _password: string; const _first_name: string; const _middle_name: string; const _last_name: string): boolean; begin end;
function php_ibase_name_result(const _result: variant; const _name: string): boolean; begin end;
function php_ibase_num_fields(const _result_id: variant): integer; begin end;
function php_ibase_num_params(const _query: variant): integer; begin end;
function php_ibase_param_info(const _query: variant; const _param_number: integer): variant; begin end;
function php_ibase_pconnect(const _database: string; const _username: string; const _password: string; const _charset: string; const _buffers: integer; const _dialect: integer; const _role: string; const _sync: integer): variant; begin end;
function php_ibase_prepare(const _query: string): variant; begin end;
function php_ibase_prepare(const _link_identifier: variant; const _query: string): variant; begin end;
function php_ibase_prepare(const _link_identifier: variant; const _trans: string; const _query: string): variant; begin end;
function php_ibase_query(const _link_identifier: variant; const _query: string; const _bind_args: integer): variant; begin end;
function php_ibase_restore(const _service_handle: variant; const _source_file: string; const _dest_db: string; const _options: integer; const _verbose: boolean): variant; begin end;
function php_ibase_rollback_ret(const _link_or_trans_identifier: variant): boolean; begin end;
function php_ibase_rollback(const _link_or_trans_identifier: variant): boolean; begin end;
function php_ibase_server_info(const _service_handle: variant; const _action: integer): string; begin end;
function php_ibase_service_attach(const _host: string; const _dba_username: string; const _dba_password: string): variant; begin end;
function php_ibase_service_detach(const _service_handle: variant): boolean; begin end;
function php_ibase_set_event_handler(const _event_handler: variant; const _event_name1: string; const _event_name2: string): variant; begin end;
function php_ibase_set_event_handler(const _connection: variant; const _event_handler: variant; const _event_name1: string; const _event_name2: string): variant; begin end;
function php_ibase_trans(const _trans_args: integer; const _link_identifier: variant): variant; begin end;
function php_ibase_trans(const _link_identifier: variant; const _trans_args: integer): variant; begin end;
function php_ibase_wait_event(const _event_name1: string; const _event_name2: string): string; begin end;
function php_ibase_wait_event(const _connection: variant; const _event_name1: string; const _event_name2: string): string; begin end;
function php_fbsql_affected_rows(const _link_identifier: variant): integer; begin end;
function php_fbsql_autocommit(const _link_identifier: variant; const _OnOff: boolean): boolean; begin end;
function php_fbsql_blob_size(const _blob_handle: string; const _link_identifier: variant): integer; begin end;
function php_fbsql_change_user(const _user: string; const _password: string; const _database: string; const _link_identifier: variant): boolean; begin end;
function php_fbsql_clob_size(const _clob_handle: string; const _link_identifier: variant): integer; begin end;
function php_fbsql_close(const _link_identifier: variant): boolean; begin end;
function php_fbsql_commit(const _link_identifier: variant): boolean; begin end;
function php_fbsql_connect(const _hostname: string): variant; begin end;
function php_fbsql_create_blob(const _blob_data: string; const _link_identifier: variant): string; begin end;
function php_fbsql_create_clob(const _clob_data: string; const _link_identifier: variant): string; begin end;
function php_fbsql_create_db(const _database_name: string; const _link_identifier: variant; const _database_options: string): boolean; begin end;
function php_fbsql_data_seek(const _result: variant; const _row_number: integer): boolean; begin end;
function php_fbsql_database_password(const _link_identifier: variant; const _database_password: string): string; begin end;
function php_fbsql_database(const _link_identifier: variant; const _database: string): string; begin end;
function php_fbsql_db_query(const _database: string; const _query: string; const _link_identifier: variant): variant; begin end;
function php_fbsql_db_status(const _database_name: string; const _link_identifier: variant): integer; begin end;
function php_fbsql_drop_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_fbsql_errno(const _link_identifier: variant): integer; begin end;
function php_fbsql_error(const _link_identifier: variant): string; begin end;
function php_fbsql_fetch_array(const _result: variant; const _result_type: integer): variant; begin end;
function php_fbsql_fetch_assoc(const _result: variant): variant; begin end;
function php_fbsql_fetch_field(const _result: variant; const _field_offset: integer): variant; begin end;
function php_fbsql_fetch_lengths(const _result: variant): variant; begin end;
function php_fbsql_fetch_object(const _result: variant): variant; begin end;
function php_fbsql_fetch_row(const _result: variant): variant; begin end;
function php_fbsql_field_flags(const _result: variant; const _field_offset: integer): string; begin end;
function php_fbsql_field_len(const _result: variant; const _field_offset: integer): integer; begin end;
function php_fbsql_field_name(const _result: variant; const _field_index: integer): string; begin end;
function php_fbsql_field_seek(const _result: variant; const _field_offset: integer): boolean; begin end;
function php_fbsql_field_table(const _result: variant; const _field_offset: integer): string; begin end;
function php_fbsql_field_type(const _result: variant; const _field_offset: integer): string; begin end;
function php_fbsql_free_result(const _result: variant): boolean; begin end;
function php_fbsql_get_autostart_info(const _link_identifier: variant): variant; begin end;
function php_fbsql_hostname(const _link_identifier: variant; const _host_name: string): string; begin end;
function php_fbsql_insert_id(const _link_identifier: variant): integer; begin end;
function php_fbsql_list_dbs(const _link_identifier: variant): variant; begin end;
function php_fbsql_list_fields(const _database_name: string; const _table_name: string; const _link_identifier: variant): variant; begin end;
function php_fbsql_list_tables(const _database: string; const _link_identifier: variant): variant; begin end;
function php_fbsql_next_result(const _result: variant): boolean; begin end;
function php_fbsql_num_fields(const _result: variant): integer; begin end;
function php_fbsql_num_rows(const _result: variant): integer; begin end;
function php_fbsql_password(const _link_identifier: variant; const _password: string): string; begin end;
function php_fbsql_pconnect(const _hostname: string): variant; begin end;
function php_fbsql_query(const _query: string; const _link_identifier: variant; const _batch_size: integer): variant; begin end;
function php_fbsql_read_blob(const _blob_handle: string; const _link_identifier: variant): string; begin end;
function php_fbsql_read_clob(const _clob_handle: string; const _link_identifier: variant): string; begin end;
function php_fbsql_result(const _result: variant; const _row: integer; const _field: variant): variant; begin end;
function php_fbsql_rollback(const _link_identifier: variant): boolean; begin end;
function php_fbsql_rows_fetched(const _result: variant): integer; begin end;
function php_fbsql_select_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
procedure php_fbsql_set_characterset(const _link_identifier: variant; const _characterset: integer; const _in_out_both: integer); begin end;
function php_fbsql_set_lob_mode(const _result: variant; const _lob_mode: integer): boolean; begin end;
function php_fbsql_set_password(const _link_identifier: variant; const _user: string; const _password: string; const _old_password: string): boolean; begin end;
procedure php_fbsql_set_transaction(const _link_identifier: variant; const _locking: integer; const _isolation: integer); begin end;
function php_fbsql_start_db(const _database_name: string; const _link_identifier: variant; const _database_options: string): boolean; begin end;
function php_fbsql_stop_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_fbsql_table_name(const _result: variant; const _index: integer): string; begin end;
function php_fbsql_username(const _link_identifier: variant; const _username: string): string; begin end;
function php_fbsql_warnings(const _OnOff: boolean): boolean; begin end;
function php_db2_autocommit(const _connection: variant; const _value: boolean): variant; begin end;
function php_db2_bind_param(const _stmt: variant; const _parameter_number: integer; const _variable_name: string; const _parameter_type: integer; const _data_type: integer; const _precision: integer; const _scale: integer): boolean; begin end;
function php_db2_client_info(const _connection: variant): variant; begin end;
function php_db2_close(const _connection: variant): boolean; begin end;
function php_db2_column_privileges(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _column_name: string): variant; begin end;
function php_db2_columns(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _column_name: string): variant; begin end;
function php_db2_commit(const _connection: variant): boolean; begin end;
function php_db2_conn_error(const _connection: variant): string; begin end;
function php_db2_conn_errormsg(const _connection: variant): string; begin end;
function php_db2_connect(const _database: string; const _username: string; const _password: string; const _options: variant): variant; begin end;
function php_db2_cursor_type(const _stmt: variant): integer; begin end;
function php_db2_escape_string(const _string_literal: string): string; begin end;
function php_db2_exec(const _connection: variant; const _statement: string; const _options: variant): variant; begin end;
function php_db2_execute(const _stmt: variant; const _parameters: variant): boolean; begin end;
function php_db2_fetch_array(const _stmt: variant; const _row_number: integer): variant; begin end;
function php_db2_fetch_assoc(const _stmt: variant; const _row_number: integer): variant; begin end;
function php_db2_fetch_both(const _stmt: variant; const _row_number: integer): variant; begin end;
function php_db2_fetch_object(const _stmt: variant; const _row_number: integer): variant; begin end;
function php_db2_fetch_row(const _stmt: variant; const _row_number: integer): boolean; begin end;
function php_db2_field_display_size(const _stmt: variant; const _column: variant): integer; begin end;
function php_db2_field_name(const _stmt: variant; const _column: variant): string; begin end;
function php_db2_field_num(const _stmt: variant; const _column: variant): integer; begin end;
function php_db2_field_precision(const _stmt: variant; const _column: variant): integer; begin end;
function php_db2_field_scale(const _stmt: variant; const _column: variant): integer; begin end;
function php_db2_field_type(const _stmt: variant; const _column: variant): string; begin end;
function php_db2_field_width(const _stmt: variant; const _column: variant): integer; begin end;
function php_db2_foreign_keys(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string): variant; begin end;
function php_db2_free_result(const _stmt: variant): boolean; begin end;
function php_db2_free_stmt(const _stmt: variant): boolean; begin end;
function php_db2_get_option(const _resource: variant; const _option: string): string; begin end;
function php_db2_last_insert_id(const _resource: variant): string; begin end;
function php_db2_lob_read(const _stmt: variant; const _colnum: integer; const _length: integer): string; begin end;
function php_db2_next_result(const _stmt: variant): variant; begin end;
function php_db2_num_fields(const _stmt: variant): integer; begin end;
function php_db2_num_rows(const _stmt: variant): integer; begin end;
function php_db2_pclose(const _resource: variant): boolean; begin end;
function php_db2_pconnect(const _database: string; const _username: string; const _password: string; const _options: variant): variant; begin end;
function php_db2_prepare(const _connection: variant; const _statement: string; const _options: variant): variant; begin end;
function php_db2_primary_keys(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string): variant; begin end;
function php_db2_procedure_columns(const _connection: variant; const _qualifier: string; const _schema: string; const _procedure: string; const _parameter: string): variant; begin end;
function php_db2_procedures(const _connection: variant; const _qualifier: string; const _schema: string; const _procedure: string): variant; begin end;
function php_db2_result(const _stmt: variant; const _column: variant): variant; begin end;
function php_db2_rollback(const _connection: variant): boolean; begin end;
function php_db2_server_info(const _connection: variant): variant; begin end;
function php_db2_set_option(const _resource: variant; const _options: variant; const _type: integer): boolean; begin end;
function php_db2_special_columns(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _scope: integer): variant; begin end;
function php_db2_statistics(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _unique: boolean): variant; begin end;
function php_db2_stmt_error(const _stmt: variant): string; begin end;
function php_db2_stmt_errormsg(const _stmt: variant): string; begin end;
function php_db2_table_privileges(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string): variant; begin end;
function php_db2_tables(const _connection: variant; const _qualifier: string; const _schema: string; const _table_name: string; const _table_type: string): variant; begin end;
function php_ifx_affected_rows(const _result_id: variant): integer; begin end;
function php_ifx_blobinfile_mode(const _mode: integer): boolean; begin end;
function php_ifx_byteasvarchar(const _mode: integer): boolean; begin end;
function php_ifx_close(const _link_identifier: variant): boolean; begin end;
function php_ifx_connect(const _database: string; const _userid: string; const _password: string): variant; begin end;
function php_ifx_copy_blob(const _bid: integer): integer; begin end;
function php_ifx_create_blob(const _type: integer; const _mode: integer; const _param: string): integer; begin end;
function php_ifx_create_char(const _param: string): integer; begin end;
function php_ifx_do(const _result_id: variant): boolean; begin end;
function php_ifx_error(const _link_identifier: variant): string; begin end;
function php_ifx_errormsg(const _errorcode: integer): string; begin end;
function php_ifx_fetch_row(const _result_id: variant; const _position: variant): variant; begin end;
function php_ifx_fieldproperties(const _result_id: variant): variant; begin end;
function php_ifx_fieldtypes(const _result_id: variant): variant; begin end;
function php_ifx_free_blob(const _bid: integer): boolean; begin end;
function php_ifx_free_char(const _bid: integer): boolean; begin end;
function php_ifx_free_result(const _result_id: variant): boolean; begin end;
function php_ifx_get_blob(const _bid: integer): string; begin end;
function php_ifx_get_char(const _bid: integer): string; begin end;
function php_ifx_getsqlca(const _result_id: variant): variant; begin end;
function php_ifx_htmltbl_result(const _result_id: variant; const _html_table_options: string): integer; begin end;
function php_ifx_nullformat(const _mode: integer): boolean; begin end;
function php_ifx_num_fields(const _result_id: variant): integer; begin end;
function php_ifx_num_rows(const _result_id: variant): integer; begin end;
function php_ifx_pconnect(const _database: string; const _userid: string; const _password: string): variant; begin end;
function php_ifx_prepare(const _query: string; const _link_identifier: variant; const _cursor_def: integer; const _blobidarray: variant): variant; begin end;
function php_ifx_query(const _query: string; const _link_identifier: variant; const _cursor_type: integer; const _blobidarray: variant): variant; begin end;
function php_ifx_textasvarchar(const _mode: integer): boolean; begin end;
function php_ifx_update_blob(const _bid: integer; const _content: string): boolean; begin end;
function php_ifx_update_char(const _bid: integer; const _content: string): boolean; begin end;
function php_ifxus_close_slob(const _bid: integer): boolean; begin end;
function php_ifxus_create_slob(const _mode: integer): integer; begin end;
function php_ifxus_free_slob(const _bid: integer): boolean; begin end;
function php_ifxus_open_slob(const _bid: integer; const _mode: integer): integer; begin end;
function php_ifxus_read_slob(const _bid: integer; const _nbytes: integer): string; begin end;
function php_ifxus_seek_slob(const _bid: integer; const _mode: integer; const _offset: integer): integer; begin end;
function php_ifxus_tell_slob(const _bid: integer): integer; begin end;
function php_ifxus_write_slob(const _bid: integer; const _content: string): integer; begin end;
function php_ingres_autocommit_state(const _link: variant): boolean; begin end;
function php_ingres_autocommit(const _link: variant): boolean; begin end;
function php_ingres_charset(const _link: variant): string; begin end;
function php_ingres_close(const _link: variant): boolean; begin end;
function php_ingres_commit(const _link: variant): boolean; begin end;
function php_ingres_connect(const _database: string; const _username: string; const _password: string; const _options: variant): variant; begin end;
function php_ingres_cursor(const _result: variant): string; begin end;
function php_ingres_errno(const _link: variant): integer; begin end;
function php_ingres_error(const _link: variant): string; begin end;
function php_ingres_errsqlstate(const _link: variant): string; begin end;
function php_ingres_escape_string(const _link: variant; const _source_string: string): string; begin end;
function php_ingres_execute(const _result: variant; const _params: variant; const _types: string): boolean; begin end;
function php_ingres_fetch_array(const _result: variant; const _result_type: integer): variant; begin end;
function php_ingres_fetch_assoc(const _result: variant): variant; begin end;
function php_ingres_fetch_object(const _result: variant; const _result_type: integer): variant; begin end;
function php_ingres_fetch_proc_return(const _result: variant): integer; begin end;
function php_ingres_fetch_row(const _result: variant): variant; begin end;
function php_ingres_field_length(const _result: variant; const _index: integer): integer; begin end;
function php_ingres_field_name(const _result: variant; const _index: integer): string; begin end;
function php_ingres_field_nullable(const _result: variant; const _index: integer): boolean; begin end;
function php_ingres_field_precision(const _result: variant; const _index: integer): integer; begin end;
function php_ingres_field_scale(const _result: variant; const _index: integer): integer; begin end;
function php_ingres_field_type(const _result: variant; const _index: integer): string; begin end;
function php_ingres_free_result(const _result: variant): boolean; begin end;
function php_ingres_next_error(const _link: variant): boolean; begin end;
function php_ingres_num_fields(const _result: variant): integer; begin end;
function php_ingres_num_rows(const _result: variant): integer; begin end;
function php_ingres_pconnect(const _database: string; const _username: string; const _password: string; const _options: variant): variant; begin end;
function php_ingres_prepare(const _link: variant; const _query: string): variant; begin end;
function php_ingres_query(const _link: variant; const _query: string; const _params: variant; const _types: string): variant; begin end;
function php_ingres_result_seek(const _result: variant; const _position: integer): boolean; begin end;
function php_ingres_rollback(const _link: variant): boolean; begin end;
function php_ingres_set_environment(const _link: variant; const _options: variant): boolean; begin end;
function php_ingres_unbuffered_query(const _link: variant; const _query: string; const _params: variant; const _types: string): variant; begin end;
function php_maxdb_affected_rows(const _link: variant): integer; begin end;
function php_maxdb_autocommit(const _link: variant; const _mode: boolean): boolean; begin end;
function php_maxdb_change_user(const _link: variant; const _user: string; const _password: string; const _database: string): boolean; begin end;
function php_maxdb_character_set_name(const _link: variant): string; begin end;
function php_maxdb_close(const _link: variant): boolean; begin end;
function php_maxdb_commit(const _link: variant): boolean; begin end;
function php_maxdb_connect_errno(): integer; begin end;
function php_maxdb_connect_error(): string; begin end;
function php_maxdb_connect(const _host: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string): variant; begin end;
function php_maxdb_data_seek(const _result: variant; const _offset: integer): boolean; begin end;
procedure php_maxdb_debug(const _debug: string); begin end;
function php_maxdb_disable_reads_from_master(const _link: variant): boolean; begin end;
function php_maxdb_disable_rpl_parse(const _link: variant): boolean; begin end;
function php_maxdb_dump_debug_info(const _link: variant): boolean; begin end;
function php_maxdb_embedded_connect(const _dbname: string): variant; begin end;
function php_maxdb_enable_reads_from_master(const _link: variant): boolean; begin end;
function php_maxdb_enable_rpl_parse(const _link: variant): boolean; begin end;
function php_maxdb_errno(const _link: variant): integer; begin end;
function php_maxdb_error(const _link: variant): string; begin end;
function php_maxdb_fetch_array(const _result: variant; const _resulttype: integer): variant; begin end;
function php_maxdb_fetch_assoc(const _result: variant): variant; begin end;
function php_maxdb_fetch_field_direct(const _result: variant; const _fieldnr: integer): variant; begin end;
function php_maxdb_fetch_field(const _result: variant): variant; begin end;
function php_maxdb_fetch_fields(const _result: variant): variant; begin end;
function php_maxdb_fetch_lengths(const _result: variant): variant; begin end;
function php_maxdb_fetch_object(const _result: variant): variant; begin end;
function php_maxdb_fetch_row(const _result: variant): variant; begin end;
function php_maxdb_field_count(const _link: variant): integer; begin end;
function php_maxdb_field_seek(const _result: variant; const _fieldnr: integer): boolean; begin end;
function php_maxdb_field_tell(const _result: variant): integer; begin end;
procedure php_maxdb_free_result(const _result: variant); begin end;
function php_maxdb_get_client_info(): string; begin end;
function php_maxdb_get_client_version(): integer; begin end;
function php_maxdb_get_host_info(const _link: variant): string; begin end;
function php_maxdb_get_proto_info(const _link: variant): integer; begin end;
function php_maxdb_get_server_info(const _link: variant): string; begin end;
function php_maxdb_get_server_version(const _link: variant): integer; begin end;
function php_maxdb_info(const _link: variant): string; begin end;
function php_maxdb_init(): variant; begin end;
function php_maxdb_insert_id(const _link: variant): variant; begin end;
function php_maxdb_kill(const _link: variant; const _processid: integer): boolean; begin end;
function php_maxdb_master_query(const _link: variant; const _query: string): boolean; begin end;
function php_maxdb_more_results(const _link: variant): boolean; begin end;
function php_maxdb_multi_query(const _link: variant; const _query: string): boolean; begin end;
function php_maxdb_next_result(const _link: variant): boolean; begin end;
function php_maxdb_num_fields(const _result: variant): integer; begin end;
function php_maxdb_num_rows(const _result: variant): integer; begin end;
function php_maxdb_options(const _link: variant; const _option: integer; const _value: variant): boolean; begin end;
function php_maxdb_ping(const _link: variant): boolean; begin end;
function php_maxdb_prepare(const _link: variant; const _query: string): variant; begin end;
function php_maxdb_query(const _link: variant; const _query: string; const _resultmode: integer): variant; begin end;
function php_maxdb_real_connect(const _link: variant; const _hostname: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string): boolean; begin end;
function php_maxdb_real_escape_string(const _link: variant; const _escapestr: string): string; begin end;
function php_maxdb_real_query(const _link: variant; const _query: string): boolean; begin end;
function php_maxdb_report(const _flags: integer): boolean; begin end;
function php_maxdb_rollback(const _link: variant): boolean; begin end;
function php_maxdb_rpl_parse_enabled(const _link: variant): integer; begin end;
function php_maxdb_rpl_probe(const _link: variant): boolean; begin end;
function php_maxdb_rpl_query_type(const _link: variant): integer; begin end;
function php_maxdb_select_db(const _link: variant; const _dbname: string): boolean; begin end;
function php_maxdb_send_query(const _link: variant; const _query: string): boolean; begin end;
procedure php_maxdb_server_end(); begin end;
function php_maxdb_server_init(const _server: variant; const _groups: variant): boolean; begin end;
function php_maxdb_sqlstate(const _link: variant): string; begin end;
function php_maxdb_ssl_set(const _link: variant; const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean; begin end;
function php_maxdb_stat(const _link: variant): string; begin end;
function php_maxdb_stmt_affected_rows(const _stmt: variant): integer; begin end;
function php_maxdb_stmt_bind_param(const _stmt: variant; const _types: string; var _var1: variant): boolean; begin end;
function php_maxdb_stmt_bind_result(const _stmt: variant; var _var1: variant): boolean; begin end;
function php_maxdb_stmt_close_long_data(const _stmt: variant; const _param_nr: integer): boolean; begin end;
function php_maxdb_stmt_close(const _stmt: variant): boolean; begin end;
function php_maxdb_stmt_data_seek(const _statement: variant; const _offset: integer): boolean; begin end;
function php_maxdb_stmt_errno(const _stmt: variant): integer; begin end;
function php_maxdb_stmt_error(const _stmt: variant): string; begin end;
function php_maxdb_stmt_execute(const _stmt: variant): boolean; begin end;
function php_maxdb_stmt_fetch(const _stmt: variant): boolean; begin end;
procedure php_maxdb_stmt_free_result(const _stmt: variant); begin end;
function php_maxdb_stmt_init(const _link: variant): variant; begin end;
function php_maxdb_stmt_num_rows(const _stmt: variant): integer; begin end;
function php_maxdb_stmt_param_count(const _stmt: variant): integer; begin end;
function php_maxdb_stmt_prepare(const _stmt: variant; const _query: string): boolean; begin end;
function php_maxdb_stmt_reset(const _stmt: variant): boolean; begin end;
function php_maxdb_stmt_result_metadata(const _stmt: variant): variant; begin end;
function php_maxdb_stmt_send_long_data(const _stmt: variant; const _param_nr: integer; const _data: string): boolean; begin end;
function php_maxdb_stmt_sqlstate(const _stmt: variant): string; begin end;
function php_maxdb_stmt_store_result(const _stmt: variant): boolean; begin end;
function php_maxdb_store_result(const _link: variant): variant; begin end;
function php_maxdb_thread_id(const _link: variant): integer; begin end;
function php_maxdb_thread_safe(): boolean; begin end;
function php_maxdb_use_result(const _link: variant): variant; begin end;
function php_maxdb_warning_count(const _link: variant): integer; begin end;
function php_close(const _connection: variant): boolean; begin end;
function php_connect(): boolean; begin end;
function php_dropDB(const _db: variant): variant; begin end;
function php_getConnections(): variant; begin end;
function php_getHosts(): variant; begin end;
function php_getReadPreference(): variant; begin end;
function php_getWriteConcern(): variant; begin end;
function php_killCursor(const _server_hash: string; const _id: variant): boolean; begin end;
function php_listDBs(): variant; begin end;
function php_setReadPreference(const _read_preference: string; const _tags: variant): boolean; begin end;
function php_setWriteConcern(const _w: variant; const _wtimeout: integer): boolean; begin end;
function php_authenticate(const _username: string; const _password: string): variant; begin end;
function php_command(const _command: variant; const _options: variant): variant; begin end;
function php_createDBRef(const _collection: string; const _document_or_id: variant): variant; begin end;
function php_drop(): variant; begin end;
function php_dropCollection(const _coll: variant): variant; begin end;
function php_execute(const _code: variant; const _args: variant): variant; begin end;
function php_forceError(): boolean; begin end;
function php_getCollectionInfo(const _options: variant): variant; begin end;
function php_getCollectionNames(const _options: variant): variant; begin end;
function php_getDBRef(const _ref: variant): variant; begin end;
function php_getProfilingLevel(): integer; begin end;
function php_getSlaveOkay(): boolean; begin end;
function php_lastError(): variant; begin end;
function php_listCollections(const _options: variant): variant; begin end;
function php_prevError(): variant; begin end;
function php_repair(const _preserve_cloned_files: boolean; const _backup_original_files: boolean): variant; begin end;
function php_resetError(): variant; begin end;
function php_setProfilingLevel(const _level: integer): integer; begin end;
function php_setSlaveOkay(const _ok: boolean): boolean; begin end;
function php_aggregate(const _pipeline: variant; const _options: variant): variant; begin end;
function php_batchInsert(const _a: variant; const _options: variant): variant; begin end;
function php_count(const _query: variant): integer; begin end;
function php_createDBRef(const _document_or_id: variant): variant; begin end;
function php_createIndex(const _keys: variant; const _options: variant): boolean; begin end;
function php_deleteIndex(const _keys: variant): variant; begin end;
function php_deleteIndexes(): variant; begin end;
function php_distinct(const _key: string; const _query: variant): variant; begin end;
function php_ensureIndex(const _key_or_keys: variant; const _options: variant): boolean; begin end;
function php_findAndModify(const _query: variant; const _update: variant; const _fields: variant; const _options: variant): variant; begin end;
function php_findOne(const _query: variant): variant; begin end;
function php_getIndexInfo(): variant; begin end;
function php_group(const _keys: variant; const _initial: variant; const _reduce: variant; const _options: variant): variant; begin end;
function php_save(const _document: variant; const _options: variant): variant; begin end;
function php_toIndexString(const _keys: variant): string; begin end;
function php_validate(const _scan_data: boolean): variant; begin end;
function php_count(const _foundOnly: boolean): integer; begin end;
function php_dead(): boolean; begin end;
procedure php_doQuery(); begin end;
function php_explain(): variant; begin end;
function php_getNext(): variant; begin end;
function php_hasNext(): boolean; begin end;
function php_info(): variant; begin end;
procedure php_reset(); begin end;
function php_getHostname(): string; begin end;
function php_getInc(): integer; begin end;
function php_getPID(): integer; begin end;
function php_getTimestamp(): integer; begin end;
function php_isValid(const _value: variant): boolean; begin end;
function php_create(const _collection: string; const _id: variant; const _database: string): variant; begin end;
function php_get(const _db: variant; const _ref: variant): variant; begin end;
function php_isRef(const _ref: variant): boolean; begin end;
function php_put(const _filename: string; const _metadata: variant): variant; begin end;
function php_storeBytes(const _bytes: string; const _metadata: variant): variant; begin end;
function php_storeFile(const _filename: variant; const _metadata: variant): variant; begin end;
function php_storeUpload(const _name: string; const _metadata: variant): variant; begin end;
function php_getBytes(): string; begin end;
function php_getFilename(): string; begin end;
function php_getResource(): variant; begin end;
function php_write(const _filename: string): integer; begin end;
function php_add(const _item: variant): boolean; begin end;
function php_getLevel(): integer; begin end;
function php_getModule(): integer; begin end;
procedure php_setCallback(const _log_function: variant); begin end;
procedure php_setLevel(const _level: integer); begin end;
procedure php_setModule(const _module: integer); begin end;
function php_setSize(const _size: integer): boolean; begin end;
function php_connectUtil(): boolean; begin end;
function php_getPoolSize(): integer; begin end;
function php_getSlave(): string; begin end;
function php_poolDebug(): variant; begin end;
function php_setPoolSize(const _size: integer): boolean; begin end;
function php_switchSlave(): string; begin end;
function php_bson_decode(const _bson: string): variant; begin end;
function php_bson_encode(const _anything: variant): string; begin end;
function php_getDocument(): variant; begin end;
function php_getServers(): variant; begin end;
procedure php_delete(const _filter: variant; const _deleteOptions: variant); begin end;
function php_insert(const _document: variant): variant; begin end;
procedure php_update(const _filter: variant; const _newObj: variant; const _updateOptions: variant); begin end;
function php_getWtimeout(): integer; begin end;
function php_getMode(): integer; begin end;
function php_getTagSets(): variant; begin end;
function php_isDead(): boolean; begin end;
procedure php_setTypeMap(const _typemap: variant); begin end;
function php_toArray(): variant; begin end;
function php_getHost(): string; begin end;
function php_getInfo(): variant; begin end;
function php_getLatency(): string; begin end;
function php_getPort(): integer; begin end;
function php_getTags(): variant; begin end;
function php_isArbiter(): boolean; begin end;
function php_isHidden(): boolean; begin end;
function php_isPassive(): boolean; begin end;
function php_isPrimary(): boolean; begin end;
function php_isSecondary(): boolean; begin end;
function php_getData(): string; begin end;
function php_getPattern(): string; begin end;
procedure php_bsonUnserialize(const _data: variant); begin end;
function php_msql_affected_rows(const _result: variant): integer; begin end;
function php_msql_close(const _link_identifier: variant): boolean; begin end;
function php_msql_connect(const _hostname: string): variant; begin end;
function php_msql_create_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_msql_data_seek(const _result: variant; const _row_number: integer): boolean; begin end;
function php_msql_db_query(const _database: string; const _query: string; const _link_identifier: variant): variant; begin end;
function php_msql_drop_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_msql_error(): string; begin end;
function php_msql_fetch_array(const _result: variant; const _result_type: integer): variant; begin end;
function php_msql_fetch_field(const _result: variant; const _field_offset: integer): variant; begin end;
function php_msql_fetch_object(const _result: variant): variant; begin end;
function php_msql_fetch_row(const _result: variant): variant; begin end;
function php_msql_field_flags(const _result: variant; const _field_offset: integer): string; begin end;
function php_msql_field_len(const _result: variant; const _field_offset: integer): integer; begin end;
function php_msql_field_name(const _result: variant; const _field_offset: integer): string; begin end;
function php_msql_field_seek(const _result: variant; const _field_offset: integer): boolean; begin end;
function php_msql_field_table(const _result: variant; const _field_offset: integer): integer; begin end;
function php_msql_field_type(const _result: variant; const _field_offset: integer): string; begin end;
function php_msql_free_result(const _result: variant): boolean; begin end;
function php_msql_list_dbs(const _link_identifier: variant): variant; begin end;
function php_msql_list_fields(const _database: string; const _tablename: string; const _link_identifier: variant): variant; begin end;
function php_msql_list_tables(const _database: string; const _link_identifier: variant): variant; begin end;
function php_msql_num_fields(const _result: variant): integer; begin end;
function php_msql_num_rows(const _query_identifier: variant): integer; begin end;
function php_msql_pconnect(const _hostname: string): variant; begin end;
function php_msql_query(const _query: string; const _link_identifier: variant): variant; begin end;
function php_msql_result(const _result: variant; const _row: integer; const _field: variant): string; begin end;
function php_msql_select_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_mssql_bind(const _stmt: variant; const _param_name: string; var _var: variant; const _type: integer; const _is_output: boolean; const _is_null: boolean; const _maxlen: integer): boolean; begin end;
function php_mssql_close(const _link_identifier: variant): boolean; begin end;
function php_mssql_connect(const _servername: string; const _username: string; const _password: string; const _new_link: boolean): variant; begin end;
function php_mssql_data_seek(const _result_identifier: variant; const _row_number: integer): boolean; begin end;
function php_mssql_execute(const _stmt: variant; const _skip_results: boolean): variant; begin end;
function php_mssql_fetch_array(const _result: variant; const _result_type: integer): variant; begin end;
function php_mssql_fetch_assoc(const _result_id: variant): variant; begin end;
function php_mssql_fetch_batch(const _result: variant): integer; begin end;
function php_mssql_fetch_field(const _result: variant; const _field_offset: integer): variant; begin end;
function php_mssql_fetch_object(const _result: variant): variant; begin end;
function php_mssql_fetch_row(const _result: variant): variant; begin end;
function php_mssql_field_length(const _result: variant; const _offset: integer): integer; begin end;
function php_mssql_field_name(const _result: variant; const _offset: integer): string; begin end;
function php_mssql_field_seek(const _result: variant; const _field_offset: integer): boolean; begin end;
function php_mssql_field_type(const _result: variant; const _offset: integer): string; begin end;
function php_mssql_free_result(const _result: variant): boolean; begin end;
function php_mssql_free_statement(const _stmt: variant): boolean; begin end;
function php_mssql_get_last_message(): string; begin end;
function php_mssql_guid_string(const _binary: string; const _short_format: boolean): string; begin end;
function php_mssql_init(const _sp_name: string; const _link_identifier: variant): variant; begin end;
procedure php_mssql_min_error_severity(const _severity: integer); begin end;
procedure php_mssql_min_message_severity(const _severity: integer); begin end;
function php_mssql_next_result(const _result_id: variant): boolean; begin end;
function php_mssql_num_fields(const _result: variant): integer; begin end;
function php_mssql_num_rows(const _result: variant): integer; begin end;
function php_mssql_pconnect(const _servername: string; const _username: string; const _password: string; const _new_link: boolean): variant; begin end;
function php_mssql_query(const _query: string; const _link_identifier: variant; const _batch_size: integer): variant; begin end;
function php_mssql_result(const _result: variant; const _row: integer; const _field: variant): string; begin end;
function php_mssql_rows_affected(const _link_identifier: variant): integer; begin end;
function php_mssql_select_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_autocommit(const _mode: boolean): boolean; begin end;
function php_change_user(const _user: string; const _password: string; const _database: string): boolean; begin end;
function php_character_set_name(): string; begin end;
function php_commit(const _flags: integer; const _name: string): boolean; begin end;
function php_debug(const _message: string): boolean; begin end;
function php_dump_debug_info(): boolean; begin end;
function php_get_charset(): variant; begin end;
function php_get_client_info(): string; begin end;
function php_get_connection_stats(): boolean; begin end;
function php_kill(const _processid: integer): boolean; begin end;
function php_more_results(): boolean; begin end;
function php_multi_query(const _query: string): boolean; begin end;
function php_next_result(): boolean; begin end;
function php_options(const _option: integer; const _value: variant): boolean; begin end;
function php_ping(): boolean; begin end;
function php_poll(var _read: variant; var _error: variant; var _reject: variant; const _sec: integer; const _usec: integer): integer; begin end;
function php_query(const _query: string; const _resultmode: integer): variant; begin end;
function php_real_connect(const _host: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string; const _flags: integer): boolean; begin end;
function php_escape_string(const _escapestr: string): string; begin end;
function php_real_query(const _query: string): boolean; begin end;
function php_refresh(const _options: integer): boolean; begin end;
function php_rollback(const _flags: integer; const _name: string): boolean; begin end;
function php_rpl_query_type(const _query: string): integer; begin end;
function php_select_db(const _dbname: string): boolean; begin end;
function php_send_query(const _query: string): boolean; begin end;
function php_set_charset(const _charset: string): boolean; begin end;
function php_set_local_infile_handler(const _link: variant; const _read_func: variant): boolean; begin end;
function php_ssl_set(const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean; begin end;
function php_stat(): string; begin end;
function php_mysqli_affected_rows(const _link: variant): integer; begin end;
function php_mysqli_autocommit(const _link: variant; const _mode: boolean): boolean; begin end;
function php_mysqli_begin_transaction(const _link: variant; const _flags: integer; const _name: string): boolean; begin end;
function php_mysqli_change_user(const _link: variant; const _user: string; const _password: string; const _database: string): boolean; begin end;
function php_mysqli_character_set_name(const _link: variant): string; begin end;
function php_mysqli_get_client_info(const _link: variant): string; begin end;
function php_mysqli_get_client_version(const _link: variant): integer; begin end;
function php_mysqli_close(const _link: variant): boolean; begin end;
function php_mysqli_commit(const _link: variant; const _flags: integer; const _name: string): boolean; begin end;
function php_mysqli_connect_errno(): integer; begin end;
function php_mysqli_connect_error(): string; begin end;
function php_mysqli_debug(const _message: string): boolean; begin end;
function php_mysqli_dump_debug_info(const _link: variant): boolean; begin end;
function php_mysqli_errno(const _link: variant): integer; begin end;
function php_mysqli_error_list(const _link: variant): variant; begin end;
function php_mysqli_error(const _link: variant): string; begin end;
function php_mysqli_field_count(const _link: variant): integer; begin end;
function php_mysqli_get_charset(const _link: variant): variant; begin end;
function php_mysqli_get_client_stats(): variant; begin end;
function php_mysqli_get_connection_stats(const _link: variant): variant; begin end;
function php_mysqli_get_host_info(const _link: variant): string; begin end;
function php_mysqli_get_proto_info(const _link: variant): integer; begin end;
function php_mysqli_get_server_info(const _link: variant): string; begin end;
function php_mysqli_get_server_version(const _link: variant): integer; begin end;
function php_mysqli_info(const _link: variant): string; begin end;
function php_mysqli_insert_id(const _link: variant): variant; begin end;
function php_mysqli_kill(const _link: variant; const _processid: integer): boolean; begin end;
function php_mysqli_more_results(const _link: variant): boolean; begin end;
function php_mysqli_multi_query(const _link: variant; const _query: string): boolean; begin end;
function php_mysqli_next_result(const _link: variant): boolean; begin end;
function php_mysqli_options(const _link: variant; const _option: integer; const _value: variant): boolean; begin end;
function php_mysqli_ping(const _link: variant): boolean; begin end;
function php_mysqli_poll(var _read: variant; var _error: variant; var _reject: variant; const _sec: integer; const _usec: integer): integer; begin end;
function php_mysqli_query(const _link: variant; const _query: string; const _resultmode: integer): variant; begin end;
function php_mysqli_real_connect(const _link: variant; const _host: string; const _username: string; const _passwd: string; const _dbname: string; const _port: integer; const _socket: string; const _flags: integer): boolean; begin end;
function php_mysqli_real_escape_string(const _link: variant; const _escapestr: string): string; begin end;
function php_mysqli_real_query(const _link: variant; const _query: string): boolean; begin end;
function php_mysqli_refresh(const _link: variant; const _options: integer): integer; begin end;
function php_mysqli_release_savepoint(const _link: variant; const _name: string): boolean; begin end;
function php_mysqli_rollback(const _link: variant; const _flags: integer; const _name: string): boolean; begin end;
function php_mysqli_rpl_query_type(const _link: variant; const _query: string): integer; begin end;
function php_mysqli_savepoint(const _link: variant; const _name: string): boolean; begin end;
function php_mysqli_select_db(const _link: variant; const _dbname: string): boolean; begin end;
function php_mysqli_send_query(const _link: variant; const _query: string): boolean; begin end;
function php_mysqli_set_charset(const _link: variant; const _charset: string): boolean; begin end;
procedure php_mysqli_set_local_infile_default(const _link: variant); begin end;
function php_mysqli_set_local_infile_handler(const _link: variant; const _read_func: variant): boolean; begin end;
function php_mysqli_sqlstate(const _link: variant): string; begin end;
function php_mysqli_ssl_set(const _link: variant; const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean; begin end;
function php_mysqli_stat(const _link: variant): string; begin end;
function php_mysqli_thread_id(const _link: variant): integer; begin end;
function php_mysqli_thread_safe(): boolean; begin end;
function php_mysqli_warning_count(const _link: variant): integer; begin end;
function php_attr_get(const _attr: integer): integer; begin end;
function php_attr_set(const _attr: integer; const _mode: integer): boolean; begin end;
function php_bind_param(const _types: string; var _var1: variant): boolean; begin end;
function php_bind_result(var _var1: variant): boolean; begin end;
procedure php_data_seek(const _offset: integer); begin end;
function php_execute(): boolean; begin end;
function php_fetch(): boolean; begin end;
procedure php_free_result(); begin end;
function php_get_warnings(const _stmt: variant): variant; begin end;
function php_prepare(const _query: string): variant; begin end;
function php_send_long_data(const _param_nr: integer; const _data: string): boolean; begin end;
function php_store_result(): boolean; begin end;
function php_mysqli_stmt_affected_rows(const _stmt: variant): integer; begin end;
function php_mysqli_stmt_attr_get(const _stmt: variant; const _attr: integer): integer; begin end;
function php_mysqli_stmt_attr_set(const _stmt: variant; const _attr: integer; const _mode: integer): boolean; begin end;
function php_mysqli_stmt_bind_param(const _stmt: variant; const _types: string; var _var1: variant): boolean; begin end;
function php_mysqli_stmt_bind_result(const _stmt: variant; var _var1: variant): boolean; begin end;
function php_mysqli_stmt_close(const _stmt: variant): boolean; begin end;
procedure php_mysqli_stmt_data_seek(const _stmt: variant; const _offset: integer); begin end;
function php_mysqli_stmt_errno(const _stmt: variant): integer; begin end;
function php_mysqli_stmt_error_list(const _stmt: variant): variant; begin end;
function php_mysqli_stmt_error(const _stmt: variant): string; begin end;
function php_mysqli_stmt_execute(const _stmt: variant): boolean; begin end;
function php_mysqli_stmt_fetch(const _stmt: variant): boolean; begin end;
function php_mysqli_stmt_field_count(const _stmt: variant): integer; begin end;
procedure php_mysqli_stmt_free_result(const _stmt: variant); begin end;
function php_mysqli_stmt_get_warnings(const _stmt: variant): variant; begin end;
function php_mysqli_stmt_insert_id(const _stmt: variant): variant; begin end;
function php_mysqli_stmt_more_results(const _stmt: variant): boolean; begin end;
function php_mysqli_stmt_next_result(const _stmt: variant): boolean; begin end;
function php_mysqli_stmt_num_rows(const _stmt: variant): integer; begin end;
function php_mysqli_stmt_param_count(const _stmt: variant): integer; begin end;
function php_mysqli_stmt_prepare(const _stmt: variant; const _query: string): boolean; begin end;
function php_mysqli_stmt_reset(const _stmt: variant): boolean; begin end;
function php_mysqli_stmt_send_long_data(const _stmt: variant; const _param_nr: integer; const _data: string): boolean; begin end;
function php_mysqli_stmt_sqlstate(const _stmt: variant): string; begin end;
function php_mysqli_stmt_store_result(const _stmt: variant): boolean; begin end;
function php_fetch_all(const _resulttype: integer): variant; begin end;
function php_fetch_array(const _resulttype: integer): variant; begin end;
function php_fetch_assoc(): variant; begin end;
function php_fetch_field_direct(const _fieldnr: integer): variant; begin end;
function php_fetch_field(): variant; begin end;
function php_fetch_fields(): variant; begin end;
function php_fetch_object(const _class_name: string; const _params: variant): variant; begin end;
function php_fetch_row(): variant; begin end;
function php_field_seek(const _fieldnr: integer): boolean; begin end;
procedure php_free(); begin end;
function php_mysqli_field_tell(const _result: variant): integer; begin end;
function php_mysqli_data_seek(const _result: variant; const _offset: integer): boolean; begin end;
function php_mysqli_fetch_all(const _result: variant; const _resulttype: integer): variant; begin end;
function php_mysqli_fetch_array(const _result: variant; const _resulttype: integer): variant; begin end;
function php_mysqli_fetch_assoc(const _result: variant): variant; begin end;
function php_mysqli_fetch_field_direct(const _result: variant; const _fieldnr: integer): variant; begin end;
function php_mysqli_fetch_field(const _result: variant): variant; begin end;
function php_mysqli_fetch_fields(const _result: variant): variant; begin end;
function php_mysqli_fetch_object(const _result: variant; const _class_name: string; const _params: variant): variant; begin end;
function php_mysqli_fetch_row(const _result: variant): variant; begin end;
function php_mysqli_num_fields(const _result: variant): integer; begin end;
function php_mysqli_field_seek(const _result: variant; const _fieldnr: integer): boolean; begin end;
procedure php_mysqli_free_result(const _result: variant); begin end;
function php_mysqli_fetch_lengths(const _result: variant): variant; begin end;
function php_mysqli_num_rows(const _result: variant): integer; begin end;
procedure php_embedded_server_end(); begin end;
function php_embedded_server_start(const _start: boolean; const _arguments: variant; const _groups: variant): boolean; begin end;
procedure php_mysqli_embedded_server_end(); begin end;
function php_mysqli_embedded_server_start(const _start: boolean; const _arguments: variant; const _groups: variant): boolean; begin end;
function php_mysqli_report(const _flags: integer): boolean; begin end;
function php_mysqli_disable_reads_from_master(const _link: variant): boolean; begin end;
function php_mysqli_disable_rpl_parse(const _link: variant): boolean; begin end;
function php_mysqli_enable_reads_from_master(const _link: variant): boolean; begin end;
function php_mysqli_enable_rpl_parse(const _link: variant): boolean; begin end;
function php_mysqli_get_cache_stats(): variant; begin end;
function php_mysqli_get_links_stats(): variant; begin end;
function php_mysqli_master_query(const _link: variant; const _query: string): boolean; begin end;
function php_mysqli_rpl_parse_enabled(const _link: variant): integer; begin end;
function php_mysqli_rpl_probe(const _link: variant): boolean; begin end;
function php_mysqli_slave_query(const _link: variant; const _query: string): boolean; begin end;
function php_mysql_affected_rows(const _link_identifier: variant): integer; begin end;
function php_mysql_client_encoding(const _link_identifier: variant): string; begin end;
function php_mysql_close(const _link_identifier: variant): boolean; begin end;
function php_mysql_connect(const _server: string): variant; begin end;
function php_mysql_create_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_mysql_data_seek(const _result: variant; const _row_number: integer): boolean; begin end;
function php_mysql_db_name(const _result: variant; const _row: integer; const _field: variant): string; begin end;
function php_mysql_db_query(const _database: string; const _query: string; const _link_identifier: variant): variant; begin end;
function php_mysql_drop_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_mysql_errno(const _link_identifier: variant): integer; begin end;
function php_mysql_error(const _link_identifier: variant): string; begin end;
function php_mysql_escape_string(const _unescaped_string: string): string; begin end;
function php_mysql_fetch_array(const _result: variant; const _result_type: integer): variant; begin end;
function php_mysql_fetch_assoc(const _result: variant): variant; begin end;
function php_mysql_fetch_field(const _result: variant; const _field_offset: integer): variant; begin end;
function php_mysql_fetch_lengths(const _result: variant): variant; begin end;
function php_mysql_fetch_object(const _result: variant; const _class_name: string; const _params: variant): variant; begin end;
function php_mysql_fetch_row(const _result: variant): variant; begin end;
function php_mysql_field_flags(const _result: variant; const _field_offset: integer): string; begin end;
function php_mysql_field_len(const _result: variant; const _field_offset: integer): integer; begin end;
function php_mysql_field_name(const _result: variant; const _field_offset: integer): string; begin end;
function php_mysql_field_seek(const _result: variant; const _field_offset: integer): boolean; begin end;
function php_mysql_field_table(const _result: variant; const _field_offset: integer): string; begin end;
function php_mysql_field_type(const _result: variant; const _field_offset: integer): string; begin end;
function php_mysql_free_result(const _result: variant): boolean; begin end;
function php_mysql_get_client_info(): string; begin end;
function php_mysql_get_host_info(const _link_identifier: variant): string; begin end;
function php_mysql_get_proto_info(const _link_identifier: variant): integer; begin end;
function php_mysql_get_server_info(const _link_identifier: variant): string; begin end;
function php_mysql_info(const _link_identifier: variant): string; begin end;
function php_mysql_insert_id(const _link_identifier: variant): integer; begin end;
function php_mysql_list_dbs(const _link_identifier: variant): variant; begin end;
function php_mysql_list_fields(const _database_name: string; const _table_name: string; const _link_identifier: variant): variant; begin end;
function php_mysql_list_processes(const _link_identifier: variant): variant; begin end;
function php_mysql_list_tables(const _database: string; const _link_identifier: variant): variant; begin end;
function php_mysql_num_fields(const _result: variant): integer; begin end;
function php_mysql_num_rows(const _result: variant): integer; begin end;
function php_mysql_pconnect(const _server: string): variant; begin end;
function php_mysql_ping(const _link_identifier: variant): boolean; begin end;
function php_mysql_query(const _query: string; const _link_identifier: variant): variant; begin end;
function php_mysql_real_escape_string(const _unescaped_string: string; const _link_identifier: variant): string; begin end;
function php_mysql_result(const _result: variant; const _row: integer; const _field: variant): string; begin end;
function php_mysql_select_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_mysql_set_charset(const _charset: string; const _link_identifier: variant): boolean; begin end;
function php_mysql_stat(const _link_identifier: variant): string; begin end;
function php_mysql_tablename(const _result: variant; const _i: integer): string; begin end;
function php_mysql_thread_id(const _link_identifier: variant): integer; begin end;
function php_mysql_unbuffered_query(const _query: string; const _link_identifier: variant): variant; begin end;
function php_mysqlnd_ms_dump_servers(const _connection: variant): variant; begin end;
function php_mysqlnd_ms_fabric_select_global(const _connection: variant; const _table_name: variant): variant; begin end;
function php_mysqlnd_ms_fabric_select_shard(const _connection: variant; const _table_name: variant; const _shard_key: variant): variant; begin end;
function php_mysqlnd_ms_get_last_gtid(const _connection: variant): string; begin end;
function php_mysqlnd_ms_get_last_used_connection(const _connection: variant): variant; begin end;
function php_mysqlnd_ms_get_stats(): variant; begin end;
function php_mysqlnd_ms_match_wild(const _table_name: string; const _wildcard: string): boolean; begin end;
function php_mysqlnd_ms_query_is_select(const _query: string): integer; begin end;
function php_mysqlnd_ms_set_qos(const _connection: variant; const _service_level: integer; const _service_level_option: integer; const _option_value: variant): boolean; begin end;
function php_mysqlnd_ms_set_user_pick_server(const _function: string): boolean; begin end;
function php_mysqlnd_ms_xa_begin(const _connection: variant; const _gtrid: string; const _timeout: integer): integer; begin end;
function php_mysqlnd_ms_xa_commit(const _connection: variant; const _gtrid: string): integer; begin end;
function php_mysqlnd_ms_xa_gc(const _connection: variant; const _gtrid: string; const _ignore_max_retries: boolean): integer; begin end;
function php_mysqlnd_ms_xa_rollback(const _connection: variant; const _gtrid: string): integer; begin end;
function php_mysqlnd_qc_clear_cache(): boolean; begin end;
function php_mysqlnd_qc_get_available_handlers(): variant; begin end;
function php_mysqlnd_qc_get_cache_info(): variant; begin end;
function php_mysqlnd_qc_get_core_stats(): variant; begin end;
function php_mysqlnd_qc_get_normalized_query_trace_log(): variant; begin end;
function php_mysqlnd_qc_get_query_trace_log(): variant; begin end;
function php_mysqlnd_qc_set_cache_condition(const _condition_type: integer; const _condition: variant; const _condition_option: variant): boolean; begin end;
function php_mysqlnd_qc_set_is_select(const _callback: string): variant; begin end;
function php_mysqlnd_qc_set_storage_handler(const _handler: string): boolean; begin end;
function php_mysqlnd_qc_set_user_handlers(const _get_hash: string; const _find_query_in_cache: string; const _return_to_cache: string; const _add_query_to_cache_if_not_exists: string; const _query_is_select: string; const _update_query_run_time_stats: string; const _get_stats: string; const _clear_cache: string): boolean; begin end;
function php_changeUser(const _connection: variant; const _user: string; const _password: string; const _database: string; const _silent: boolean; const _passwd_len: integer): boolean; begin end;
function php_charsetName(const _connection: variant): string; begin end;
function php_close(const _connection: variant; const _close_type: integer): boolean; begin end;
function php_connect(const _connection: variant; const _host: string; const _password: string; const _database: string; const _port: integer; const _socket: string; const _mysql_flags: integer): boolean; begin end;
function php_endPSession(const _connection: variant): boolean; begin end;
function php_escapeString(const _connection: variant; const _escape_string: string): string; begin end;
function php_getAffectedRows(const _connection: variant): integer; begin end;
function php_getErrorNumber(const _connection: variant): integer; begin end;
function php_getErrorString(const _connection: variant): string; begin end;
function php_getFieldCount(const _connection: variant): integer; begin end;
function php_getHostInformation(const _connection: variant): string; begin end;
function php_getLastInsertId(const _connection: variant): integer; begin end;
procedure php_getLastMessage(const _connection: variant); begin end;
function php_getProtocolInformation(const _connection: variant): string; begin end;
function php_getServerInformation(const _connection: variant): string; begin end;
function php_getServerStatistics(const _connection: variant): string; begin end;
function php_getServerVersion(const _connection: variant): integer; begin end;
function php_getSqlstate(const _connection: variant): string; begin end;
function php_getStatistics(const _connection: variant): variant; begin end;
function php_getThreadId(const _connection: variant): integer; begin end;
function php_getWarningCount(const _connection: variant): integer; begin end;
function php_init(const _connection: variant): boolean; begin end;
function php_killConnection(const _connection: variant; const _pid: integer): boolean; begin end;
function php_listFields(const _connection: variant; const _table: string; const _achtung_wild: string): variant; begin end;
procedure php_listMethod(const _connection: variant; const _query: string; const _achtung_wild: string; const _par1: string); begin end;
function php_moreResults(const _connection: variant): boolean; begin end;
function php_nextResult(const _connection: variant): boolean; begin end;
function php_ping(const _connection: variant): boolean; begin end;
function php_query(const _connection: variant; const _query: string): boolean; begin end;
function php_queryReadResultsetHeader(const _connection: variant; const _mysqlnd_stmt: variant): boolean; begin end;
function php_reapQuery(const _connection: variant): boolean; begin end;
function php_refreshServer(const _connection: variant; const _options: integer): boolean; begin end;
function php_restartPSession(const _connection: variant): boolean; begin end;
function php_selectDb(const _connection: variant; const _database: string): boolean; begin end;
function php_sendClose(const _connection: variant): boolean; begin end;
function php_sendQuery(const _connection: variant; const _query: string): boolean; begin end;
function php_serverDumpDebugInformation(const _connection: variant): boolean; begin end;
function php_setAutocommit(const _connection: variant; const _mode: integer): boolean; begin end;
function php_setCharset(const _connection: variant; const _charset: string): boolean; begin end;
function php_setClientOption(const _connection: variant; const _option: integer; const _value: integer): boolean; begin end;
procedure php_setServerOption(const _connection: variant; const _option: integer); begin end;
procedure php_shutdownServer(const _MYSQLND_UH_RES_MYSQLND_NAME: string); begin end;
function php_simpleCommand(const _connection: variant; const _command: integer; const _arg: string; const _ok_packet: integer; const _silent: boolean; const _ignore_upsert_status: boolean): boolean; begin end;
function php_simpleCommandHandleResponse(const _connection: variant; const _ok_packet: integer; const _silent: boolean; const _command: integer; const _ignore_upsert_status: boolean): boolean; begin end;
function php_sslSet(const _connection: variant; const _key: string; const _cert: string; const _ca: string; const _capath: string; const _cipher: string): boolean; begin end;
function php_stmtInit(const _connection: variant): variant; begin end;
function php_storeResult(const _connection: variant): variant; begin end;
function php_txCommit(const _connection: variant): boolean; begin end;
function php_txRollback(const _connection: variant): boolean; begin end;
function php_useResult(const _connection: variant): variant; begin end;
function php_prepare(const _statement: variant; const _query: string): boolean; begin end;
function php_mysqlnd_uh_convert_to_mysqlnd(var _mysql_connection: variant): variant; begin end;
function php_mysqlnd_uh_set_connection_proxy(var _connection_proxy: variant; var _mysqli_connection: variant): boolean; begin end;
function php_mysqlnd_uh_set_statement_proxy(var _statement_proxy: variant): boolean; begin end;
function php_mysqlnd_memcache_get_config(const _connection: variant): variant; begin end;
function php_mysqlnd_memcache_set(const _mysql_connection: variant; const _memcache_connection: variant; const _pattern: string; const _callback: variant): boolean; begin end;
function php_oci_bind_array_by_name(const _statement: variant; const _name: string; var _var_array: variant; const _max_table_length: integer; const _max_item_length: integer; const _type: integer): boolean; begin end;
function php_oci_bind_by_name(const _statement: variant; const _bv_name: string; var _variable: variant; const _maxlength: integer; const _type: integer): boolean; begin end;
function php_oci_cancel(const _statement: variant): boolean; begin end;
function php_oci_client_version(): string; begin end;
function php_oci_close(const _connection: variant): boolean; begin end;
function php_oci_commit(const _connection: variant): boolean; begin end;
function php_oci_connect(const _username: string; const _password: string; const _connection_string: string; const _character_set: string; const _session_mode: integer): variant; begin end;
function php_oci_define_by_name(const _statement: variant; const _column_name: string; var _variable: variant; const _type: integer): boolean; begin end;
function php_oci_error(const _resource: variant): variant; begin end;
function php_oci_execute(const _statement: variant; const _mode: integer): boolean; begin end;
function php_oci_fetch_all(const _statement: variant; var _output: variant; const _skip: integer; const _maxrows: integer; const _flags: integer): integer; begin end;
function php_oci_fetch_array(const _statement: variant; const _mode: integer): variant; begin end;
function php_oci_fetch_assoc(const _statement: variant): variant; begin end;
function php_oci_fetch_object(const _statement: variant): variant; begin end;
function php_oci_fetch_row(const _statement: variant): variant; begin end;
function php_oci_fetch(const _statement: variant): boolean; begin end;
function php_oci_field_is_null(const _statement: variant; const _field: variant): boolean; begin end;
function php_oci_field_name(const _statement: variant; const _field: variant): string; begin end;
function php_oci_field_precision(const _statement: variant; const _field: variant): integer; begin end;
function php_oci_field_scale(const _statement: variant; const _field: variant): integer; begin end;
function php_oci_field_size(const _statement: variant; const _field: variant): integer; begin end;
function php_oci_field_type_raw(const _statement: variant; const _field: variant): integer; begin end;
function php_oci_field_type(const _statement: variant; const _field: variant): variant; begin end;
function php_oci_free_descriptor(const _descriptor: variant): boolean; begin end;
function php_oci_free_statement(const _statement: variant): boolean; begin end;
function php_oci_get_implicit_resultset(const _statement: variant): variant; begin end;
procedure php_oci_internal_debug(const _onoff: boolean); begin end;
function php_oci_lob_copy(const _lob_to: variant; const _lob_from: variant; const _length: integer): boolean; begin end;
function php_oci_lob_is_equal(const _lob1: variant; const _lob2: variant): boolean; begin end;
function php_oci_new_connect(const _username: string; const _password: string; const _connection_string: string; const _character_set: string; const _session_mode: integer): variant; begin end;
function php_oci_new_cursor(const _connection: variant): variant; begin end;
function php_oci_num_fields(const _statement: variant): integer; begin end;
function php_oci_num_rows(const _statement: variant): integer; begin end;
function php_oci_parse(const _connection: variant; const _sql_text: string): variant; begin end;
function php_oci_password_change(const _connection: variant; const _username: string; const _old_password: string; const _new_password: string): boolean; begin end;
function php_oci_password_change(const _dbname: string; const _username: string; const _old_password: string; const _new_password: string): variant; begin end;
function php_oci_pconnect(const _username: string; const _password: string; const _connection_string: string; const _character_set: string; const _session_mode: integer): variant; begin end;
function php_oci_result(const _statement: variant; const _field: variant): variant; begin end;
function php_oci_rollback(const _connection: variant): boolean; begin end;
function php_oci_server_version(const _connection: variant): string; begin end;
function php_oci_set_action(const _connection: variant; const _action_name: string): boolean; begin end;
function php_oci_set_client_identifier(const _connection: variant; const _client_identifier: string): boolean; begin end;
function php_oci_set_client_info(const _connection: variant; const _client_info: string): boolean; begin end;
function php_oci_set_edition(const _edition: string): boolean; begin end;
function php_oci_set_module_name(const _connection: variant; const _module_name: string): boolean; begin end;
function php_oci_set_prefetch(const _statement: variant; const _rows: integer): boolean; begin end;
function php_oci_statement_type(const _statement: variant): string; begin end;
function php_append(const _value: variant): boolean; begin end;
function php_assign(const _from: variant): boolean; begin end;
function php_assignElem(const _index: integer; const _value: variant): boolean; begin end;
function php_getElem(const _index: integer): variant; begin end;
function php_max(): integer; begin end;
function php_size(): integer; begin end;
function php_trim(const _num: integer): boolean; begin end;
function php_eof(): boolean; begin end;
function php_erase(const _offset: integer; const _length: integer): integer; begin end;
function php_export(const _filename: string; const _start: integer; const _length: integer): boolean; begin end;
function php_flush(const _flag: integer): boolean; begin end;
function php_getBuffering(): boolean; begin end;
function php_import(const _filename: string): boolean; begin end;
function php_load(): string; begin end;
function php_read(const _length: integer): string; begin end;
function php_save(const _data: string; const _offset: integer): boolean; begin end;
function php_seek(const _offset: integer; const _whence: integer): boolean; begin end;
function php_setBuffering(const _on_off: boolean): boolean; begin end;
function php_tell(): integer; begin end;
function php_truncate(const _length: integer): boolean; begin end;
function php_write(const _data: string; const _length: integer): integer; begin end;
function php_writeTemporary(const _data: string; const _lob_type: integer): boolean; begin end;
function php_px_close(const _pxdoc: variant): boolean; begin end;
function php_px_create_fp(const _pxdoc: variant; const _file: variant; const _fielddesc: variant): boolean; begin end;
function php_px_date2string(const _pxdoc: variant; const _value: integer; const _format: string): string; begin end;
function php_px_delete_record(const _pxdoc: variant; const _num: integer): boolean; begin end;
function php_px_delete(const _pxdoc: variant): boolean; begin end;
function php_px_get_field(const _pxdoc: variant; const _fieldno: integer): variant; begin end;
function php_px_get_info(const _pxdoc: variant): variant; begin end;
function php_px_get_parameter(const _pxdoc: variant; const _name: string): string; begin end;
function php_px_get_record(const _pxdoc: variant; const _num: integer; const _mode: integer): variant; begin end;
function php_px_get_schema(const _pxdoc: variant; const _mode: integer): variant; begin end;
function php_px_get_value(const _pxdoc: variant; const _name: string): extended; begin end;
function php_px_insert_record(const _pxdoc: variant; const _data: variant): integer; begin end;
function php_px_new(): variant; begin end;
function php_px_numfields(const _pxdoc: variant): integer; begin end;
function php_px_numrecords(const _pxdoc: variant): integer; begin end;
function php_px_open_fp(const _pxdoc: variant; const _file: variant): boolean; begin end;
function php_px_put_record(const _pxdoc: variant; const _record: variant; const _recpos: integer): boolean; begin end;
function php_px_retrieve_record(const _pxdoc: variant; const _num: integer; const _mode: integer): variant; begin end;
function php_px_set_blob_file(const _pxdoc: variant; const _filename: string): boolean; begin end;
function php_px_set_parameter(const _pxdoc: variant; const _name: string; const _value: string): boolean; begin end;
procedure php_px_set_tablename(const _pxdoc: variant; const _name: string); begin end;
function php_px_set_targetencoding(const _pxdoc: variant; const _encoding: string): boolean; begin end;
function php_px_set_value(const _pxdoc: variant; const _name: string; const _value: extended): boolean; begin end;
function php_px_timestamp2string(const _pxdoc: variant; const _value: extended; const _format: string): string; begin end;
function php_px_update_record(const _pxdoc: variant; const _data: variant; const _num: integer): boolean; begin end;
function php_pg_affected_rows(const _result: variant): integer; begin end;
function php_pg_cancel_query(const _connection: variant): boolean; begin end;
function php_pg_client_encoding(const _connection: variant): string; begin end;
function php_pg_close(const _connection: variant): boolean; begin end;
function php_pg_connect_poll(const _connection: variant): integer; begin end;
function php_pg_connect(const _connection_string: string; const _connect_type: integer): variant; begin end;
function php_pg_connection_busy(const _connection: variant): boolean; begin end;
function php_pg_connection_reset(const _connection: variant): boolean; begin end;
function php_pg_connection_status(const _connection: variant): integer; begin end;
function php_pg_consume_input(const _connection: variant): boolean; begin end;
function php_pg_convert(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant; begin end;
function php_pg_copy_from(const _connection: variant; const _table_name: string; const _rows: variant; const _delimiter: string; const _null_as: string): boolean; begin end;
function php_pg_copy_to(const _connection: variant; const _table_name: string; const _delimiter: string; const _null_as: string): variant; begin end;
function php_pg_dbname(const _connection: variant): string; begin end;
function php_pg_delete(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant; begin end;
function php_pg_end_copy(const _connection: variant): boolean; begin end;
function php_pg_escape_bytea(const _connection: variant; const _data: string): string; begin end;
function php_pg_escape_identifier(const _connection: variant; const _data: string): string; begin end;
function php_pg_escape_literal(const _connection: variant; const _data: string): string; begin end;
function php_pg_escape_string(const _connection: variant; const _data: string): string; begin end;
function php_pg_execute(const _connection: variant; const _stmtname: string; const _params: variant): variant; begin end;
function php_pg_fetch_all_columns(const _result: variant; const _column: integer): variant; begin end;
function php_pg_fetch_all(const _result: variant): variant; begin end;
function php_pg_fetch_array(const _result: variant; const _row: integer; const _result_type: integer): variant; begin end;
function php_pg_fetch_assoc(const _result: variant; const _row: integer): variant; begin end;
function php_pg_fetch_object(const _result: variant; const _row: integer; const _result_type: integer): variant; begin end;
function php_pg_fetch_object(const _result: variant; const _row: integer; const _class_name: string; const _params: variant): variant; begin end;
function php_pg_fetch_result(const _result: variant; const _row: integer; const _field: variant): string; begin end;
function php_pg_fetch_result(const _result: variant; const _field: variant): string; begin end;
function php_pg_fetch_row(const _result: variant; const _row: integer): variant; begin end;
function php_pg_field_is_null(const _result: variant; const _row: integer; const _field: variant): integer; begin end;
function php_pg_field_is_null(const _result: variant; const _field: variant): integer; begin end;
function php_pg_field_name(const _result: variant; const _field_number: integer): string; begin end;
function php_pg_field_num(const _result: variant; const _field_name: string): integer; begin end;
function php_pg_field_prtlen(const _result: variant; const _row_number: integer; const _field_name_or_number: variant): integer; begin end;
function php_pg_field_prtlen(const _result: variant; const _field_name_or_number: variant): integer; begin end;
function php_pg_field_size(const _result: variant; const _field_number: integer): integer; begin end;
function php_pg_field_table(const _result: variant; const _field_number: integer; const _oid_only: boolean): variant; begin end;
function php_pg_field_type_oid(const _result: variant; const _field_number: integer): integer; begin end;
function php_pg_field_type(const _result: variant; const _field_number: integer): string; begin end;
function php_pg_flush(const _connection: variant): variant; begin end;
function php_pg_free_result(const _result: variant): boolean; begin end;
function php_pg_get_notify(const _connection: variant; const _result_type: integer): variant; begin end;
function php_pg_get_pid(const _connection: variant): integer; begin end;
function php_pg_get_result(const _connection: variant): variant; begin end;
function php_pg_host(const _connection: variant): string; begin end;
function php_pg_insert(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant; begin end;
function php_pg_last_error(const _connection: variant): string; begin end;
function php_pg_last_notice(const _connection: variant): string; begin end;
function php_pg_last_oid(const _result: variant): string; begin end;
function php_pg_lo_close(const _large_object: variant): boolean; begin end;
function php_pg_lo_create(const _connection: variant; const _object_id: variant): integer; begin end;
function php_pg_lo_create(const _object_id: variant): integer; begin end;
function php_pg_lo_export(const _connection: variant; const _oid: integer; const _pathname: string): boolean; begin end;
function php_pg_lo_import(const _connection: variant; const _pathname: string; const _object_id: variant): integer; begin end;
function php_pg_lo_open(const _connection: variant; const _oid: integer; const _mode: string): variant; begin end;
function php_pg_lo_read_all(const _large_object: variant): integer; begin end;
function php_pg_lo_read(const _large_object: variant; const _len: integer): string; begin end;
function php_pg_lo_seek(const _large_object: variant; const _offset: integer; const _whence: integer): boolean; begin end;
function php_pg_lo_tell(const _large_object: variant): integer; begin end;
function php_pg_lo_truncate(const _large_object: variant; const _size: integer): boolean; begin end;
function php_pg_lo_unlink(const _connection: variant; const _oid: integer): boolean; begin end;
function php_pg_lo_write(const _large_object: variant; const _data: string; const _len: integer): integer; begin end;
function php_pg_meta_data(const _connection: variant; const _table_name: string; const _extended: boolean): variant; begin end;
function php_pg_num_fields(const _result: variant): integer; begin end;
function php_pg_num_rows(const _result: variant): integer; begin end;
function php_pg_options(const _connection: variant): string; begin end;
function php_pg_parameter_status(const _connection: variant; const _param_name: string): string; begin end;
function php_pg_pconnect(const _connection_string: string; const _connect_type: integer): variant; begin end;
function php_pg_ping(const _connection: variant): boolean; begin end;
function php_pg_port(const _connection: variant): integer; begin end;
function php_pg_prepare(const _connection: variant; const _stmtname: string; const _query: string): variant; begin end;
function php_pg_put_line(const _connection: variant; const _data: string): boolean; begin end;
function php_pg_query_params(const _connection: variant; const _query: string; const _params: variant): variant; begin end;
function php_pg_query(const _connection: variant; const _query: string): variant; begin end;
function php_pg_result_error_field(const _result: variant; const _fieldcode: integer): string; begin end;
function php_pg_result_error(const _result: variant): string; begin end;
function php_pg_result_seek(const _result: variant; const _offset: integer): boolean; begin end;
function php_pg_result_status(const _result: variant; const _type: integer): variant; begin end;
function php_pg_select(const _connection: variant; const _table_name: string; const _assoc_array: variant; const _options: integer): variant; begin end;
function php_pg_send_execute(const _connection: variant; const _stmtname: string; const _params: variant): boolean; begin end;
function php_pg_send_prepare(const _connection: variant; const _stmtname: string; const _query: string): boolean; begin end;
function php_pg_send_query_params(const _connection: variant; const _query: string; const _params: variant): boolean; begin end;
function php_pg_send_query(const _connection: variant; const _query: string): boolean; begin end;
function php_pg_set_client_encoding(const _connection: variant; const _encoding: string): integer; begin end;
function php_pg_set_error_verbosity(const _connection: variant; const _verbosity: integer): integer; begin end;
function php_pg_socket(const _connection: variant): variant; begin end;
function php_pg_trace(const _pathname: string; const _mode: string; const _connection: variant): boolean; begin end;
function php_pg_transaction_status(const _connection: variant): integer; begin end;
function php_pg_tty(const _connection: variant): string; begin end;
function php_pg_unescape_bytea(const _data: string): string; begin end;
function php_pg_untrace(const _connection: variant): boolean; begin end;
function php_pg_update(const _connection: variant; const _table_name: string; const _data: variant; const _condition: variant; const _options: integer): variant; begin end;
function php_pg_version(const _connection: variant): variant; begin end;
function php_sqlite_array_query(const _dbhandle: variant; const _query: string; const _result_type: integer; const _decode_binary: boolean): variant; begin end;
function php_sqlite_array_query(const _query: string; const _dbhandle: variant; const _result_type: integer; const _decode_binary: boolean): variant; begin end;
procedure php_sqlite_busy_timeout(const _dbhandle: variant; const _milliseconds: integer); begin end;
function php_sqlite_changes(const _dbhandle: variant): integer; begin end;
procedure php_sqlite_close(const _dbhandle: variant); begin end;
function php_sqlite_column(const _result: variant; const _index_or_name: variant; const _decode_binary: boolean): variant; begin end;
procedure php_sqlite_create_aggregate(const _dbhandle: variant; const _function_name: string; const _step_func: variant; const _finalize_func: variant; const _num_args: integer); begin end;
procedure php_sqlite_create_function(const _dbhandle: variant; const _function_name: string; const _callback: variant; const _num_args: integer); begin end;
function php_sqlite_current(const _result: variant; const _result_type: integer; const _decode_binary: boolean): variant; begin end;
function php_sqlite_error_string(const _error_code: integer): string; begin end;
function php_sqlite_escape_string(const _item: string): string; begin end;
function php_sqlite_exec(const _dbhandle: variant; const _query: string; var _error_msg: string): boolean; begin end;
function php_sqlite_exec(const _query: string; const _dbhandle: variant): boolean; begin end;
function php_sqlite_fetch_all(const _result: variant; const _result_type: integer; const _decode_binary: boolean): variant; begin end;
function php_sqlite_fetch_array(const _result: variant; const _result_type: integer; const _decode_binary: boolean): variant; begin end;
function php_sqlite_fetch_column_types(const _table_name: string; const _dbhandle: variant; const _result_type: integer): variant; begin end;
function php_sqlite_fetch_object(const _result: variant; const _class_name: string; const _ctor_params: variant; const _decode_binary: boolean): variant; begin end;
function php_sqlite_fetch_single(const _result: variant; const _decode_binary: boolean): string; begin end;
function php_sqlite_field_name(const _result: variant; const _field_index: integer): string; begin end;
function php_sqlite_has_more(const _result: variant): boolean; begin end;
function php_sqlite_has_prev(const _result: variant): boolean; begin end;
function php_sqlite_last_error(const _dbhandle: variant): integer; begin end;
function php_sqlite_last_insert_rowid(const _dbhandle: variant): integer; begin end;
function php_sqlite_libencoding(): string; begin end;
function php_sqlite_libversion(): string; begin end;
function php_sqlite_next(const _result: variant): boolean; begin end;
function php_sqlite_num_fields(const _result: variant): integer; begin end;
function php_sqlite_num_rows(const _result: variant): integer; begin end;
function php_sqlite_open(const _filename: string; const _mode: integer; var _error_message: string): variant; begin end;
function php_sqlite_popen(const _filename: string; const _mode: integer; var _error_message: string): variant; begin end;
function php_sqlite_prev(const _result: variant): boolean; begin end;
function php_sqlite_query(const _dbhandle: variant; const _query: string; const _result_type: integer; var _error_msg: string): variant; begin end;
function php_sqlite_query(const _query: string; const _dbhandle: variant; const _result_type: integer; var _error_msg: string): variant; begin end;
function php_sqlite_rewind(const _result: variant): boolean; begin end;
function php_sqlite_seek(const _result: variant; const _rownum: integer): boolean; begin end;
function php_sqlite_single_query(const _db: variant; const _query: string; const _first_row_only: boolean; const _decode_binary: boolean): variant; begin end;
function php_sqlite_udf_decode_binary(const _data: string): string; begin end;
function php_sqlite_udf_encode_binary(const _data: string): string; begin end;
function php_sqlite_unbuffered_query(const _dbhandle: variant; const _query: string; const _result_type: integer; var _error_msg: string): variant; begin end;
function php_sqlite_unbuffered_query(const _query: string; const _dbhandle: variant; const _result_type: integer; var _error_msg: string): variant; begin end;
function php_sqlite_valid(const _result: variant): boolean; begin end;
function php_busyTimeout(const _msecs: integer): boolean; begin end;
function php_changes(): integer; begin end;
function php_createAggregate(const _name: string; const _step_callback: variant; const _final_callback: variant; const _argument_count: integer): boolean; begin end;
function php_createCollation(const _name: string; const _callback: variant): boolean; begin end;
function php_createFunction(const _name: string; const _callback: variant; const _argument_count: integer): boolean; begin end;
function php_enableExceptions(const _enableExceptions: boolean): boolean; begin end;
function php_escapeString(const _value: string): string; begin end;
function php_lastErrorCode(): integer; begin end;
function php_lastErrorMsg(): string; begin end;
function php_lastInsertRowID(): integer; begin end;
function php_loadExtension(const _shared_library: string): boolean; begin end;
procedure php_open(const _filename: string; const _flags: integer; const _encryption_key: string); begin end;
function php_querySingle(const _query: string; const _entire_row: boolean): variant; begin end;
function php_version(): variant; begin end;
function php_bindParam(const _sql_param: string; var _param: variant; const _type: integer): boolean; begin end;
function php_bindValue(const _sql_param: string; const _value: variant; const _type: integer): boolean; begin end;
function php_clear(): boolean; begin end;
function php_paramCount(): integer; begin end;
function php_columnName(const _column_number: integer): string; begin end;
function php_columnType(const _column_number: integer): integer; begin end;
function php_fetchArray(const _mode: integer): variant; begin end;
function php_finalize(): boolean; begin end;
function php_numColumns(): integer; begin end;
function php_sqlsrv_begin_transaction(const _conn: variant): boolean; begin end;
function php_sqlsrv_cancel(const _stmt: variant): boolean; begin end;
function php_sqlsrv_client_info(const _conn: variant): variant; begin end;
function php_sqlsrv_close(const _conn: variant): boolean; begin end;
function php_sqlsrv_commit(const _conn: variant): boolean; begin end;
function php_sqlsrv_configure(const _setting: string; const _value: variant): boolean; begin end;
function php_sqlsrv_connect(const _serverName: string; const _connectionInfo: variant): variant; begin end;
function php_sqlsrv_errors(const _errorsOrWarnings: integer): variant; begin end;
function php_sqlsrv_execute(const _stmt: variant): boolean; begin end;
function php_sqlsrv_fetch_array(const _stmt: variant; const _fetchType: integer; const _row: integer; const _offset: integer): variant; begin end;
function php_sqlsrv_fetch_object(const _stmt: variant; const _className: string; const _ctorParams: variant; const _row: integer; const _offset: integer): variant; begin end;
function php_sqlsrv_fetch(const _stmt: variant; const _row: integer; const _offset: integer): variant; begin end;
function php_sqlsrv_field_metadata(const _stmt: variant): variant; begin end;
function php_sqlsrv_free_stmt(const _stmt: variant): boolean; begin end;
function php_sqlsrv_get_config(const _setting: string): variant; begin end;
function php_sqlsrv_get_field(const _stmt: variant; const _fieldIndex: integer; const _getAsType: integer): variant; begin end;
function php_sqlsrv_has_rows(const _stmt: variant): boolean; begin end;
function php_sqlsrv_next_result(const _stmt: variant): variant; begin end;
function php_sqlsrv_num_fields(const _stmt: variant): variant; begin end;
function php_sqlsrv_num_rows(const _stmt: variant): variant; begin end;
function php_sqlsrv_prepare(const _conn: variant; const _sql: string; const _params: variant; const _options: variant): variant; begin end;
function php_sqlsrv_query(const _conn: variant; const _sql: string; const _params: variant; const _options: variant): variant; begin end;
function php_sqlsrv_rollback(const _conn: variant): boolean; begin end;
function php_sqlsrv_rows_affected(const _stmt: variant): integer; begin end;
function php_sqlsrv_send_stream_data(const _stmt: variant): boolean; begin end;
function php_sqlsrv_server_info(const _conn: variant): variant; begin end;
function php_sybase_affected_rows(const _link_identifier: variant): integer; begin end;
function php_sybase_close(const _link_identifier: variant): boolean; begin end;
function php_sybase_connect(const _servername: string; const _username: string; const _password: string; const _charset: string; const _appname: string; const _new: boolean): variant; begin end;
function php_sybase_data_seek(const _result_identifier: variant; const _row_number: integer): boolean; begin end;
procedure php_sybase_deadlock_retry_count(const _retry_count: integer); begin end;
function php_sybase_fetch_array(const _result: variant): variant; begin end;
function php_sybase_fetch_assoc(const _result: variant): variant; begin end;
function php_sybase_fetch_field(const _result: variant; const _field_offset: integer): variant; begin end;
function php_sybase_fetch_object(const _result: variant; const _object: variant): variant; begin end;
function php_sybase_fetch_row(const _result: variant): variant; begin end;
function php_sybase_field_seek(const _result: variant; const _field_offset: integer): boolean; begin end;
function php_sybase_free_result(const _result: variant): boolean; begin end;
function php_sybase_get_last_message(): string; begin end;
procedure php_sybase_min_client_severity(const _severity: integer); begin end;
procedure php_sybase_min_error_severity(const _severity: integer); begin end;
procedure php_sybase_min_message_severity(const _severity: integer); begin end;
procedure php_sybase_min_server_severity(const _severity: integer); begin end;
function php_sybase_num_fields(const _result: variant): integer; begin end;
function php_sybase_num_rows(const _result: variant): integer; begin end;
function php_sybase_pconnect(const _servername: string; const _username: string; const _password: string; const _charset: string; const _appname: string): variant; begin end;
function php_sybase_query(const _query: string; const _link_identifier: variant): variant; begin end;
function php_sybase_result(const _result: variant; const _row: integer; const _field: variant): string; begin end;
function php_sybase_select_db(const _database_name: string; const _link_identifier: variant): boolean; begin end;
function php_sybase_set_message_handler(const _handler: variant; const _link_identifier: variant): boolean; begin end;
function php_sybase_unbuffered_query(const _query: string; const _link_identifier: variant; const _store_result: boolean): variant; begin end;
function php_add(const _key: string; const _increment: variant; const _type: integer): variant; begin end;
function php_ext(const _name: string; const _options: integer; const _key: string; const _value: string): string; begin end;
function php_fwmKeys(const _prefix: string; const _max_recs: integer): variant; begin end;
function php_get(const _keys: variant): variant; begin end;
function php_num(): integer; begin end;
function php_putShl(const _key: string; const _value: string; const _width: integer): variant; begin end;
function php_restore(const _log_dir: string; const _timestamp: integer; const _check_consistency: boolean): variant; begin end;
function php_setMaster(const _host: string; const _port: integer; const _timestamp: integer; const _check_consistency: boolean): variant; begin end;
function php_size(const _key: string): integer; begin end;
function php_sync(): variant; begin end;
function php_vanish(): variant; begin end;
procedure php_add(const _key: string; const _increment: variant; const _type: string); begin end;
function php_genUid(): integer; begin end;
procedure php_out(const _keys: variant); begin end;
procedure php_putCat(const _key: string; const _columns: variant); begin end;
procedure php_putKeep(const _key: string; const _columns: variant); begin end;
procedure php_putNr(const _keys: variant; const _value: string); begin end;
function php_setIndex(const _column: string; const _type: integer): variant; begin end;
function php_addCond(const _name: string; const _op: integer; const _expr: string): variant; begin end;
function php_hint(): string; begin end;
function php_metaSearch(const _queries: variant; const _type: integer): variant; begin end;
function php_search(): variant; begin end;
function php_setLimit(const _max: integer; const _skip: integer): variant; begin end;
function php_setOrder(const _name: string; const _type: integer): variant; begin end;
function php_cal_days_in_month(const _calendar: integer; const _month: integer; const _year: integer): integer; begin end;
function php_cal_from_jd(const _jd: integer; const _calendar: integer): variant; begin end;
function php_cal_info(const _calendar: integer): variant; begin end;
function php_cal_to_jd(const _calendar: integer; const _month: integer; const _day: integer; const _year: integer): integer; begin end;
function php_easter_date(const _year: integer): integer; begin end;
function php_easter_days(const _year: integer): integer; begin end;
function php_frenchtojd(const _month: integer; const _day: integer; const _year: integer): integer; begin end;
function php_gregoriantojd(const _month: integer; const _day: integer; const _year: integer): integer; begin end;
function php_jddayofweek(const _julianday: integer; const _mode: integer): variant; begin end;
function php_jdmonthname(const _julianday: integer; const _mode: integer): string; begin end;
function php_jdtofrench(const _juliandaycount: integer): string; begin end;
function php_jdtogregorian(const _julianday: integer): string; begin end;
function php_jdtojewish(const _juliandaycount: integer; const _hebrew: boolean; const _fl: integer): string; begin end;
function php_jdtojulian(const _julianday: integer): string; begin end;
function php_jdtounix(const _jday: integer): integer; begin end;
function php_jewishtojd(const _month: integer; const _day: integer; const _year: integer): integer; begin end;
function php_juliantojd(const _month: integer; const _day: integer; const _year: integer): integer; begin end;
function php_unixtojd(const _timestamp: integer): integer; begin end;
function php_getLastErrors(): variant; begin end;
function php_format(const _format: string): string; begin end;
function php_getOffset(): integer; begin end;
function php_date_get_last_errors(): variant; begin end;
function php_date_format(const _object: variant; const _format: string): string; begin end;
function php_date_offset_get(const _object: variant): integer; begin end;
function php_date_timestamp_get(const _object: variant): integer; begin end;
function php_getLocation(): variant; begin end;
function php_getOffset(const _datetime: variant): integer; begin end;
function php_getTransitions(const _timestamp_begin: integer; const _timestamp_end: integer): variant; begin end;
function php_listAbbreviations(): variant; begin end;
function php_listIdentifiers(const _what: integer; const _country: string): variant; begin end;
function php_timezone_location_get(const _object: variant): variant; begin end;
function php_timezone_name_get(const _object: variant): string; begin end;
function php_timezone_offset_get(const _object: variant; const _datetime: variant): integer; begin end;
function php_timezone_transitions_get(const _object: variant; const _timestamp_begin: integer; const _timestamp_end: integer): variant; begin end;
function php_timezone_abbreviations_list(): variant; begin end;
function php_timezone_identifiers_list(const _what: integer; const _country: string): variant; begin end;
function php_checkdate(const _month: integer; const _day: integer; const _year: integer): boolean; begin end;
function php_date_default_timezone_get(): string; begin end;
function php_date_default_timezone_set(const _timezone_identifier: string): boolean; begin end;
function php_date_parse_from_format(const _format: string; const _date: string): variant; begin end;
function php_date_parse(const _date: string): variant; begin end;
function php_date_sun_info(const _time: integer; const _latitude: extended; const _longitude: extended): variant; begin end;
function php_date_sunrise(const _timestamp: integer; const _format: integer; const _latitude: extended): variant; begin end;
function php_date_sunset(const _timestamp: integer; const _format: integer; const _latitude: extended): variant; begin end;
function php_date(const _format: string; const _timestamp: integer): string; begin end;
function php_getdate(const _timestamp: integer): variant; begin end;
function php_gettimeofday(const _return_float: boolean): variant; begin end;
function php_gmdate(const _format: string; const _timestamp: integer): string; begin end;
function php_gmmktime(const _hour: integer): integer; begin end;
function php_gmstrftime(const _format: string; const _timestamp: integer): string; begin end;
function php_idate(const _format: string; const _timestamp: integer): integer; begin end;
function php_localtime(const _timestamp: integer): variant; begin end;
function php_microtime(const _get_as_float: boolean): variant; begin end;
function php_mktime(const _hour: integer): integer; begin end;
function php_strftime(const _format: string; const _timestamp: integer): string; begin end;
function php_strptime(const _date: string; const _format: string): variant; begin end;
function php_strtotime(const _time: string; const _now: integer): integer; begin end;
function php_time(): integer; begin end;
function php_timezone_name_from_abbr(const _abbr: string; const _gmtOffset: integer; const _isdst: integer): string; begin end;
function php_timezone_version_get(): string; begin end;
function php_getElapsedTicks(): integer; begin end;
function php_getFrequency(): integer; begin end;
function php_getLastElapsedTicks(): integer; begin end;
function php_isRunning(): boolean; begin end;
procedure php_start(); begin end;
procedure php_stop(); begin end;
function php_getElapsedTime(const _unit: integer): extended; begin end;
function php_getLastElapsedTime(const _unit: integer): extended; begin end;
procedure php_dio_close(const _fd: variant); begin end;
function php_dio_fcntl(const _fd: variant; const _cmd: integer; const _args: variant): variant; begin end;
function php_dio_open(const _filename: string; const _flags: integer; const _mode: integer): variant; begin end;
function php_dio_read(const _fd: variant; const _len: integer): string; begin end;
function php_dio_seek(const _fd: variant; const _pos: integer; const _whence: integer): integer; begin end;
function php_dio_stat(const _fd: variant): variant; begin end;
function php_dio_tcsetattr(const _fd: variant; const _options: variant): boolean; begin end;
function php_dio_truncate(const _fd: variant; const _offset: integer): boolean; begin end;
function php_dio_write(const _fd: variant; const _data: string; const _len: integer): integer; begin end;
function php_read(const _dir_handle: variant): string; begin end;
procedure php_rewind(const _dir_handle: variant); begin end;
function php_chdir(const _directory: string): boolean; begin end;
function php_chroot(const _directory: string): boolean; begin end;
procedure php_closedir(const _dir_handle: variant); begin end;
function php_getcwd(): string; begin end;
function php_opendir(const _path: string; const _context: variant): variant; begin end;
function php_readdir(const _dir_handle: variant): string; begin end;
procedure php_rewinddir(const _dir_handle: variant); begin end;
function php_scandir(const _directory: string; const _sorting_order: integer; const _context: variant): variant; begin end;
function php_finfo_buffer(const _finfo: variant; const _string: string; const _options: integer; const _context: variant): string; begin end;
function php_finfo_close(const _finfo: variant): boolean; begin end;
function php_finfo_file(const _finfo: variant; const _file_name: string; const _options: integer; const _context: variant): string; begin end;
function php_finfo_open(const _options: integer; const _magic_file: string): variant; begin end;
function php_finfo_set_flags(const _finfo: variant; const _options: integer): boolean; begin end;
function php_mime_content_type(const _filename: string): string; begin end;
function php_buffer(const _string: string; const _options: integer; const _context: variant): string; begin end;
function php_file(const _file_name: string; const _options: integer; const _context: variant): string; begin end;
function php_set_flags(const _options: integer): boolean; begin end;
function php_basename(const _path: string; const _suffix: string): string; begin end;
function php_chgrp(const _filename: string; const _group: variant): boolean; begin end;
function php_chmod(const _filename: string; const _mode: integer): boolean; begin end;
function php_chown(const _filename: string; const _user: variant): boolean; begin end;
procedure php_clearstatcache(const _clear_realpath_cache: boolean; const _filename: string); begin end;
function php_copy(const _source: string; const _dest: string; const _context: variant): boolean; begin end;
function php_dirname(const _path: string; const _levels: integer): string; begin end;
function php_disk_free_space(const _directory: string): extended; begin end;
function php_disk_total_space(const _directory: string): extended; begin end;
function php_fclose(const _handle: variant): boolean; begin end;
function php_feof(const _handle: variant): boolean; begin end;
function php_fflush(const _handle: variant): boolean; begin end;
function php_fgetc(const _handle: variant): string; begin end;
function php_fgetcsv(const _handle: variant; const _length: integer; const _delimiter: string; const _enclosure: string; const _escape: string): variant; begin end;
function php_fgets(const _handle: variant; const _length: integer): string; begin end;
function php_fgetss(const _handle: variant; const _length: integer; const _allowable_tags: string): string; begin end;
function php_file_exists(const _filename: string): boolean; begin end;
function php_file_get_contents(const _filename: string; const _use_include_path: boolean; const _context: variant; const _offset: integer; const _maxlen: integer): string; begin end;
function php_file_put_contents(const _filename: string; const _data: variant; const _flags: integer; const _context: variant): integer; begin end;
function php_fileatime(const _filename: string): integer; begin end;
function php_filectime(const _filename: string): integer; begin end;
function php_filegroup(const _filename: string): integer; begin end;
function php_fileinode(const _filename: string): integer; begin end;
function php_filemtime(const _filename: string): integer; begin end;
function php_fileowner(const _filename: string): integer; begin end;
function php_fileperms(const _filename: string): integer; begin end;
function php_filesize(const _filename: string): integer; begin end;
function php_filetype(const _filename: string): string; begin end;
function php_flock(const _handle: variant; const _operation: integer; var _wouldblock: integer): boolean; begin end;
function php_fnmatch(const _pattern: string; const _string: string; const _flags: integer): boolean; begin end;
function php_fopen(const _filename: string; const _mode: string; const _use_include_path: boolean; const _context: variant): variant; begin end;
function php_fpassthru(const _handle: variant): integer; begin end;
function php_fputcsv(const _handle: variant; const _fields: variant; const _delimiter: string; const _enclosure: string; const _escape_char: string): integer; begin end;
function php_fread(const _handle: variant; const _length: integer): string; begin end;
function php_fscanf(const _handle: variant; const _format: string): variant; begin end;
function php_fseek(const _handle: variant; const _offset: integer; const _whence: integer): integer; begin end;
function php_fstat(const _handle: variant): variant; begin end;
function php_ftell(const _handle: variant): integer; begin end;
function php_ftruncate(const _handle: variant; const _size: integer): boolean; begin end;
function php_fwrite(const _handle: variant; const _string: string; const _length: integer): integer; begin end;
function php_glob(const _pattern: string; const _flags: integer): variant; begin end;
function php_is_dir(const _filename: string): boolean; begin end;
function php_is_executable(const _filename: string): boolean; begin end;
function php_is_file(const _filename: string): boolean; begin end;
function php_is_link(const _filename: string): boolean; begin end;
function php_is_readable(const _filename: string): boolean; begin end;
function php_is_uploaded_file(const _filename: string): boolean; begin end;
function php_is_writable(const _filename: string): boolean; begin end;
function php_lchgrp(const _filename: string; const _group: variant): boolean; begin end;
function php_lchown(const _filename: string; const _user: variant): boolean; begin end;
function php_link(const _target: string; const _link: string): boolean; begin end;
function php_linkinfo(const _path: string): integer; begin end;
function php_lstat(const _filename: string): variant; begin end;
function php_mkdir(const _pathname: string; const _mode: integer; const _recursive: boolean; const _context: variant): boolean; begin end;
function php_move_uploaded_file(const _filename: string; const _destination: string): boolean; begin end;
function php_parse_ini_file(const _filename: string; const _process_sections: boolean; const _scanner_mode: integer): variant; begin end;
function php_parse_ini_string(const _ini: string; const _process_sections: boolean; const _scanner_mode: integer): variant; begin end;
function php_pathinfo(const _path: string; const _options: integer): variant; begin end;
function php_pclose(const _handle: variant): integer; begin end;
function php_popen(const _command: string; const _mode: string): variant; begin end;
function php_readfile(const _filename: string; const _use_include_path: boolean; const _context: variant): integer; begin end;
function php_readlink(const _path: string): string; begin end;
function php_realpath_cache_get(): variant; begin end;
function php_realpath_cache_size(): integer; begin end;
function php_realpath(const _path: string): string; begin end;
function php_rename(const _oldname: string; const _newname: string; const _context: variant): boolean; begin end;
function php_rmdir(const _dirname: string; const _context: variant): boolean; begin end;
function php_stat(const _filename: string): variant; begin end;
function php_symlink(const _target: string; const _link: string): boolean; begin end;
function php_tempnam(const _dir: string; const _prefix: string): string; begin end;
function php_tmpfile(): variant; begin end;
function php_touch(const _filename: string; const _time: integer): boolean; begin end;
function php_umask(const _mask: integer): integer; begin end;
function php_unlink(const _filename: string; const _context: variant): boolean; begin end;
function php_inotify_add_watch(const _inotify_instance: variant; const _pathname: string; const _mask: integer): integer; begin end;
function php_inotify_init(): variant; begin end;
function php_inotify_queue_len(const _inotify_instance: variant): integer; begin end;
function php_inotify_read(const _inotify_instance: variant): variant; begin end;
function php_inotify_rm_watch(const _inotify_instance: variant; const _watch_descriptor: integer): boolean; begin end;
procedure php_setproctitle(const _title: string); begin end;
function php_setthreadtitle(const _title: string): boolean; begin end;
function php_xattr_get(const _filename: string; const _name: string; const _flags: integer): string; begin end;
function php_xattr_list(const _filename: string; const _flags: integer): variant; begin end;
function php_xattr_remove(const _filename: string; const _name: string; const _flags: integer): boolean; begin end;
function php_xattr_set(const _filename: string; const _name: string; const _value: string; const _flags: integer): boolean; begin end;
function php_xattr_supported(const _filename: string; const _flags: integer): boolean; begin end;
function php_xdiff_file_bdiff_size(const _file: string): integer; begin end;
function php_xdiff_file_bdiff(const _old_file: string; const _new_file: string; const _dest: string): boolean; begin end;
function php_xdiff_file_bpatch(const _file: string; const _patch: string; const _dest: string): boolean; begin end;
function php_xdiff_file_diff_binary(const _old_file: string; const _new_file: string; const _dest: string): boolean; begin end;
function php_xdiff_file_diff(const _old_file: string; const _new_file: string; const _dest: string; const _context: integer; const _minimal: boolean): boolean; begin end;
function php_xdiff_file_merge3(const _old_file: string; const _new_file1: string; const _new_file2: string; const _dest: string): variant; begin end;
function php_xdiff_file_patch_binary(const _file: string; const _patch: string; const _dest: string): boolean; begin end;
function php_xdiff_file_patch(const _file: string; const _patch: string; const _dest: string; const _flags: integer): variant; begin end;
function php_xdiff_file_rabdiff(const _old_file: string; const _new_file: string; const _dest: string): boolean; begin end;
function php_xdiff_string_bdiff_size(const _patch: string): integer; begin end;
function php_xdiff_string_bdiff(const _old_data: string; const _new_data: string): string; begin end;
function php_xdiff_string_bpatch(const _str: string; const _patch: string): string; begin end;
function php_xdiff_string_diff(const _old_data: string; const _new_data: string; const _context: integer; const _minimal: boolean): string; begin end;
function php_xdiff_string_merge3(const _old_data: string; const _new_data1: string; const _new_data2: string; var _error: string): variant; begin end;
function php_xdiff_string_patch_binary(const _str: string; const _patch: string): string; begin end;
function php_xdiff_string_patch(const _str: string; const _patch: string; const _flags: integer; var _error: string): string; begin end;
function php_enchant_broker_describe(const _broker: variant): variant; begin end;
function php_enchant_broker_dict_exists(const _broker: variant; const _tag: string): boolean; begin end;
function php_enchant_broker_free_dict(const _dict: variant): boolean; begin end;
function php_enchant_broker_free(const _broker: variant): boolean; begin end;
function php_enchant_broker_get_dict_path(const _broker: variant; const _dict_type: integer): boolean; begin end;
function php_enchant_broker_get_error(const _broker: variant): string; begin end;
function php_enchant_broker_init(): variant; begin end;
function php_enchant_broker_list_dicts(const _broker: variant): variant; begin end;
function php_enchant_broker_request_dict(const _broker: variant; const _tag: string): variant; begin end;
function php_enchant_broker_request_pwl_dict(const _broker: variant; const _filename: string): variant; begin end;
function php_enchant_broker_set_dict_path(const _broker: variant; const _dict_type: integer; const _value: string): boolean; begin end;
function php_enchant_broker_set_ordering(const _broker: variant; const _tag: string; const _ordering: string): boolean; begin end;
procedure php_enchant_dict_add_to_personal(const _dict: variant; const _word: string); begin end;
procedure php_enchant_dict_add_to_session(const _dict: variant; const _word: string); begin end;
function php_enchant_dict_check(const _dict: variant; const _word: string): boolean; begin end;
function php_enchant_dict_describe(const _dict: variant): variant; begin end;
function php_enchant_dict_get_error(const _dict: variant): string; begin end;
function php_enchant_dict_is_in_session(const _dict: variant; const _word: string): boolean; begin end;
function php_enchant_dict_quick_check(const _dict: variant; const _word: string; var _suggestions: variant): boolean; begin end;
procedure php_enchant_dict_store_replacement(const _dict: variant; const _mis: string; const _cor: string); begin end;
function php_enchant_dict_suggest(const _dict: variant; const _word: string): variant; begin end;
function php_fribidi_log2vis(const _str: string; const _direction: string; const _charset: integer): string; begin end;
function php_connect(const _dsn: string): boolean; begin end;
function php_country(const _country: integer): variant; begin end;
function php_get(const _name: string; const _country: integer): integer; begin end;
function php_isNick(const _name0: string; const _name1: string; const _country: integer): variant; begin end;
function php_similarNames(const _name: string; const _country: integer): variant; begin end;
function php_bind_textdomain_codeset(const _domain: string; const _codeset: string): string; begin end;
function php_bindtextdomain(const _domain: string; const _directory: string): string; begin end;
function php_dcgettext(const _domain: string; const _message: string; const _category: integer): string; begin end;
function php_dcngettext(const _domain: string; const _msgid1: string; const _msgid2: string; const _n: integer; const _category: integer): string; begin end;
function php_dgettext(const _domain: string; const _message: string): string; begin end;
function php_dngettext(const _domain: string; const _msgid1: string; const _msgid2: string; const _n: integer): string; begin end;
function php_gettext(const _message: string): string; begin end;
function php_ngettext(const _msgid1: string; const _msgid2: string; const _n: integer): string; begin end;
function php_textdomain(const _text_domain: string): string; begin end;
function php_iconv_get_encoding(const _type: string): variant; begin end;
function php_iconv_mime_decode_headers(const _encoded_headers: string; const _mode: integer; const _charset: string): variant; begin end;
function php_iconv_mime_decode(const _encoded_header: string; const _mode: integer; const _charset: string): string; begin end;
function php_iconv_mime_encode(const _field_name: string; const _field_value: string; const _preferences: variant): string; begin end;
function php_iconv_set_encoding(const _type: string; const _charset: string): boolean; begin end;
function php_iconv_strlen(const _str: string; const _charset: string): integer; begin end;
function php_iconv_strpos(const _haystack: string; const _needle: string; const _offset: integer; const _charset: string): integer; begin end;
function php_iconv_strrpos(const _haystack: string; const _needle: string; const _charset: string): integer; begin end;
function php_iconv_substr(const _str: string; const _offset: integer; const _length: integer): string; begin end;
function php_iconv(const _in_charset: string; const _out_charset: string; const _str: string): string; begin end;
function php_ob_iconv_handler(const _contents: string; const _status: integer): string; begin end;
function php_asort(var _arr: variant; const _sort_flag: integer): boolean; begin end;
function php_compare(const _str1: string; const _str2: string): integer; begin end;
function php_getErrorCode(): integer; begin end;
function php_getErrorMessage(): string; begin end;
function php_getLocale(const _type: integer): string; begin end;
function php_getSortKey(const _str: string): string; begin end;
function php_getStrength(): integer; begin end;
function php_setAttribute(const _attr: integer; const _val: integer): boolean; begin end;
function php_setStrength(const _strength: integer): boolean; begin end;
function php_sortWithSortKeys(var _arr: variant): boolean; begin end;
function php_sort(var _arr: variant; const _sort_flag: integer): boolean; begin end;
function php_collator_asort(const _coll: variant; var _arr: variant; const _sort_flag: integer): boolean; begin end;
function php_collator_compare(const _coll: variant; const _str1: string; const _str2: string): integer; begin end;
function php_collator_get_attribute(const _coll: variant; const _attr: integer): integer; begin end;
function php_collator_get_error_code(const _coll: variant): integer; begin end;
function php_collator_get_error_message(const _coll: variant): string; begin end;
function php_collator_get_locale(const _coll: variant; const _type: integer): string; begin end;
function php_collator_get_sort_key(const _coll: variant; const _str: string): string; begin end;
function php_collator_get_strength(const _coll: variant): integer; begin end;
function php_collator_set_attribute(const _coll: variant; const _attr: integer; const _val: integer): boolean; begin end;
function php_collator_set_strength(const _coll: variant; const _strength: integer): boolean; begin end;
function php_collator_sort_with_sort_keys(const _coll: variant; var _arr: variant): boolean; begin end;
function php_collator_sort(const _coll: variant; var _arr: variant; const _sort_flag: integer): boolean; begin end;
function php_formatCurrency(const _value: extended; const _currency: string): string; begin end;
function php_format(const _value: variant; const _type: integer): string; begin end;
function php_getSymbol(const _attr: integer): string; begin end;
function php_getTextAttribute(const _attr: integer): string; begin end;
function php_parseCurrency(const _value: string; var _currency: string; var _position: integer): extended; begin end;
function php_parse(const _value: string; const _type: integer; var _position: integer): variant; begin end;
function php_setPattern(const _pattern: string): boolean; begin end;
function php_setSymbol(const _attr: integer; const _value: string): boolean; begin end;
function php_setTextAttribute(const _attr: integer; const _value: string): boolean; begin end;
function php_numfmt_format_currency(const _fmt: variant; const _value: extended; const _currency: string): string; begin end;
function php_numfmt_format(const _fmt: variant; const _value: variant; const _type: integer): string; begin end;
function php_numfmt_get_attribute(const _fmt: variant; const _attr: integer): integer; begin end;
function php_numfmt_get_error_code(const _fmt: variant): integer; begin end;
function php_numfmt_get_error_message(const _fmt: variant): string; begin end;
function php_numfmt_get_locale(const _fmt: variant; const _type: integer): string; begin end;
function php_numfmt_get_pattern(const _fmt: variant): string; begin end;
function php_numfmt_get_symbol(const _fmt: variant; const _attr: integer): string; begin end;
function php_numfmt_get_text_attribute(const _fmt: variant; const _attr: integer): string; begin end;
function php_numfmt_parse_currency(const _fmt: variant; const _value: string; var _currency: string; var _position: integer): extended; begin end;
function php_numfmt_parse(const _fmt: variant; const _value: string; const _type: integer; var _position: integer): variant; begin end;
function php_numfmt_set_attribute(const _fmt: variant; const _attr: integer; const _value: integer): boolean; begin end;
function php_numfmt_set_pattern(const _fmt: variant; const _pattern: string): boolean; begin end;
function php_numfmt_set_symbol(const _fmt: variant; const _attr: integer; const _value: string): boolean; begin end;
function php_numfmt_set_text_attribute(const _fmt: variant; const _attr: integer; const _value: string): boolean; begin end;
function php_acceptFromHttp(const _header: string): string; begin end;
function php_canonicalize(const _locale: string): string; begin end;
function php_composeLocale(const _subtags: variant): string; begin end;
function php_filterMatches(const _langtag: string; const _locale: string; const _canonicalize: boolean): boolean; begin end;
function php_getAllVariants(const _locale: string): variant; begin end;
function php_getDefault(): string; begin end;
function php_getDisplayLanguage(const _locale: string; const _in_locale: string): string; begin end;
function php_getDisplayName(const _locale: string; const _in_locale: string): string; begin end;
function php_getDisplayRegion(const _locale: string; const _in_locale: string): string; begin end;
function php_getDisplayScript(const _locale: string; const _in_locale: string): string; begin end;
function php_getDisplayVariant(const _locale: string; const _in_locale: string): string; begin end;
function php_getKeywords(const _locale: string): variant; begin end;
function php_getPrimaryLanguage(const _locale: string): string; begin end;
function php_getRegion(const _locale: string): string; begin end;
function php_getScript(const _locale: string): string; begin end;
function php_lookup(const _langtag: variant; const _locale: string; const _canonicalize: boolean; const _default: string): string; begin end;
function php_parseLocale(const _locale: string): variant; begin end;
function php_setDefault(const _locale: string): boolean; begin end;
function php_locale_accept_from_http(const _header: string): string; begin end;
function php_locale_compose(const _subtags: variant): string; begin end;
function php_locale_filter_matches(const _langtag: string; const _locale: string; const _canonicalize: boolean): boolean; begin end;
function php_locale_get_all_variants(const _locale: string): variant; begin end;
function php_locale_get_default(): string; begin end;
function php_locale_get_display_language(const _locale: string; const _in_locale: string): string; begin end;
function php_locale_get_display_name(const _locale: string; const _in_locale: string): string; begin end;
function php_locale_get_display_region(const _locale: string; const _in_locale: string): string; begin end;
function php_locale_get_display_script(const _locale: string; const _in_locale: string): string; begin end;
function php_locale_get_display_variant(const _locale: string; const _in_locale: string): string; begin end;
function php_locale_get_keywords(const _locale: string): variant; begin end;
function php_locale_get_primary_language(const _locale: string): string; begin end;
function php_locale_get_region(const _locale: string): string; begin end;
function php_locale_get_script(const _locale: string): string; begin end;
function php_locale_lookup(const _langtag: variant; const _locale: string; const _canonicalize: boolean; const _default: string): string; begin end;
function php_locale_parse(const _locale: string): variant; begin end;
function php_locale_set_default(const _locale: string): boolean; begin end;
function php_isNormalized(const _input: string; const _form: integer): boolean; begin end;
function php_normalize(const _input: string; const _form: integer): string; begin end;
function php_normalizer_is_normalized(const _input: string; const _form: integer): boolean; begin end;
function php_normalizer_normalize(const _input: string; const _form: integer): string; begin end;
function php_formatMessage(const _locale: string; const _pattern: string; const _args: variant): string; begin end;
function php_format(const _args: variant): string; begin end;
function php_getLocale(): string; begin end;
function php_parseMessage(const _locale: string; const _pattern: string; const _source: string): variant; begin end;
function php_parse(const _value: string): variant; begin end;
function php_msgfmt_format_message(const _locale: string; const _pattern: string; const _args: variant): string; begin end;
function php_msgfmt_format(const _fmt: variant; const _args: variant): string; begin end;
function php_msgfmt_get_error_code(const _fmt: variant): integer; begin end;
function php_msgfmt_get_error_message(const _fmt: variant): string; begin end;
function php_msgfmt_get_locale(const _formatter: variant): string; begin end;
function php_msgfmt_get_pattern(const _fmt: variant): string; begin end;
function php_msgfmt_parse_message(const _locale: string; const _pattern: string; const _value: string): variant; begin end;
function php_msgfmt_parse(const _fmt: variant; const _value: string): variant; begin end;
function php_msgfmt_set_pattern(const _fmt: variant; const _pattern: string): boolean; begin end;
function php_add(const _field: integer; const _amount: integer): boolean; begin end;
function php_intlcal_add(const _cal: variant; const _field: integer; const _amount: integer): boolean; begin end;
function php_after(const _other: variant): boolean; begin end;
function php_intlcal_after(const _cal: variant; const _other: variant): boolean; begin end;
function php_before(const _other: variant): boolean; begin end;
function php_intlcal_before(const _cal: variant; const _other: variant): boolean; begin end;
function php_clear(const _field: integer): boolean; begin end;
function php_intlcal_clear(const _cal: variant; const _field: integer): boolean; begin end;
function php_equals(const _other: variant): boolean; begin end;
function php_intlcal_equals(const _cal: variant; const _other: variant): boolean; begin end;
function php_fieldDifference(const _when: extended; const _field: integer): integer; begin end;
function php_intlcal_field_difference(const _cal: variant; const _when: extended; const _field: integer): integer; begin end;
function php_get(const _field: integer): integer; begin end;
function php_intlcal_get(const _cal: variant; const _field: integer): integer; begin end;
function php_getActualMaximum(const _field: integer): integer; begin end;
function php_intlcal_get_actual_maximum(const _cal: variant; const _field: integer): integer; begin end;
function php_getActualMinimum(const _field: integer): integer; begin end;
function php_intlcal_get_actual_minimum(const _cal: variant; const _field: integer): integer; begin end;
function php_getAvailableLocales(): variant; begin end;
function php_intlcal_get_available_locales(): variant; begin end;
function php_getDayOfWeekType(const _dayOfWeek: integer): integer; begin end;
function php_intlcal_get_day_of_week_type(const _cal: variant; const _dayOfWeek: integer): integer; begin end;
function php_getFirstDayOfWeek(): integer; begin end;
function php_intlcal_get_first_day_of_week(const _cal: variant): integer; begin end;
function php_getGreatestMinimum(const _field: integer): integer; begin end;
function php_intlcal_get_greatest_minimum(const _cal: variant; const _field: integer): integer; begin end;
function php_getLeastMaximum(const _field: integer): integer; begin end;
function php_intlcal_get_least_maximum(const _cal: variant; const _field: integer): integer; begin end;
function php_intlcal_get_locale(const _cal: variant; const _localeType: integer): string; begin end;
function php_getMaximum(const _field: integer): integer; begin end;
function php_intlcal_get_maximum(const _cal: variant; const _field: integer): integer; begin end;
function php_getMinimalDaysInFirstWeek(): integer; begin end;
function php_intlcal_get_minimal_days_in_first_week(const _cal: variant): integer; begin end;
function php_getMinimum(const _field: integer): integer; begin end;
function php_intlcal_get_minimum(const _cal: variant; const _field: integer): integer; begin end;
function php_getNow(): extended; begin end;
function php_intlcal_get_now(): extended; begin end;
function php_getRepeatedWallTimeOption(): integer; begin end;
function php_intlcal_get_repeated_wall_time_option(const _cal: variant): integer; begin end;
function php_getSkippedWallTimeOption(): integer; begin end;
function php_intlcal_get_skipped_wall_time_option(const _cal: variant): integer; begin end;
function php_getTime(): extended; begin end;
function php_intlcal_get_time(const _cal: variant): extended; begin end;
function php_intlcal_get_type(const _cal: variant): string; begin end;
function php_getWeekendTransition(const _dayOfWeek: string): integer; begin end;
function php_intlcal_get_weekend_transition(const _cal: variant; const _dayOfWeek: string): integer; begin end;
function php_inDaylightTime(): boolean; begin end;
function php_intlcal_in_daylight_time(const _cal: variant): boolean; begin end;
function php_isEquivalentTo(const _other: variant): boolean; begin end;
function php_intlcal_is_equivalent_to(const _cal: variant; const _other: variant): boolean; begin end;
function php_isLenient(): boolean; begin end;
function php_intlcal_is_lenient(const _cal: variant): boolean; begin end;
function php_isSet(const _field: integer): boolean; begin end;
function php_intlcal_is_set(const _cal: variant; const _field: integer): boolean; begin end;
function php_isWeekend(const _date: extended): boolean; begin end;
function php_intlcal_is_weekend(const _cal: variant; const _date: extended): boolean; begin end;
function php_roll(const _field: integer; const _amountOrUpOrDown: variant): boolean; begin end;
function php_intlcal_roll(const _cal: variant; const _field: integer; const _amountOrUpOrDown: variant): boolean; begin end;
function php_set(const _field: integer; const _value: integer): boolean; begin end;
function php_set(const _year: integer; const _month: integer; const _dayOfMonth: integer; const _hour: integer; const _minute: integer; const _second: integer): boolean; begin end;
function php_intlcal_set(const _cal: variant; const _field: integer; const _value: integer): boolean; begin end;
function php_intlcal_set(const _cal: variant; const _year: integer; const _month: integer; const _dayOfMonth: integer; const _hour: integer; const _minute: integer; const _second: integer): boolean; begin end;
function php_setFirstDayOfWeek(const _dayOfWeek: integer): boolean; begin end;
function php_intlcal_set_first_day_of_week(const _cal: variant; const _dayOfWeek: integer): boolean; begin end;
function php_setMinimalDaysInFirstWeek(const _minimalDays: integer): boolean; begin end;
function php_intlcal_get_minimal_days_in_first_week(const _cal: variant; const _minimalDays: integer): boolean; begin end;
function php_setRepeatedWallTimeOption(const _wallTimeOption: integer): boolean; begin end;
function php_intlcal_set_repeated_wall_time_option(const _cal: variant; const _wallTimeOption: integer): boolean; begin end;
function php_setSkippedWallTimeOption(const _wallTimeOption: integer): boolean; begin end;
function php_intlcal_set_skipped_wall_time_option(const _cal: variant; const _wallTimeOption: integer): boolean; begin end;
function php_setTime(const _date: extended): boolean; begin end;
function php_intlcal_set_time(const _cal: variant; const _date: extended): boolean; begin end;
function php_setTimeZone(const _timeZone: variant): boolean; begin end;
function php_intlcal_set_time_zone(const _cal: variant; const _timeZone: variant): boolean; begin end;
function php_intlcal_get_error_code(const _calendar: variant): integer; begin end;
function php_intlcal_get_error_message(const _calendar: variant): string; begin end;
function php_countEquivalentIDs(const _zoneId: string): integer; begin end;
function php_getCanonicalID(const _zoneId: string; var _isSystemID: boolean): string; begin end;
function php_getDisplayName(const _isDaylight: boolean; const _style: integer; const _locale: string): string; begin end;
function php_getDSTSavings(): integer; begin end;
function php_getEquivalentID(const _zoneId: string; const _index: integer): string; begin end;
function php_getID(): string; begin end;
function php_getOffset(const _date: extended; const _local: boolean; var _rawOffset: integer; var _dstOffset: integer): integer; begin end;
function php_getRawOffset(): integer; begin end;
function php_getTZDataVersion(): string; begin end;
function php_hasSameRules(const _otherTimeZone: variant): boolean; begin end;
function php_useDaylightTime(): boolean; begin end;
function php_intltz_get_error_code(): integer; begin end;
function php_intltz_get_error_message(): string; begin end;
function php_formatObject(const _object: variant; const _format: variant; const _locale: string): string; begin end;
function php_getCalendar(): integer; begin end;
function php_getDateType(): integer; begin end;
function php_getTimeType(): integer; begin end;
function php_getTimeZoneId(): string; begin end;
function php_localtime(const _value: string; var _position: integer): variant; begin end;
function php_parse(const _value: string; var _position: integer): integer; begin end;
function php_setCalendar(const _which: variant): boolean; begin end;
function php_setLenient(const _lenient: boolean): boolean; begin end;
function php_setTimeZoneId(const _zone: string): boolean; begin end;
function php_datefmt_format(const _fmt: variant; const _value: variant): string; begin end;
function php_datefmt_format_object(const _object: variant; const _format: variant; const _locale: string): string; begin end;
function php_datefmt_get_calendar(const _fmt: variant): integer; begin end;
function php_datefmt_get_datetype(const _fmt: variant): integer; begin end;
function php_datefmt_get_error_code(const _fmt: variant): integer; begin end;
function php_datefmt_get_error_message(const _fmt: variant): string; begin end;
function php_datefmt_get_locale(const _fmt: variant; const _which: integer): string; begin end;
function php_datefmt_get_pattern(const _fmt: variant): string; begin end;
function php_datefmt_get_timetype(const _fmt: variant): integer; begin end;
function php_datefmt_get_timezone_id(const _fmt: variant): string; begin end;
function php_datefmt_is_lenient(const _fmt: variant): boolean; begin end;
function php_datefmt_localtime(const _fmt: variant; const _value: string; var _position: integer): variant; begin end;
function php_datefmt_parse(const _fmt: variant; const _value: string; var _position: integer): integer; begin end;
function php_datefmt_set_calendar(const _fmt: variant; const _which: variant): boolean; begin end;
function php_datefmt_set_lenient(const _fmt: variant; const _lenient: boolean): boolean; begin end;
function php_datefmt_set_pattern(const _fmt: variant; const _pattern: string): boolean; begin end;
function php_datefmt_set_timezone_id(const _fmt: variant; const _zone: string): boolean; begin end;
function php_datefmt_set_timezone(const _zone: variant): boolean; begin end;
function php_getLocales(const _bundlename: string): variant; begin end;
function php_resourcebundle_count(const _r: variant): integer; begin end;
function php_resourcebundle_get_error_code(const _r: variant): integer; begin end;
function php_resourcebundle_get_error_message(const _r: variant): string; begin end;
function php_resourcebundle_get(const _r: variant; const _index: variant): variant; begin end;
function php_resourcebundle_locales(const _bundlename: string): variant; begin end;
function php_areConfusable(const _s1: string; const _s2: string; var _error: string): boolean; begin end;
function php_isSuspicious(const _text: string; var _error: string): boolean; begin end;
procedure php_setAllowedLocales(const _locale_list: string); begin end;
procedure php_setChecks(const _checks: integer); begin end;
function php_listIDs(): variant; begin end;
function php_transliterate(const _subject: string; const _start: integer; const _end: integer): string; begin end;
function php_transliterator_get_error_code(): integer; begin end;
function php_transliterator_get_error_message(): string; begin end;
function php_transliterator_list_ids(): variant; begin end;
function php_convert(const _str: string; const _reverse: boolean): string; begin end;
function php_fromUCallback(const _reason: integer; const _source: string; const _codePoint: string; var _error: integer): variant; begin end;
function php_getAliases(const _name: string): variant; begin end;
function php_getAvailable(): variant; begin end;
function php_getDestinationEncoding(): string; begin end;
function php_getDestinationType(): integer; begin end;
function php_getSourceEncoding(): string; begin end;
function php_getSourceType(): integer; begin end;
function php_getStandards(): variant; begin end;
function php_getSubstChars(): string; begin end;
function php_reasonText(const _reason: integer): string; begin end;
procedure php_setDestinationEncoding(const _encoding: string); begin end;
procedure php_setSourceEncoding(const _encoding: string); begin end;
procedure php_setSubstChars(const _chars: string); begin end;
function php_toUCallback(const _reason: integer; const _source: string; const _codeUnits: string; var _error: integer): variant; begin end;
function php_transcode(const _str: string; const _toEncoding: string; const _fromEncoding: string; const _options: variant): string; begin end;
function php_grapheme_extract(const _haystack: string; const _size: integer; const _extract_type: integer; const _start: integer; var _next: integer): string; begin end;
function php_grapheme_stripos(const _haystack: string; const _needle: string; const _offset: integer): integer; begin end;
function php_grapheme_stristr(const _haystack: string; const _needle: string; const _before_needle: boolean): string; begin end;
function php_grapheme_strlen(const _input: string): integer; begin end;
function php_grapheme_strpos(const _haystack: string; const _needle: string; const _offset: integer): integer; begin end;
function php_grapheme_strripos(const _haystack: string; const _needle: string; const _offset: integer): integer; begin end;
function php_grapheme_strrpos(const _haystack: string; const _needle: string; const _offset: integer): integer; begin end;
function php_grapheme_strstr(const _haystack: string; const _needle: string; const _before_needle: boolean): string; begin end;
function php_grapheme_substr(const _string: string; const _start: integer; const _length: integer): integer; begin end;
function php_idn_to_ascii(const _domain: string; const _options: integer; const _variant: integer; var _idna_info: variant): string; begin end;
function php_idn_to_utf8(const _domain: string; const _options: integer; const _variant: integer; var _idna_info: variant): string; begin end;
function php_charAge(const _codepoint: variant): variant; begin end;
function php_charDigitValue(const _codepoint: variant): integer; begin end;
function php_charDirection(const _codepoint: variant): integer; begin end;
function php_charFromName(const _characterName: string; const _nameChoice: integer): integer; begin end;
function php_charMirror(const _codepoint: variant): variant; begin end;
function php_charName(const _codepoint: variant; const _nameChoice: integer): string; begin end;
function php_charType(const _codepoint: variant): integer; begin end;
function php_chr(const _codepoint: variant): string; begin end;
function php_digit(const _codepoint: string; const _radix: integer): integer; begin end;
procedure php_enumCharNames(const _start: variant; const _limit: variant; const _callback: variant; const _nameChoice: integer); begin end;
procedure php_enumCharTypes(const _callback: variant); begin end;
function php_foldCase(const _codepoint: variant; const _options: integer): variant; begin end;
function php_forDigit(const _digit: integer; const _radix: integer): integer; begin end;
function php_getBidiPairedBracket(const _codepoint: variant): variant; begin end;
function php_getBlockCode(const _codepoint: variant): integer; begin end;
function php_getCombiningClass(const _codepoint: variant): integer; begin end;
function php_getFC_NFKC_Closure(const _codepoint: variant): string; begin end;
function php_getIntPropertyMaxValue(const _property: integer): integer; begin end;
function php_getIntPropertyMinValue(const _property: integer): integer; begin end;
function php_getIntPropertyValue(const _codepoint: variant; const _property: integer): integer; begin end;
function php_getNumericValue(const _codepoint: variant): extended; begin end;
function php_getPropertyEnum(const _alias: string): integer; begin end;
function php_getPropertyName(const _property: integer; const _nameChoice: integer): string; begin end;
function php_getPropertyValueEnum(const _property: integer; const _name: string): integer; begin end;
function php_getPropertyValueName(const _property: integer; const _value: integer; const _nameChoice: integer): string; begin end;
function php_getUnicodeVersion(): variant; begin end;
function php_hasBinaryProperty(const _codepoint: variant; const _property: integer): boolean; begin end;
function php_isalnum(const _codepoint: variant): boolean; begin end;
function php_isalpha(const _codepoint: variant): boolean; begin end;
function php_isbase(const _codepoint: variant): boolean; begin end;
function php_isblank(const _codepoint: variant): boolean; begin end;
function php_iscntrl(const _codepoint: variant): boolean; begin end;
function php_isdefined(const _codepoint: variant): boolean; begin end;
function php_isdigit(const _codepoint: variant): boolean; begin end;
function php_isgraph(const _codepoint: variant): boolean; begin end;
function php_isIDIgnorable(const _codepoint: variant): boolean; begin end;
function php_isIDPart(const _codepoint: variant): boolean; begin end;
function php_isIDStart(const _codepoint: variant): boolean; begin end;
function php_isISOControl(const _codepoint: variant): boolean; begin end;
function php_isJavaIDPart(const _codepoint: variant): boolean; begin end;
function php_isJavaIDStart(const _codepoint: variant): boolean; begin end;
function php_isJavaSpaceChar(const _codepoint: variant): boolean; begin end;
function php_islower(const _codepoint: variant): boolean; begin end;
function php_isMirrored(const _codepoint: variant): boolean; begin end;
function php_isprint(const _codepoint: variant): boolean; begin end;
function php_ispunct(const _codepoint: variant): boolean; begin end;
function php_isspace(const _codepoint: variant): boolean; begin end;
function php_istitle(const _codepoint: variant): boolean; begin end;
function php_isUAlphabetic(const _codepoint: variant): boolean; begin end;
function php_isULowercase(const _codepoint: variant): boolean; begin end;
function php_isupper(const _codepoint: variant): boolean; begin end;
function php_isUUppercase(const _codepoint: variant): boolean; begin end;
function php_isUWhiteSpace(const _codepoint: variant): boolean; begin end;
function php_isWhitespace(const _codepoint: variant): boolean; begin end;
function php_isxdigit(const _codepoint: variant): boolean; begin end;
function php_ord(const _character: variant): integer; begin end;
function php_tolower(const _codepoint: variant): variant; begin end;
function php_totitle(const _codepoint: variant): variant; begin end;
function php_toupper(const _codepoint: variant): variant; begin end;
function php_intl_error_name(const _error_code: integer): string; begin end;
function php_intl_get_error_code(): integer; begin end;
function php_intl_get_error_message(): string; begin end;
function php_intl_is_failure(const _error_code: integer): boolean; begin end;
function php_mb_check_encoding(const _var: string; const _encoding: string): boolean; begin end;
function php_mb_convert_case(const _str: string; const _mode: integer; const _encoding: string): string; begin end;
function php_mb_convert_encoding(const _str: string; const _to_encoding: string; const _from_encoding: variant): string; begin end;
function php_mb_convert_kana(const _str: string; const _option: string; const _encoding: string): string; begin end;
function php_mb_convert_variables(const _to_encoding: string; const _from_encoding: variant; var _vars: variant): string; begin end;
function php_mb_decode_mimeheader(const _str: string): string; begin end;
function php_mb_decode_numericentity(const _str: string; const _convmap: variant; const _encoding: string): string; begin end;
function php_mb_detect_encoding(const _str: string; const _encoding_list: variant): string; begin end;
function php_mb_detect_order(const _encoding_list: variant): variant; begin end;
function php_mb_encode_mimeheader(const _str: string; const _charset: string): string; begin end;
function php_mb_encode_numericentity(const _str: string; const _convmap: variant; const _encoding: string): string; begin end;
function php_mb_encoding_aliases(const _encoding: string): variant; begin end;
function php_mb_ereg_match(const _pattern: string; const _string: string; const _option: string): boolean; begin end;
function php_mb_ereg_replace_callback(const _pattern: string; const _callback: variant; const _string: string; const _option: string): string; begin end;
function php_mb_ereg_replace(const _pattern: string; const _replacement: string; const _string: string; const _option: string): string; begin end;
function php_mb_ereg_search_getpos(): integer; begin end;
function php_mb_ereg_search_getregs(): variant; begin end;
function php_mb_ereg_search_init(const _string: string; const _pattern: string; const _option: string): boolean; begin end;
function php_mb_ereg_search_pos(const _pattern: string; const _option: string): variant; begin end;
function php_mb_ereg_search_regs(const _pattern: string; const _option: string): variant; begin end;
function php_mb_ereg_search_setpos(const _position: integer): boolean; begin end;
function php_mb_ereg_search(const _pattern: string; const _option: string): boolean; begin end;
function php_mb_ereg(const _pattern: string; const _string: string; var _regs: variant): integer; begin end;
function php_mb_eregi_replace(const _pattern: string; const _replace: string; const _string: string; const _option: string): string; begin end;
function php_mb_eregi(const _pattern: string; const _string: string; var _regs: variant): integer; begin end;
function php_mb_get_info(const _type: string): variant; begin end;
function php_mb_http_input(const _type: string): variant; begin end;
function php_mb_http_output(const _encoding: string): variant; begin end;
function php_mb_internal_encoding(const _encoding: string): variant; begin end;
function php_mb_language(const _language: string): variant; begin end;
function php_mb_list_encodings(): variant; begin end;
function php_mb_output_handler(const _contents: string; const _status: integer): string; begin end;
function php_mb_parse_str(const _encoded_string: string; var _result: variant): boolean; begin end;
function php_mb_preferred_mime_name(const _encoding: string): string; begin end;
function php_mb_regex_encoding(const _encoding: string): variant; begin end;
function php_mb_regex_set_options(const _options: string): string; begin end;
function php_mb_send_mail(const _to: string; const _subject: string; const _message: string; const _additional_headers: string; const _additional_parameter: string): boolean; begin end;
function php_mb_split(const _pattern: string; const _string: string; const _limit: integer): variant; begin end;
function php_mb_strcut(const _str: string; const _start: integer; const _length: integer; const _encoding: string): string; begin end;
function php_mb_strimwidth(const _str: string; const _start: integer; const _width: integer; const _trimmarker: string; const _encoding: string): string; begin end;
function php_mb_stripos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer; begin end;
function php_mb_stristr(const _haystack: string; const _needle: string; const _before_needle: boolean; const _encoding: string): string; begin end;
function php_mb_strlen(const _str: string; const _encoding: string): variant; begin end;
function php_mb_strpos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer; begin end;
function php_mb_strrchr(const _haystack: string; const _needle: string; const _part: boolean; const _encoding: string): string; begin end;
function php_mb_strrichr(const _haystack: string; const _needle: string; const _part: boolean; const _encoding: string): string; begin end;
function php_mb_strripos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer; begin end;
function php_mb_strrpos(const _haystack: string; const _needle: string; const _offset: integer; const _encoding: string): integer; begin end;
function php_mb_strstr(const _haystack: string; const _needle: string; const _before_needle: boolean; const _encoding: string): string; begin end;
function php_mb_strtolower(const _str: string; const _encoding: string): string; begin end;
function php_mb_strtoupper(const _str: string; const _encoding: string): string; begin end;
function php_mb_strwidth(const _str: string; const _encoding: string): integer; begin end;
function php_mb_substitute_character(const _substrchar: variant): variant; begin end;
function php_mb_substr_count(const _haystack: string; const _needle: string; const _encoding: string): integer; begin end;
function php_mb_substr(const _str: string; const _start: integer; const _length: integer; const _encoding: string): string; begin end;
function php_pspell_add_to_personal(const _dictionary_link: integer; const _word: string): boolean; begin end;
function php_pspell_add_to_session(const _dictionary_link: integer; const _word: string): boolean; begin end;
function php_pspell_check(const _dictionary_link: integer; const _word: string): boolean; begin end;
function php_pspell_clear_session(const _dictionary_link: integer): boolean; begin end;
function php_pspell_config_create(const _language: string; const _spelling: string; const _jargon: string; const _encoding: string): integer; begin end;
function php_pspell_config_data_dir(const _conf: integer; const _directory: string): boolean; begin end;
function php_pspell_config_dict_dir(const _conf: integer; const _directory: string): boolean; begin end;
function php_pspell_config_ignore(const _dictionary_link: integer; const _n: integer): boolean; begin end;
function php_pspell_config_mode(const _dictionary_link: integer; const _mode: integer): boolean; begin end;
function php_pspell_config_personal(const _dictionary_link: integer; const _file: string): boolean; begin end;
function php_pspell_config_repl(const _dictionary_link: integer; const _file: string): boolean; begin end;
function php_pspell_config_runtogether(const _dictionary_link: integer; const _flag: boolean): boolean; begin end;
function php_pspell_config_save_repl(const _dictionary_link: integer; const _flag: boolean): boolean; begin end;
function php_pspell_new_config(const _config: integer): integer; begin end;
function php_pspell_new_personal(const _personal: string; const _language: string; const _spelling: string; const _jargon: string; const _encoding: string; const _mode: integer): integer; begin end;
function php_pspell_new(const _language: string; const _spelling: string; const _jargon: string; const _encoding: string; const _mode: integer): integer; begin end;
function php_pspell_save_wordlist(const _dictionary_link: integer): boolean; begin end;
function php_pspell_store_replacement(const _dictionary_link: integer; const _misspelled: string; const _correct: string): boolean; begin end;
function php_pspell_suggest(const _dictionary_link: integer; const _word: string): variant; begin end;
function php_recode_file(const _request: string; const _input: variant; const _output: variant): boolean; begin end;
function php_recode_string(const _request: string; const _string: string): string; begin end;
function php_cairo_font_face_get_type(const _fontface: variant): integer; begin end;
function php_cairo_font_face_status(const _fontface: variant): integer; begin end;
function php_cairo_font_options_equal(const _options: variant; const _other: variant): boolean; begin end;
function php_cairo_font_options_get_antialias(const _options: variant): integer; begin end;
function php_cairo_font_options_get_hint_metrics(const _options: variant): integer; begin end;
function php_cairo_font_options_get_hint_style(const _options: variant): integer; begin end;
function php_cairo_font_options_get_subpixel_order(const _options: variant): integer; begin end;
function php_cairo_font_options_hash(const _options: variant): integer; begin end;
procedure php_cairo_font_options_merge(const _options: variant; const _other: variant); begin end;
procedure php_cairo_font_options_set_antialias(const _options: variant; const _antialias: integer); begin end;
procedure php_cairo_font_options_set_hint_metrics(const _options: variant; const _hint_metrics: integer); begin end;
procedure php_cairo_font_options_set_hint_style(const _options: variant; const _hint_style: integer); begin end;
procedure php_cairo_font_options_set_subpixel_order(const _options: variant; const _subpixel_order: integer); begin end;
function php_cairo_font_options_status(const _options: variant): integer; begin end;
function php_cairo_format_stride_for_width(const _format: integer; const _width: integer): integer; begin end;
function php_cairo_image_surface_get_data(const _surface: variant): string; begin end;
function php_cairo_image_surface_get_format(const _surface: variant): integer; begin end;
function php_cairo_image_surface_get_height(const _surface: variant): integer; begin end;
function php_cairo_image_surface_get_stride(const _surface: variant): integer; begin end;
function php_cairo_image_surface_get_width(const _surface: variant): integer; begin end;
procedure php_cairo_matrix_invert(const _matrix: variant); begin end;
procedure php_cairo_matrix_rotate(const _matrix: variant; const _radians: extended); begin end;
function php_cairo_matrix_transform_distance(const _matrix: variant; const _dx: extended; const _dy: extended): variant; begin end;
function php_cairo_matrix_transform_point(const _matrix: variant; const _dx: extended; const _dy: extended): variant; begin end;
procedure php_cairo_matrix_translate(const _matrix: variant; const _tx: extended; const _ty: extended); begin end;
procedure php_cairo_pattern_add_color_stop_rgb(const _pattern: variant; const _offset: extended; const _red: extended; const _green: extended; const _blue: extended); begin end;
procedure php_cairo_pattern_add_color_stop_rgba(const _pattern: variant; const _offset: extended; const _red: extended; const _green: extended; const _blue: extended; const _alpha: extended); begin end;
function php_cairo_pattern_get_color_stop_count(const _pattern: variant): integer; begin end;
function php_cairo_pattern_get_color_stop_rgba(const _pattern: variant; const _index: integer): variant; begin end;
function php_cairo_pattern_get_extend(const _pattern: string): integer; begin end;
function php_cairo_pattern_get_filter(const _pattern: variant): integer; begin end;
function php_cairo_pattern_get_linear_points(const _pattern: variant): variant; begin end;
function php_cairo_pattern_get_radial_circles(const _pattern: variant): variant; begin end;
function php_cairo_pattern_get_rgba(const _pattern: variant): variant; begin end;
function php_cairo_pattern_get_type(const _pattern: variant): integer; begin end;
procedure php_cairo_pattern_set_extend(const _pattern: string; const _extend: string); begin end;
procedure php_cairo_pattern_set_filter(const _pattern: variant; const _filter: integer); begin end;
procedure php_cairo_pattern_set_matrix(const _pattern: variant; const _matrix: variant); begin end;
function php_cairo_pattern_status(const _pattern: variant): integer; begin end;
procedure php_cairo_pdf_surface_set_size(const _surface: variant; const _width: extended; const _height: extended); begin end;
function php_cairo_ps_get_levels(): variant; begin end;
function php_cairo_ps_level_to_string(const _level: integer): string; begin end;
procedure php_cairo_ps_surface_dsc_begin_page_setup(const _surface: variant); begin end;
procedure php_cairo_ps_surface_dsc_begin_setup(const _surface: variant); begin end;
procedure php_cairo_ps_surface_dsc_comment(const _surface: variant; const _comment: string); begin end;
function php_cairo_ps_surface_get_eps(const _surface: variant): boolean; begin end;
procedure php_cairo_ps_surface_restrict_to_level(const _surface: variant; const _level: integer); begin end;
procedure php_cairo_ps_surface_set_eps(const _surface: variant; const _level: boolean); begin end;
procedure php_cairo_ps_surface_set_size(const _surface: variant; const _width: extended; const _height: extended); begin end;
function php_cairo_scaled_font_extents(const _scaledfont: variant): variant; begin end;
function php_cairo_scaled_font_get_type(const _scaledfont: variant): integer; begin end;
function php_cairo_scaled_font_glyph_extents(const _scaledfont: variant; const _glyphs: variant): variant; begin end;
function php_cairo_scaled_font_status(const _scaledfont: variant): integer; begin end;
function php_cairo_scaled_font_text_extents(const _scaledfont: variant; const _text: string): variant; begin end;
procedure php_cairo_surface_copy_page(const _surface: variant); begin end;
procedure php_cairo_surface_finish(const _surface: variant); begin end;
procedure php_cairo_surface_flush(const _surface: variant); begin end;
function php_cairo_surface_get_content(const _surface: variant): integer; begin end;
function php_cairo_surface_get_device_offset(const _surface: variant): variant; begin end;
function php_cairo_surface_get_type(const _surface: variant): integer; begin end;
procedure php_cairo_surface_mark_dirty_rectangle(const _surface: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended); begin end;
procedure php_cairo_surface_mark_dirty(const _surface: variant); begin end;
procedure php_cairo_surface_set_device_offset(const _surface: variant; const _x: extended; const _y: extended); begin end;
procedure php_cairo_surface_set_fallback_resolution(const _surface: variant; const _x: extended; const _y: extended); begin end;
procedure php_cairo_surface_show_page(const _surface: variant); begin end;
function php_cairo_surface_status(const _surface: variant): integer; begin end;
procedure php_cairo_surface_write_to_png(const _surface: variant; const _stream: variant); begin end;
procedure php_cairo_svg_surface_restrict_to_version(const _surface: variant; const _version: integer); begin end;
function php_cairo_svg_version_to_string(const _version: integer): string; begin end;
function php_availableFonts(): variant; begin end;
function php_availableSurfaces(): variant; begin end;
function php_statusToString(const _status: integer): string; begin end;
function php_versionString(): string; begin end;
function php_cairo_available_fonts(): variant; begin end;
function php_cairo_available_surfaces(): variant; begin end;
function php_cairo_status_to_string(const _status: integer): string; begin end;
function php_cairo_version(): integer; begin end;
function php_cairo_version_string(): string; begin end;
procedure php_appendPath(const _path: variant); begin end;
procedure php_arc(const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended); begin end;
procedure php_arcNegative(const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended); begin end;
procedure php_clip(); begin end;
function php_clipExtents(): variant; begin end;
procedure php_clipPreserve(); begin end;
function php_clipRectangleList(): variant; begin end;
procedure php_closePath(); begin end;
procedure php_copyPage(); begin end;
procedure php_curveTo(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended); begin end;
function php_deviceToUser(const _x: extended; const _y: extended): variant; begin end;
function php_deviceToUserDistance(const _x: extended; const _y: extended): variant; begin end;
procedure php_fill(); begin end;
function php_fillExtents(): variant; begin end;
procedure php_fillPreserve(); begin end;
function php_fontExtents(): variant; begin end;
function php_getAntialias(): integer; begin end;
function php_getCurrentPoint(): variant; begin end;
function php_getDash(): variant; begin end;
function php_getDashCount(): integer; begin end;
function php_getFillRule(): integer; begin end;
procedure php_getFontFace(); begin end;
procedure php_getFontMatrix(); begin end;
procedure php_getFontOptions(); begin end;
procedure php_getGroupTarget(); begin end;
function php_getLineCap(): integer; begin end;
function php_getLineJoin(): integer; begin end;
function php_getLineWidth(): extended; begin end;
procedure php_getMatrix(); begin end;
function php_getMiterLimit(): extended; begin end;
function php_getOperator(): integer; begin end;
procedure php_getScaledFont(); begin end;
procedure php_getSource(); begin end;
procedure php_getTarget(); begin end;
function php_getTolerance(): extended; begin end;
procedure php_glyphPath(const _glyphs: variant); begin end;
function php_hasCurrentPoint(): boolean; begin end;
procedure php_identityMatrix(); begin end;
function php_inFill(const _x: string; const _y: string): boolean; begin end;
function php_inStroke(const _x: string; const _y: string): boolean; begin end;
procedure php_lineTo(const _x: string; const _y: string); begin end;
procedure php_mask(const _pattern: string); begin end;
procedure php_maskSurface(const _surface: string; const _x: string; const _y: string); begin end;
procedure php_moveTo(const _x: string; const _y: string); begin end;
procedure php_newPath(); begin end;
procedure php_newSubPath(); begin end;
procedure php_paint(); begin end;
procedure php_paintWithAlpha(const _alpha: string); begin end;
function php_pathExtents(): variant; begin end;
procedure php_popGroup(); begin end;
procedure php_popGroupToSource(); begin end;
procedure php_pushGroup(); begin end;
procedure php_pushGroupWithContent(const _content: string); begin end;
procedure php_rectangle(const _x: string; const _y: string; const _width: string; const _height: string); begin end;
procedure php_relCurveTo(const _x1: string; const _y1: string; const _x2: string; const _y2: string; const _x3: string; const _y3: string); begin end;
procedure php_relLineTo(const _x: string; const _y: string); begin end;
procedure php_relMoveTo(const _x: string; const _y: string); begin end;
procedure php_resetClip(); begin end;
procedure php_restore(); begin end;
procedure php_rotate(const _angle: string); begin end;
procedure php_save(); begin end;
procedure php_scale(const _x: string; const _y: string); begin end;
procedure php_selectFontFace(const _family: string; const _slant: string; const _weight: string); begin end;
procedure php_setAntialias(const _antialias: string); begin end;
procedure php_setDash(const _dashes: string; const _offset: string); begin end;
procedure php_setFillRule(const _setting: string); begin end;
procedure php_setFontFace(const _fontface: variant); begin end;
procedure php_setFontMatrix(const _matrix: string); begin end;
procedure php_setFontOptions(const _fontoptions: string); begin end;
procedure php_setFontSize(const _size: string); begin end;
procedure php_setLineCap(const _setting: string); begin end;
procedure php_setLineJoin(const _setting: string); begin end;
procedure php_setLineWidth(const _width: string); begin end;
procedure php_setMatrix(const _matrix: string); begin end;
procedure php_setMiterLimit(const _limit: string); begin end;
procedure php_setOperator(const _setting: string); begin end;
procedure php_setScaledFont(const _scaledfont: string); begin end;
procedure php_setSource(const _pattern: string); begin end;
procedure php_setSourceRGB(const _red: string; const _green: string; const _blue: string); begin end;
procedure php_setSourceRGBA(const _red: string; const _green: string; const _blue: string; const _alpha: string); begin end;
procedure php_setSourceSurface(const _surface: string; const _x: string; const _y: string); begin end;
procedure php_setTolerance(const _tolerance: string); begin end;
procedure php_showPage(); begin end;
procedure php_showText(const _text: string); begin end;
function php_status(): integer; begin end;
procedure php_stroke(); begin end;
function php_strokeExtents(): variant; begin end;
procedure php_strokePreserve(); begin end;
function php_textExtents(const _text: string): variant; begin end;
procedure php_textPath(const _string: string); begin end;
procedure php_transform(const _matrix: string); begin end;
procedure php_translate(const _x: string; const _y: string); begin end;
function php_userToDevice(const _x: string; const _y: string): variant; begin end;
function php_userToDeviceDistance(const _x: string; const _y: string): variant; begin end;
procedure php_cairo_append_path(const _context: variant; const _path: variant); begin end;
procedure php_cairo_arc(const _context: variant; const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended); begin end;
procedure php_cairo_arc_negative(const _context: variant; const _x: extended; const _y: extended; const _radius: extended; const _angle1: extended; const _angle2: extended); begin end;
procedure php_cairo_clip(const _context: variant); begin end;
function php_cairo_clip_extents(const _context: variant): variant; begin end;
procedure php_cairo_clip_preserve(const _context: variant); begin end;
function php_cairo_clip_rectangle_list(const _context: variant): variant; begin end;
procedure php_cairo_close_path(const _context: variant); begin end;
procedure php_cairo_copy_page(const _context: variant); begin end;
procedure php_cairo_curve_to(const _context: variant; const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended); begin end;
function php_cairo_device_to_user(const _context: variant; const _x: extended; const _y: extended): variant; begin end;
function php_cairo_device_to_user_distance(const _context: variant; const _x: extended; const _y: extended): variant; begin end;
procedure php_cairo_fill(const _context: variant); begin end;
function php_cairo_fill_extents(const _context: variant): variant; begin end;
procedure php_cairo_fill_preserve(const _context: variant); begin end;
function php_cairo_font_extents(const _context: variant): variant; begin end;
function php_cairo_get_antialias(const _context: variant): integer; begin end;
function php_cairo_get_current_point(const _context: variant): variant; begin end;
function php_cairo_get_dash(const _context: variant): variant; begin end;
function php_cairo_get_dash_count(const _context: variant): integer; begin end;
function php_cairo_get_fill_rule(const _context: variant): integer; begin end;
procedure php_cairo_get_font_face(const _context: variant); begin end;
procedure php_cairo_get_font_matrix(const _context: variant); begin end;
procedure php_cairo_get_font_options(const _context: variant); begin end;
procedure php_cairo_get_group_target(const _context: variant); begin end;
function php_cairo_get_line_cap(const _context: variant): integer; begin end;
function php_cairo_get_line_join(const _context: variant): integer; begin end;
function php_cairo_get_line_width(const _context: variant): extended; begin end;
procedure php_cairo_get_matrix(const _context: variant); begin end;
function php_cairo_get_miter_limit(const _context: variant): extended; begin end;
function php_cairo_get_operator(const _context: variant): integer; begin end;
procedure php_cairo_get_scaled_font(const _context: variant); begin end;
procedure php_cairo_get_source(const _context: variant); begin end;
procedure php_cairo_get_target(const _context: variant); begin end;
function php_cairo_get_tolerance(const _context: variant): extended; begin end;
procedure php_cairo_glyph_path(const _context: variant; const _glyphs: variant); begin end;
function php_cairo_has_current_point(const _context: variant): boolean; begin end;
procedure php_cairo_identity_matrix(const _context: variant); begin end;
function php_cairo_in_fill(const _context: variant; const _x: string; const _y: string): boolean; begin end;
function php_cairo_in_stroke(const _context: variant; const _x: string; const _y: string): boolean; begin end;
procedure php_cairo_line_to(const _context: variant; const _x: string; const _y: string); begin end;
procedure php_cairo_mask(const _context: variant; const _pattern: variant); begin end;
procedure php_cairo_mask_surface(const _context: variant; const _surface: variant; const _x: string; const _y: string); begin end;
procedure php_cairo_move_to(const _context: variant; const _x: string; const _y: string); begin end;
procedure php_cairo_new_path(const _context: variant); begin end;
procedure php_cairo_new_sub_path(const _context: variant); begin end;
procedure php_cairo_paint(const _context: variant); begin end;
procedure php_cairo_paint_with_alpha(const _context: variant; const _alpha: string); begin end;
function php_cairo_path_extents(const _context: variant): variant; begin end;
procedure php_cairo_pop_group(const _context: variant); begin end;
procedure php_cairo_pop_group_to_source(const _context: variant); begin end;
procedure php_cairo_push_group(const _context: variant); begin end;
procedure php_cairo_push_group_with_content(const _context: variant; const _content: string); begin end;
procedure php_cairo_rectangle(const _context: variant; const _x: string; const _y: string; const _width: string; const _height: string); begin end;
procedure php_cairo_rel_curve_to(const _context: variant; const _x1: string; const _y1: string; const _x2: string; const _y2: string; const _x3: string; const _y3: string); begin end;
procedure php_cairo_rel_line_to(const _context: variant; const _x: string; const _y: string); begin end;
procedure php_cairo_rel_move_to(const _context: variant; const _x: string; const _y: string); begin end;
procedure php_cairo_reset_clip(const _context: variant); begin end;
procedure php_cairo_restore(const _context: variant); begin end;
procedure php_cairo_rotate(const _context: variant; const _angle: string); begin end;
procedure php_cairo_save(const _context: variant); begin end;
procedure php_cairo_scale(const _context: variant; const _x: string; const _y: string); begin end;
procedure php_cairo_select_font_face(const _context: variant; const _family: string; const _slant: string; const _weight: string); begin end;
procedure php_cairo_set_antialias(const _context: variant; const _antialias: string); begin end;
procedure php_cairo_set_dash(const _context: variant; const _dashes: variant; const _offset: string); begin end;
procedure php_cairo_set_fill_rule(const _context: variant; const _setting: string); begin end;
procedure php_cairo_set_font_face(const _context: variant; const _fontface: variant); begin end;
procedure php_cairo_set_font_matrix(const _context: variant; const _matrix: variant); begin end;
procedure php_cairo_set_font_options(const _context: variant; const _fontoptions: variant); begin end;
procedure php_cairo_set_font_size(const _context: variant; const _size: string); begin end;
procedure php_cairo_set_line_cap(const _context: variant; const _setting: string); begin end;
procedure php_cairo_set_line_join(const _context: variant; const _setting: string); begin end;
procedure php_cairo_set_line_width(const _context: variant; const _width: string); begin end;
procedure php_cairo_set_matrix(const _context: variant; const _matrix: variant); begin end;
procedure php_cairo_set_miter_limit(const _context: variant; const _limit: string); begin end;
procedure php_cairo_set_operator(const _context: variant; const _setting: string); begin end;
procedure php_cairo_set_scaled_font(const _context: variant; const _scaledfont: variant); begin end;
procedure php_cairo_set_source(const _context: variant; const _pattern: variant); begin end;
procedure php_cairo_set_source_surface(const _context: variant; const _surface: variant; const _x: string; const _y: string); begin end;
procedure php_cairo_set_tolerance(const _context: variant; const _tolerance: string); begin end;
procedure php_cairo_show_page(const _context: variant); begin end;
procedure php_cairo_show_text(const _context: variant; const _text: string); begin end;
function php_cairo_status(const _context: variant): integer; begin end;
procedure php_cairo_stroke(const _context: variant); begin end;
function php_cairo_stroke_extents(const _context: variant): variant; begin end;
procedure php_cairo_stroke_preserve(const _context: variant); begin end;
function php_cairo_text_extents(const _context: variant): variant; begin end;
procedure php_cairo_text_path(const _context: variant; const _text: string); begin end;
procedure php_cairo_transform(const _context: variant; const _matrix: variant); begin end;
procedure php_cairo_translate(const _context: variant; const _x: string; const _y: string); begin end;
function php_cairo_user_to_device(const _context: variant; const _x: string; const _y: string): variant; begin end;
function php_cairo_user_to_device_distance(const _context: variant; const _x: string; const _y: string): variant; begin end;
procedure php_createSimilar(const _other: variant; const _content: integer; const _width: string; const _height: string); begin end;
procedure php_finish(); begin end;
function php_getContent(): integer; begin end;
function php_getDeviceOffset(): variant; begin end;
procedure php_markDirty(); begin end;
procedure php_markDirtyRectangle(const _x: string; const _y: string; const _width: string; const _height: string); begin end;
procedure php_setDeviceOffset(const _x: string; const _y: string); begin end;
procedure php_setFallbackResolution(const _x: string; const _y: string); begin end;
procedure php_writeToPng(const _file: string); begin end;
function php_getVersions(): variant; begin end;
procedure php_restrictToVersion(const _version: string); begin end;
function php_versionToString(const _version: integer): string; begin end;
function php_cairo_svg_get_versions(): variant; begin end;
procedure php_createForData(const _data: string; const _format: integer; const _width: integer; const _height: integer; const _stride: integer); begin end;
function php_getFormat(): integer; begin end;
function php_getHeight(): integer; begin end;
function php_getStride(): integer; begin end;
function php_getWidth(): integer; begin end;
procedure php_setSize(const _width: string; const _height: string); begin end;
procedure php_dscBeginPageSetup(); begin end;
procedure php_dscBeginSetup(); begin end;
procedure php_dscComment(const _comment: string); begin end;
function php_getEps(): boolean; begin end;
function php_getLevels(): variant; begin end;
function php_levelToString(const _level: integer): string; begin end;
procedure php_restrictToLevel(const _level: string); begin end;
procedure php_setEps(const _level: string); begin end;
function php_equal(const _other: string): boolean; begin end;
function php_getHintMetrics(): integer; begin end;
function php_getHintStyle(): integer; begin end;
function php_getSubpixelOrder(): integer; begin end;
function php_hash(): integer; begin end;
procedure php_merge(const _other: string); begin end;
procedure php_setHintMetrics(const _hint_metrics: string); begin end;
procedure php_setHintStyle(const _hint_style: string); begin end;
procedure php_setSubpixelOrder(const _subpixel_order: string); begin end;
function php_extents(): variant; begin end;
procedure php_getScaleMatrix(); begin end;
function php_glyphExtents(const _glyphs: string): variant; begin end;
procedure php_addColorStopRgb(const _offset: string; const _red: string; const _green: string; const _blue: string); begin end;
procedure php_addColorStopRgba(const _offset: string; const _red: string; const _green: string; const _blue: string; const _alpha: string); begin end;
function php_getColorStopCount(): integer; begin end;
function php_getColorStopRgba(const _index: string): variant; begin end;
function php_getExtend(): integer; begin end;
procedure php_setExtend(const _extend: integer); begin end;
function php_getRgba(): variant; begin end;
function php_getFilter(): integer; begin end;
procedure php_getSurface(); begin end;
procedure php_setFilter(const _filter: string); begin end;
function php_getPoints(): variant; begin end;
function php_getCircles(): variant; begin end;
function php_strideForWidth(const _format: integer; const _width: integer): integer; begin end;
procedure php_initIdentity(); begin end;
procedure php_initRotate(const _radians: extended); begin end;
procedure php_initScale(const _sx: extended; const _sy: extended); begin end;
procedure php_initTranslate(const _tx: extended; const _ty: extended); begin end;
procedure php_invert(); begin end;
procedure php_rotate(const _sx: string; const _sy: string); begin end;
procedure php_scale(const _sx: extended; const _sy: extended); begin end;
function php_transformDistance(const _dx: string; const _dy: string): variant; begin end;
function php_transformPoint(const _dx: string; const _dy: string): variant; begin end;
function php_cairo_matrix_init(const _xx: extended; const _yx: extended; const _xy: extended; const _yy: extended; const _x0: extended; const _y0: extended): variant; begin end;
function php_cairo_matrix_init_identity(): variant; begin end;
function php_cairo_matrix_init_rotate(const _radians: extended): variant; begin end;
function php_cairo_matrix_init_scale(const _sx: extended; const _sy: extended): variant; begin end;
function php_cairo_matrix_init_translate(const _tx: extended; const _ty: extended): variant; begin end;
procedure php_cairo_matrix_scale(const _context: variant; const _sx: extended; const _sy: extended); begin end;
function php_exif_imagetype(const _filename: string): integer; begin end;
function php_exif_read_data(const _filename: string; const _sections: string; const _arrays: boolean; const _thumbnail: boolean): variant; begin end;
function php_exif_tagname(const _index: integer): string; begin end;
function php_exif_thumbnail(const _filename: string; var _width: integer; var _height: integer; var _imagetype: integer): string; begin end;
function php_gd_info(): variant; begin end;
function php_getimagesize(const _filename: string; var _imageinfo: variant): variant; begin end;
function php_getimagesizefromstring(const _imagedata: string; var _imageinfo: variant): variant; begin end;
function php_image_type_to_extension(const _imagetype: integer; const _include_dot: boolean): string; begin end;
function php_image_type_to_mime_type(const _imagetype: integer): string; begin end;
function php_image2wbmp(const _image: variant; const _filename: string; const _threshold: integer): boolean; begin end;
function php_imageaffine(const _image: variant; const _affine: variant; const _clip: variant): variant; begin end;
function php_imageaffinematrixconcat(const _m1: variant; const _m2: variant): variant; begin end;
function php_imageaffinematrixget(const _type: integer; const _options: variant): variant; begin end;
function php_imagealphablending(const _image: variant; const _blendmode: boolean): boolean; begin end;
function php_imageantialias(const _image: variant; const _enabled: boolean): boolean; begin end;
function php_imagearc(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _start: integer; const _end: integer; const _color: integer): boolean; begin end;
function php_imagechar(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _c: string; const _color: integer): boolean; begin end;
function php_imagecharup(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _c: string; const _color: integer): boolean; begin end;
function php_imagecolorallocate(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer; begin end;
function php_imagecolorallocatealpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer; begin end;
function php_imagecolorat(const _image: variant; const _x: integer; const _y: integer): integer; begin end;
function php_imagecolorclosest(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer; begin end;
function php_imagecolorclosestalpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer; begin end;
function php_imagecolorclosesthwb(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer; begin end;
function php_imagecolordeallocate(const _image: variant; const _color: integer): boolean; begin end;
function php_imagecolorexact(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer; begin end;
function php_imagecolorexactalpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer; begin end;
function php_imagecolormatch(const _image1: variant; const _image2: variant): boolean; begin end;
function php_imagecolorresolve(const _image: variant; const _red: integer; const _green: integer; const _blue: integer): integer; begin end;
function php_imagecolorresolvealpha(const _image: variant; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer): integer; begin end;
procedure php_imagecolorset(const _image: variant; const _index: integer; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer); begin end;
function php_imagecolorsforindex(const _image: variant; const _index: integer): variant; begin end;
function php_imagecolorstotal(const _image: variant): integer; begin end;
function php_imagecolortransparent(const _image: variant; const _color: integer): integer; begin end;
function php_imageconvolution(const _image: variant; const _matrix: variant; const _div: extended; const _offset: extended): boolean; begin end;
function php_imagecopy(const _dst_im: variant; const _src_im: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _src_w: integer; const _src_h: integer): boolean; begin end;
function php_imagecopymerge(const _dst_im: variant; const _src_im: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _src_w: integer; const _src_h: integer; const _pct: integer): boolean; begin end;
function php_imagecopymergegray(const _dst_im: variant; const _src_im: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _src_w: integer; const _src_h: integer; const _pct: integer): boolean; begin end;
function php_imagecopyresampled(const _dst_image: variant; const _src_image: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _dst_w: integer; const _dst_h: integer; const _src_w: integer; const _src_h: integer): boolean; begin end;
function php_imagecopyresized(const _dst_image: variant; const _src_image: variant; const _dst_x: integer; const _dst_y: integer; const _src_x: integer; const _src_y: integer; const _dst_w: integer; const _dst_h: integer; const _src_w: integer; const _src_h: integer): boolean; begin end;
function php_imagecreate(const _width: integer; const _height: integer): variant; begin end;
function php_imagecreatefromgd2(const _filename: string): variant; begin end;
function php_imagecreatefromgd2part(const _filename: string; const _srcX: integer; const _srcY: integer; const _width: integer; const _height: integer): variant; begin end;
function php_imagecreatefromgd(const _filename: string): variant; begin end;
function php_imagecreatefromgif(const _filename: string): variant; begin end;
function php_imagecreatefromjpeg(const _filename: string): variant; begin end;
function php_imagecreatefrompng(const _filename: string): variant; begin end;
function php_imagecreatefromstring(const _image: string): variant; begin end;
function php_imagecreatefromwbmp(const _filename: string): variant; begin end;
function php_imagecreatefromwebp(const _filename: string): variant; begin end;
function php_imagecreatefromxbm(const _filename: string): variant; begin end;
function php_imagecreatefromxpm(const _filename: string): variant; begin end;
function php_imagecreatetruecolor(const _width: integer; const _height: integer): variant; begin end;
function php_imagecrop(const _image: variant; const _rect: variant): variant; begin end;
function php_imagecropauto(const _image: variant; const _mode: integer; const _threshold: extended; const _color: integer): variant; begin end;
function php_imagedashedline(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean; begin end;
function php_imagedestroy(const _image: variant): boolean; begin end;
function php_imageellipse(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _color: integer): boolean; begin end;
function php_imagefill(const _image: variant; const _x: integer; const _y: integer; const _color: integer): boolean; begin end;
function php_imagefilledarc(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _start: integer; const _end: integer; const _color: integer; const _style: integer): boolean; begin end;
function php_imagefilledellipse(const _image: variant; const _cx: integer; const _cy: integer; const _width: integer; const _height: integer; const _color: integer): boolean; begin end;
function php_imagefilledpolygon(const _image: variant; const _points: variant; const _num_points: integer; const _color: integer): boolean; begin end;
function php_imagefilledrectangle(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean; begin end;
function php_imagefilltoborder(const _image: variant; const _x: integer; const _y: integer; const _border: integer; const _color: integer): boolean; begin end;
function php_imagefilter(const _image: variant; const _filtertype: integer; const _arg1: integer; const _arg2: integer; const _arg3: integer; const _arg4: integer): boolean; begin end;
function php_imageflip(const _image: variant; const _mode: integer): boolean; begin end;
function php_imagefontheight(const _font: integer): integer; begin end;
function php_imagefontwidth(const _font: integer): integer; begin end;
function php_imageftbbox(const _size: extended; const _angle: extended; const _fontfile: string; const _text: string; const _extrainfo: variant): variant; begin end;
function php_imagefttext(const _image: variant; const _size: extended; const _angle: extended; const _x: integer; const _y: integer; const _color: integer; const _fontfile: string; const _text: string; const _extrainfo: variant): variant; begin end;
function php_imagegammacorrect(const _image: variant; const _inputgamma: extended; const _outputgamma: extended): boolean; begin end;
function php_imagegd2(const _image: variant; const _filename: string; const _chunk_size: integer; const _type: integer): boolean; begin end;
function php_imagegd(const _image: variant; const _filename: string): boolean; begin end;
function php_imagegif(const _image: variant; const _filename: string): boolean; begin end;
function php_imagegrabscreen(): variant; begin end;
function php_imagegrabwindow(const _window_handle: integer; const _client_area: integer): variant; begin end;
function php_imageinterlace(const _image: variant; const _interlace: integer): integer; begin end;
function php_imageistruecolor(const _image: variant): boolean; begin end;
function php_imagejpeg(const _image: variant; const _filename: string; const _quality: integer): boolean; begin end;
function php_imagelayereffect(const _image: variant; const _effect: integer): boolean; begin end;
function php_imageline(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean; begin end;
function php_imageloadfont(const _file: string): integer; begin end;
procedure php_imagepalettecopy(const _destination: variant; const _source: variant); begin end;
function php_imagepalettetotruecolor(const _src: variant): boolean; begin end;
function php_imagepng(const _image: variant; const _filename: string; const _quality: integer; const _filters: integer): boolean; begin end;
function php_imagepolygon(const _image: variant; const _points: variant; const _num_points: integer; const _color: integer): boolean; begin end;
function php_imagepsbbox(const _text: string; const _font: variant; const _size: integer): variant; begin end;
function php_imagepsbbox(const _text: string; const _font: variant; const _size: integer; const _space: integer; const _tightness: integer; const _angle: extended): variant; begin end;
function php_imagepsencodefont(const _font_index: variant; const _encodingfile: string): boolean; begin end;
function php_imagepsextendfont(const _font_index: variant; const _extend: extended): boolean; begin end;
function php_imagepsfreefont(const _font_index: variant): boolean; begin end;
function php_imagepsloadfont(const _filename: string): variant; begin end;
function php_imagepsslantfont(const _font_index: variant; const _slant: extended): boolean; begin end;
function php_imagepstext(const _image: variant; const _text: string; const _font_index: variant; const _size: integer; const _foreground: integer; const _background: integer; const _x: integer; const _y: integer; const _space: integer; const _tightness: integer; const _angle: extended; const _antialias_steps: integer): variant; begin end;
function php_imagerectangle(const _image: variant; const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer; const _color: integer): boolean; begin end;
function php_imagerotate(const _image: variant; const _angle: extended; const _bgd_color: integer; const _ignore_transparent: integer): variant; begin end;
function php_imagesavealpha(const _image: variant; const _saveflag: boolean): boolean; begin end;
function php_imagescale(const _image: variant; const _new_width: integer; const _new_height: integer; const _mode: integer): variant; begin end;
function php_imagesetbrush(const _image: variant; const _brush: variant): boolean; begin end;
function php_imagesetinterpolation(const _image: variant; const _method: integer): boolean; begin end;
function php_imagesetpixel(const _image: variant; const _x: integer; const _y: integer; const _color: integer): boolean; begin end;
function php_imagesetstyle(const _image: variant; const _style: variant): boolean; begin end;
function php_imagesetthickness(const _image: variant; const _thickness: integer): boolean; begin end;
function php_imagesettile(const _image: variant; const _tile: variant): boolean; begin end;
function php_imagestring(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _string: string; const _color: integer): boolean; begin end;
function php_imagestringup(const _image: variant; const _font: integer; const _x: integer; const _y: integer; const _string: string; const _color: integer): boolean; begin end;
function php_imagesx(const _image: variant): integer; begin end;
function php_imagesy(const _image: variant): integer; begin end;
function php_imagetruecolortopalette(const _image: variant; const _dither: boolean; const _ncolors: integer): boolean; begin end;
function php_imagettfbbox(const _size: extended; const _angle: extended; const _fontfile: string; const _text: string): variant; begin end;
function php_imagettftext(const _image: variant; const _size: extended; const _angle: extended; const _x: integer; const _y: integer; const _color: integer; const _fontfile: string; const _text: string): variant; begin end;
function php_imagetypes(): integer; begin end;
function php_imagewbmp(const _image: variant; const _filename: string; const _foreground: integer): boolean; begin end;
function php_imagewebp(const _image: variant; const _filename: string): boolean; begin end;
function php_imagexbm(const _image: variant; const _filename: string; const _foreground: integer): boolean; begin end;
function php_iptcembed(const _iptcdata: string; const _jpeg_file_name: string; const _spool: integer): variant; begin end;
function php_iptcparse(const _iptcblock: string): variant; begin end;
function php_jpeg2wbmp(const _jpegname: string; const _wbmpname: string; const _dest_height: integer; const _dest_width: integer; const _threshold: integer): boolean; begin end;
function php_png2wbmp(const _pngname: string; const _wbmpname: string; const _dest_height: integer; const _dest_width: integer; const _threshold: integer): boolean; begin end;
procedure php_deconstructimages(); begin end;
function php_destroy(): boolean; begin end;
function php_getcopyright(): string; begin end;
function php_getimageblueprimary(): variant; begin end;
function php_getimagechanneldepth(const _channel_type: integer): integer; begin end;
function php_getimagecolors(): integer; begin end;
function php_getimagecolorspace(): integer; begin end;
function php_getimagecompose(): integer; begin end;
function php_getimagedelay(): integer; begin end;
function php_getimagedepth(): integer; begin end;
function php_getimagedispose(): integer; begin end;
function php_getimageextrema(): variant; begin end;
function php_getimagefilename(): string; begin end;
function php_getimageformat(): string; begin end;
function php_getimagegamma(): extended; begin end;
function php_getimagegreenprimary(): variant; begin end;
function php_getimageheight(): integer; begin end;
function php_getimagehistogram(): variant; begin end;
function php_getimageindex(): integer; begin end;
function php_getimageinterlacescheme(): integer; begin end;
function php_getimageiterations(): integer; begin end;
function php_getimagematte(): integer; begin end;
function php_getimageprofile(const _name: string): string; begin end;
function php_getimageredprimary(): variant; begin end;
function php_getimagerenderingintent(): integer; begin end;
function php_getimageresolution(): variant; begin end;
function php_getimagescene(): integer; begin end;
function php_getimagesignature(): string; begin end;
function php_getimagetype(): integer; begin end;
function php_getimageunits(): integer; begin end;
function php_getimagewhitepoint(): variant; begin end;
function php_getimagewidth(): integer; begin end;
function php_getpackagename(): string; begin end;
function php_getquantumdepth(): variant; begin end;
function php_getreleasedate(): string; begin end;
function php_getsamplingfactors(): variant; begin end;
function php_hasnextimage(): variant; begin end;
function php_haspreviousimage(): variant; begin end;
function php_implodeimage(const _radius: extended): variant; begin end;
function php_labelimage(const _label: string): variant; begin end;
function php_levelimage(const _blackPoint: extended; const _gamma: extended; const _whitePoint: extended; const _channel: integer): variant; begin end;
function php_magnifyimage(): variant; begin end;
procedure php_medianfilterimage(const _radius: extended); begin end;
function php_nextimage(): boolean; begin end;
function php_previousimage(): boolean; begin end;
function php_queryfontmetrics(const _draw: variant; const _text: string): variant; begin end;
function php_queryfonts(const _pattern: string): variant; begin end;
function php_queryformats(const _pattern: string): variant; begin end;
function php_removeimageprofile(const _name: string): string; begin end;
procedure php_getfillcolor(); begin end;
function php_getfillopacity(): extended; begin end;
function php_getfont(): string; begin end;
function php_getfontsize(): extended; begin end;
function php_getfontstyle(): integer; begin end;
function php_getfontweight(): integer; begin end;
procedure php_getstrokecolor(); begin end;
function php_getstrokeopacity(): extended; begin end;
function php_getstrokewidth(): extended; begin end;
function php_gettextdecoration(): integer; begin end;
function php_gettextencoding(): string; begin end;
function php_getcolor(const _as_array: boolean; const _normalize_array: boolean): variant; begin end;
function php_getcolorcount(): integer; begin end;
function php_getcolorvalue(const _color: integer): extended; begin end;
function php_adaptiveBlurImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean; begin end;
function php_adaptiveResizeImage(const _columns: integer; const _rows: integer; const _bestfit: boolean): boolean; begin end;
function php_adaptiveSharpenImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean; begin end;
function php_adaptiveThresholdImage(const _width: integer; const _height: integer; const _offset: integer): boolean; begin end;
function php_addImage(const _source: variant): boolean; begin end;
function php_addNoiseImage(const _noise_type: integer; const _channel: integer): boolean; begin end;
function php_affineTransformImage(const _matrix: variant): boolean; begin end;
function php_animateImages(const _x_server: string): boolean; begin end;
function php_annotateImage(const _draw_settings: variant; const _x: extended; const _y: extended; const _angle: extended; const _text: string): boolean; begin end;
procedure php_autoLevelImage(const _CHANNEL: string); begin end;
function php_blackThresholdImage(const _threshold: variant): boolean; begin end;
procedure php_blueShiftImage(const _factor: extended); begin end;
function php_blurImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean; begin end;
function php_borderImage(const _bordercolor: variant; const _width: integer; const _height: integer): boolean; begin end;
procedure php_brightnessContrastImage(const _brightness: string; const _contrast: string; const _CHANNEL: string); begin end;
function php_charcoalImage(const _radius: extended; const _sigma: extended): boolean; begin end;
function php_chopImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean; begin end;
procedure php_clampImage(const _CHANNEL: string); begin end;
function php_clipImage(): boolean; begin end;
procedure php_clipImagePath(const _pathname: string; const _inside: string); begin end;
function php_clipPathImage(const _pathname: string; const _inside: boolean): boolean; begin end;
function php_clutImage(const _lookup_table: variant; const _channel: extended): boolean; begin end;
function php_colorFloodfillImage(const _fill: variant; const _fuzz: extended; const _bordercolor: variant; const _x: integer; const _y: integer): boolean; begin end;
function php_colorizeImage(const _colorize: variant; const _opacity: variant): boolean; begin end;
procedure php_colorMatrixImage(const _color_matrix: string); begin end;
function php_commentImage(const _comment: string): boolean; begin end;
function php_compareImageChannels(const _image: variant; const _channelType: integer; const _metricType: integer): variant; begin end;
function php_compareImages(const _compare: variant; const _metric: integer): variant; begin end;
function php_compositeImage(const _composite_object: variant; const _composite: integer; const _x: integer; const _y: integer; const _channel: integer): boolean; begin end;
function php_contrastImage(const _sharpen: boolean): boolean; begin end;
function php_contrastStretchImage(const _black_point: extended; const _white_point: extended; const _channel: integer): boolean; begin end;
function php_convolveImage(const _kernel: variant; const _channel: integer): boolean; begin end;
procedure php_count(const _mode: string); begin end;
function php_cropImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean; begin end;
function php_cropThumbnailImage(const _width: integer; const _height: integer): boolean; begin end;
function php_cycleColormapImage(const _displace: integer): boolean; begin end;
function php_decipherImage(const _passphrase: string): boolean; begin end;
function php_deleteImageArtifact(const _artifact: string): boolean; begin end;
procedure php_deleteImageProperty(const _name: string); begin end;
function php_deskewImage(const _threshold: extended): boolean; begin end;
function php_despeckleImage(): boolean; begin end;
function php_displayImage(const _servername: string): boolean; begin end;
function php_displayImages(const _servername: string): boolean; begin end;
function php_distortImage(const _method: integer; const _arguments: variant; const _bestfit: boolean): boolean; begin end;
function php_drawImage(const _draw: variant): boolean; begin end;
function php_edgeImage(const _radius: extended): boolean; begin end;
function php_embossImage(const _radius: extended; const _sigma: extended): boolean; begin end;
function php_encipherImage(const _passphrase: string): boolean; begin end;
function php_enhanceImage(): boolean; begin end;
function php_equalizeImage(): boolean; begin end;
function php_evaluateImage(const _op: integer; const _constant: extended; const _channel: integer): boolean; begin end;
function php_exportImagePixels(const _x: integer; const _y: integer; const _width: integer; const _height: integer; const _map: string; const _STORAGE: integer): variant; begin end;
function php_extentImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean; begin end;
procedure php_filter(const _ImagickKernel: variant; const _CHANNEL: integer); begin end;
function php_flipImage(): boolean; begin end;
function php_floodFillPaintImage(const _fill: variant; const _fuzz: extended; const _target: variant; const _x: integer; const _y: integer; const _invert: boolean; const _channel: integer): boolean; begin end;
function php_flopImage(): boolean; begin end;
procedure php_forwardFourierTransformimage(const _magnitude: boolean); begin end;
function php_frameImage(const _matte_color: variant; const _width: integer; const _height: integer; const _inner_bevel: integer; const _outer_bevel: integer): boolean; begin end;
function php_functionImage(const _function: integer; const _arguments: variant; const _channel: integer): boolean; begin end;
function php_gammaImage(const _gamma: extended; const _channel: integer): boolean; begin end;
function php_gaussianBlurImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean; begin end;
function php_getColorspace(): integer; begin end;
function php_getCompression(): integer; begin end;
function php_getCompressionQuality(): integer; begin end;
function php_getGravity(): integer; begin end;
function php_getHomeURL(): string; begin end;
function php_getImageAlphaChannel(): integer; begin end;
function php_getImageArtifact(const _artifact: string): string; begin end;
function php_getImageAttribute(const _key: string): string; begin end;
function php_getImageBlob(): string; begin end;
function php_getImageChannelDistortion(const _reference: variant; const _channel: integer; const _metric: integer): extended; begin end;
function php_getImageChannelDistortions(const _reference: variant; const _metric: integer; const _channel: integer): extended; begin end;
function php_getImageChannelExtrema(const _channel: integer): variant; begin end;
function php_getImageChannelKurtosis(const _channel: integer): variant; begin end;
function php_getImageChannelMean(const _channel: integer): variant; begin end;
function php_getImageChannelRange(const _channel: integer): variant; begin end;
function php_getImageChannelStatistics(): variant; begin end;
function php_getImageCompression(): integer; begin end;
function php_getImageCompressionQuality(): integer; begin end;
function php_getImageDistortion(const _reference: variant; const _metric: integer): extended; begin end;
function php_getImageGeometry(): variant; begin end;
function php_getImageGravity(): integer; begin end;
function php_getImageInterpolateMethod(): integer; begin end;
function php_getImageLength(): integer; begin end;
function php_getImageMagickLicense(): string; begin end;
function php_getImageMimeType(): string; begin end;
function php_getImageOrientation(): integer; begin end;
function php_getImagePage(): variant; begin end;
function php_getImageProfiles(const _pattern: string; const _only_names: boolean): variant; begin end;
function php_getImageProperties(const _pattern: string; const _only_names: boolean): variant; begin end;
function php_getImageProperty(const _name: string): string; begin end;
function php_getImagesBlob(): string; begin end;
function php_getImageSize(): integer; begin end;
function php_getImageTicksPerSecond(): integer; begin end;
function php_getImageTotalInkDensity(): extended; begin end;
function php_getImageVirtualPixelMethod(): integer; begin end;
function php_getInterlaceScheme(): integer; begin end;
function php_getIteratorIndex(): integer; begin end;
function php_getNumberImages(): integer; begin end;
function php_getOption(const _key: string): string; begin end;
function php_getPage(): variant; begin end;
function php_getPointSize(): extended; begin end;
function php_getQuantum(): integer; begin end;
function php_getQuantumRange(): variant; begin end;
function php_getRegistry(const _key: string): string; begin end;
function php_getResource(const _type: integer): integer; begin end;
function php_getResourceLimit(const _type: integer): integer; begin end;
function php_getSizeOffset(): integer; begin end;
function php_haldClutImage(const _clut: variant; const _channel: integer): boolean; begin end;
function php_identifyImage(const _appendRawOutput: boolean): variant; begin end;
function php_importImagePixels(const _x: integer; const _y: integer; const _width: integer; const _height: integer; const _map: string; const _storage: integer; const _pixels: variant): boolean; begin end;
procedure php_inverseFourierTransformImage(const _complement: string; const _magnitude: string); begin end;
function php_linearStretchImage(const _blackPoint: extended; const _whitePoint: extended): boolean; begin end;
function php_liquidRescaleImage(const _width: integer; const _height: integer; const _delta_x: extended; const _rigidity: extended): boolean; begin end;
function php_listRegistry(): variant; begin end;
function php_mapImage(const _map: variant; const _dither: boolean): boolean; begin end;
function php_matteFloodfillImage(const _alpha: extended; const _fuzz: extended; const _bordercolor: variant; const _x: integer; const _y: integer): boolean; begin end;
function php_minifyImage(): boolean; begin end;
function php_modulateImage(const _brightness: extended; const _saturation: extended; const _hue: extended): boolean; begin end;
procedure php_morphology(const _morphologyMethod: integer; const _iterations: integer; const _ImagickKernel: variant; const _CHANNEL: string); begin end;
function php_motionBlurImage(const _radius: extended; const _sigma: extended; const _angle: extended; const _channel: integer): boolean; begin end;
function php_negateImage(const _gray: boolean; const _channel: integer): boolean; begin end;
function php_newImage(const _cols: integer; const _rows: integer; const _background: variant; const _format: string): boolean; begin end;
function php_newPseudoImage(const _columns: integer; const _rows: integer; const _pseudoString: string): boolean; begin end;
function php_normalizeImage(const _channel: integer): boolean; begin end;
function php_oilPaintImage(const _radius: extended): boolean; begin end;
function php_opaquePaintImage(const _target: variant; const _fill: variant; const _fuzz: extended; const _invert: boolean; const _channel: integer): boolean; begin end;
function php_optimizeImageLayers(): boolean; begin end;
function php_orderedPosterizeImage(const _threshold_map: string; const _channel: integer): boolean; begin end;
function php_paintFloodfillImage(const _fill: variant; const _fuzz: extended; const _bordercolor: variant; const _x: integer; const _y: integer; const _channel: integer): boolean; begin end;
function php_paintOpaqueImage(const _target: variant; const _fill: variant; const _fuzz: extended; const _channel: integer): boolean; begin end;
function php_paintTransparentImage(const _target: variant; const _alpha: extended; const _fuzz: extended): boolean; begin end;
function php_pingImage(const _filename: string): boolean; begin end;
function php_pingImageBlob(const _image: string): boolean; begin end;
function php_pingImageFile(const _filehandle: variant; const _fileName: string): boolean; begin end;
function php_polaroidImage(const _properties: variant; const _angle: extended): boolean; begin end;
function php_posterizeImage(const _levels: integer; const _dither: boolean): boolean; begin end;
function php_previewImages(const _preview: integer): boolean; begin end;
function php_profileImage(const _name: string; const _profile: string): boolean; begin end;
function php_quantizeImage(const _numberColors: integer; const _colorspace: integer; const _treedepth: integer; const _dither: boolean; const _measureError: boolean): boolean; begin end;
function php_quantizeImages(const _numberColors: integer; const _colorspace: integer; const _treedepth: integer; const _dither: boolean; const _measureError: boolean): boolean; begin end;
function php_queryFontMetrics(const _properties: variant; const _text: string; const _multiline: boolean): variant; begin end;
function php_radialBlurImage(const _angle: extended; const _channel: integer): boolean; begin end;
function php_raiseImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer; const _raise: boolean): boolean; begin end;
function php_randomThresholdImage(const _low: extended; const _high: extended; const _channel: integer): boolean; begin end;
function php_readImage(const _filename: string): boolean; begin end;
function php_readImageBlob(const _image: string; const _filename: string): boolean; begin end;
function php_readImageFile(const _filehandle: variant; const _fileName: string): boolean; begin end;
function php_recolorImage(const _matrix: variant): boolean; begin end;
function php_reduceNoiseImage(const _radius: extended): boolean; begin end;
function php_remapImage(const _replacement: variant; const _DITHER: integer): boolean; begin end;
function php_removeImage(): boolean; begin end;
function php_render(): boolean; begin end;
function php_resampleImage(const _x_resolution: extended; const _y_resolution: extended; const _filter: integer; const _blur: extended): boolean; begin end;
function php_resetImagePage(const _page: string): boolean; begin end;
function php_resizeImage(const _columns: integer; const _rows: integer; const _filter: integer; const _blur: extended; const _bestfit: boolean): boolean; begin end;
function php_rollImage(const _x: integer; const _y: integer): boolean; begin end;
function php_rotateImage(const _background: variant; const _degrees: extended): boolean; begin end;
procedure php_rotationalBlurImage(const _angle: string; const _CHANNEL: string); begin end;
function php_roundCorners(const _x_rounding: extended; const _y_rounding: extended; const _stroke_width: extended; const _displace: extended; const _size_correction: extended): boolean; begin end;
function php_sampleImage(const _columns: integer; const _rows: integer): boolean; begin end;
function php_scaleImage(const _cols: integer; const _rows: integer; const _bestfit: boolean): boolean; begin end;
function php_segmentImage(const _COLORSPACE: integer; const _cluster_threshold: extended; const _smooth_threshold: extended; const _verbose: boolean): boolean; begin end;
procedure php_selectiveBlurImage(const _radius: extended; const _sigma: extended; const _threshold: extended; const _CHANNEL: integer); begin end;
function php_separateImageChannel(const _channel: integer): boolean; begin end;
function php_sepiaToneImage(const _threshold: extended): boolean; begin end;
function php_setBackgroundColor(const _background: variant): boolean; begin end;
function php_setColorspace(const _COLORSPACE: integer): boolean; begin end;
function php_setCompression(const _compression: integer): boolean; begin end;
function php_setCompressionQuality(const _quality: integer): boolean; begin end;
function php_setFilename(const _filename: string): boolean; begin end;
function php_setFirstIterator(): boolean; begin end;
function php_setFont(const _font: string): boolean; begin end;
function php_setFormat(const _format: string): boolean; begin end;
function php_setGravity(const _gravity: integer): boolean; begin end;
function php_setImage(const _replace: variant): boolean; begin end;
function php_setImageAlphaChannel(const _mode: integer): boolean; begin end;
function php_setImageArtifact(const _artifact: string; const _value: string): boolean; begin end;
procedure php_setImageAttribute(const _key: string; const _value: string); begin end;
function php_setImageBackgroundColor(const _background: variant): boolean; begin end;
function php_setImageBias(const _bias: extended): boolean; begin end;
procedure php_setImageBiasQuantum(const _bias: string); begin end;
function php_setImageBluePrimary(const _x: extended; const _y: extended): boolean; begin end;
function php_setImageBorderColor(const _border: variant): boolean; begin end;
function php_setImageChannelDepth(const _channel: integer; const _depth: integer): boolean; begin end;
function php_setImageClipMask(const _clip_mask: variant): boolean; begin end;
function php_setImageColormapColor(const _index: integer; const _color: variant): boolean; begin end;
function php_setImageColorspace(const _colorspace: integer): boolean; begin end;
function php_setImageCompose(const _compose: integer): boolean; begin end;
function php_setImageCompression(const _compression: integer): boolean; begin end;
function php_setImageCompressionQuality(const _quality: integer): boolean; begin end;
function php_setImageDelay(const _delay: integer): boolean; begin end;
function php_setImageDepth(const _depth: integer): boolean; begin end;
function php_setImageDispose(const _dispose: integer): boolean; begin end;
function php_setImageExtent(const _columns: integer; const _rows: integer): boolean; begin end;
function php_setImageFilename(const _filename: string): boolean; begin end;
function php_setImageFormat(const _format: string): boolean; begin end;
function php_setImageGamma(const _gamma: extended): boolean; begin end;
function php_setImageGravity(const _gravity: integer): boolean; begin end;
function php_setImageGreenPrimary(const _x: extended; const _y: extended): boolean; begin end;
function php_setImageIndex(const _index: integer): boolean; begin end;
function php_setImageInterlaceScheme(const _interlace_scheme: integer): boolean; begin end;
function php_setImageInterpolateMethod(const _method: integer): boolean; begin end;
function php_setImageIterations(const _iterations: integer): boolean; begin end;
function php_setImageMatte(const _matte: boolean): boolean; begin end;
function php_setImageMatteColor(const _matte: variant): boolean; begin end;
function php_setImageOpacity(const _opacity: extended): boolean; begin end;
function php_setImageOrientation(const _orientation: integer): boolean; begin end;
function php_setImagePage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean; begin end;
function php_setImageProfile(const _name: string; const _profile: string): boolean; begin end;
function php_setImageProperty(const _name: string; const _value: string): boolean; begin end;
function php_setImageRedPrimary(const _x: extended; const _y: extended): boolean; begin end;
function php_setImageRenderingIntent(const _rendering_intent: integer): boolean; begin end;
function php_setImageResolution(const _x_resolution: extended; const _y_resolution: extended): boolean; begin end;
function php_setImageScene(const _scene: integer): boolean; begin end;
function php_setImageTicksPerSecond(const _ticks_per_second: integer): boolean; begin end;
function php_setImageType(const _image_type: integer): boolean; begin end;
function php_setImageUnits(const _units: integer): boolean; begin end;
function php_setImageVirtualPixelMethod(const _method: integer): boolean; begin end;
function php_setImageWhitePoint(const _x: extended; const _y: extended): boolean; begin end;
function php_setInterlaceScheme(const _interlace_scheme: integer): boolean; begin end;
function php_setIteratorIndex(const _index: integer): boolean; begin end;
function php_setLastIterator(): boolean; begin end;
function php_setOption(const _key: string; const _value: string): boolean; begin end;
function php_setPage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean; begin end;
function php_setPointSize(const _point_size: extended): boolean; begin end;
procedure php_setProgressMonitor(const _callback: variant); begin end;
procedure php_setRegistry(const _key: string; const _value: string); begin end;
function php_setResolution(const _x_resolution: extended; const _y_resolution: extended): boolean; begin end;
function php_setResourceLimit(const _type: integer; const _limit: integer): boolean; begin end;
function php_setSamplingFactors(const _factors: variant): boolean; begin end;
function php_setSize(const _columns: integer; const _rows: integer): boolean; begin end;
function php_setSizeOffset(const _columns: integer; const _rows: integer; const _offset: integer): boolean; begin end;
function php_shadeImage(const _gray: boolean; const _azimuth: extended; const _elevation: extended): boolean; begin end;
function php_shadowImage(const _opacity: extended; const _sigma: extended; const _x: integer; const _y: integer): boolean; begin end;
function php_sharpenImage(const _radius: extended; const _sigma: extended; const _channel: integer): boolean; begin end;
function php_shaveImage(const _columns: integer; const _rows: integer): boolean; begin end;
function php_shearImage(const _background: variant; const _x_shear: extended; const _y_shear: extended): boolean; begin end;
function php_sigmoidalContrastImage(const _sharpen: boolean; const _alpha: extended; const _beta: extended; const _channel: integer): boolean; begin end;
function php_sketchImage(const _radius: extended; const _sigma: extended; const _angle: extended): boolean; begin end;
function php_solarizeImage(const _threshold: integer): boolean; begin end;
function php_sparseColorImage(const _SPARSE_METHOD: integer; const _arguments: variant; const _channel: integer): boolean; begin end;
function php_spliceImage(const _width: integer; const _height: integer; const _x: integer; const _y: integer): boolean; begin end;
function php_spreadImage(const _radius: extended): boolean; begin end;
procedure php_statisticImage(const _type: integer; const _width: integer; const _height: integer; const _CHANNEL: string); begin end;
function php_stereoImage(const _offset_wand: variant): boolean; begin end;
function php_stripImage(): boolean; begin end;
function php_swirlImage(const _degrees: extended): boolean; begin end;
function php_textureImage(const _texture_wand: variant): boolean; begin end;
function php_thresholdImage(const _threshold: extended; const _channel: integer): boolean; begin end;
function php_thumbnailImage(const _columns: integer; const _rows: integer; const _bestfit: boolean; const _fill: boolean): boolean; begin end;
function php_tintImage(const _tint: variant; const _opacity: variant): boolean; begin end;
function php_transformImageColorspace(const _colorspace: integer): boolean; begin end;
function php_transparentPaintImage(const _target: variant; const _alpha: extended; const _fuzz: extended; const _invert: boolean): boolean; begin end;
function php_transposeImage(): boolean; begin end;
function php_transverseImage(): boolean; begin end;
function php_trimImage(const _fuzz: extended): boolean; begin end;
function php_uniqueImageColors(): boolean; begin end;
function php_unsharpMaskImage(const _radius: extended; const _sigma: extended; const _amount: extended; const _threshold: extended; const _channel: integer): boolean; begin end;
function php_vignetteImage(const _blackPoint: extended; const _whitePoint: extended; const _x: integer; const _y: integer): boolean; begin end;
function php_waveImage(const _amplitude: extended; const _length: extended): boolean; begin end;
function php_whiteThresholdImage(const _threshold: variant): boolean; begin end;
function php_writeImage(const _filename: string): boolean; begin end;
function php_writeImageFile(const _filehandle: variant): boolean; begin end;
function php_writeImages(const _filename: string; const _adjoin: boolean): boolean; begin end;
function php_writeImagesFile(const _filehandle: variant): boolean; begin end;
function php_callback(const _offset: variant; const _span: variant): boolean; begin end;
function php_affine(const _affine: variant): boolean; begin end;
function php_annotation(const _x: extended; const _y: extended; const _text: string): boolean; begin end;
function php_arc(const _sx: extended; const _sy: extended; const _ex: extended; const _ey: extended; const _sd: extended; const _ed: extended): boolean; begin end;
function php_bezier(const _coordinates: variant): boolean; begin end;
function php_circle(const _ox: extended; const _oy: extended; const _px: extended; const _py: extended): boolean; begin end;
function php_color(const _x: extended; const _y: extended; const _paintMethod: integer): boolean; begin end;
function php_comment(const _comment: string): boolean; begin end;
function php_composite(const _compose: integer; const _x: extended; const _y: extended; const _width: extended; const _height: extended; const _compositeWand: variant): boolean; begin end;
function php_ellipse(const _ox: extended; const _oy: extended; const _rx: extended; const _ry: extended; const _start: extended; const _end: extended): boolean; begin end;
function php_getClipPath(): string; begin end;
function php_getClipRule(): integer; begin end;
function php_getClipUnits(): integer; begin end;
function php_getFontFamily(): string; begin end;
function php_getFontStretch(): integer; begin end;
function php_getStrokeAntialias(): boolean; begin end;
function php_getStrokeDashArray(): variant; begin end;
function php_getStrokeDashOffset(): extended; begin end;
function php_getStrokeLineCap(): integer; begin end;
function php_getStrokeLineJoin(): integer; begin end;
function php_getStrokeMiterLimit(): integer; begin end;
function php_getTextAlignment(): integer; begin end;
function php_getTextAntialias(): boolean; begin end;
function php_getTextInterlineSpacing(): extended; begin end;
function php_getTextInterwordSpacing(): extended; begin end;
function php_getTextKerning(): extended; begin end;
function php_getVectorGraphics(): string; begin end;
function php_line(const _sx: extended; const _sy: extended; const _ex: extended; const _ey: extended): boolean; begin end;
function php_matte(const _x: extended; const _y: extended; const _paintMethod: integer): boolean; begin end;
function php_pathClose(): boolean; begin end;
function php_pathCurveToAbsolute(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_pathCurveToQuadraticBezierAbsolute(const _x1: extended; const _y1: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_pathCurveToQuadraticBezierRelative(const _x1: extended; const _y1: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_pathCurveToQuadraticBezierSmoothAbsolute(const _x: extended; const _y: extended): boolean; begin end;
function php_pathCurveToQuadraticBezierSmoothRelative(const _x: extended; const _y: extended): boolean; begin end;
function php_pathCurveToRelative(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_pathCurveToSmoothAbsolute(const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_pathCurveToSmoothRelative(const _x2: extended; const _y2: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_pathEllipticArcAbsolute(const _rx: extended; const _ry: extended; const _x_axis_rotation: extended; const _large_arc_flag: boolean; const _sweep_flag: boolean; const _x: extended; const _y: extended): boolean; begin end;
function php_pathEllipticArcRelative(const _rx: extended; const _ry: extended; const _x_axis_rotation: extended; const _large_arc_flag: boolean; const _sweep_flag: boolean; const _x: extended; const _y: extended): boolean; begin end;
function php_pathFinish(): boolean; begin end;
function php_pathLineToAbsolute(const _x: extended; const _y: extended): boolean; begin end;
function php_pathLineToHorizontalAbsolute(const _x: extended): boolean; begin end;
function php_pathLineToHorizontalRelative(const _x: extended): boolean; begin end;
function php_pathLineToRelative(const _x: extended; const _y: extended): boolean; begin end;
function php_pathLineToVerticalAbsolute(const _y: extended): boolean; begin end;
function php_pathLineToVerticalRelative(const _y: extended): boolean; begin end;
function php_pathMoveToAbsolute(const _x: extended; const _y: extended): boolean; begin end;
function php_pathMoveToRelative(const _x: extended; const _y: extended): boolean; begin end;
function php_pathStart(): boolean; begin end;
function php_point(const _x: extended; const _y: extended): boolean; begin end;
function php_polygon(const _coordinates: variant): boolean; begin end;
function php_polyline(const _coordinates: variant): boolean; begin end;
function php_pop(): boolean; begin end;
function php_popClipPath(): boolean; begin end;
function php_popDefs(): boolean; begin end;
function php_popPattern(): boolean; begin end;
function php_push(): boolean; begin end;
function php_pushClipPath(const _clip_mask_id: string): boolean; begin end;
function php_pushDefs(): boolean; begin end;
function php_pushPattern(const _pattern_id: string; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean; begin end;
function php_rectangle(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended): boolean; begin end;
procedure php_resetVectorGraphics(); begin end;
function php_rotate(const _degrees: extended): boolean; begin end;
function php_roundRectangle(const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _rx: extended; const _ry: extended): boolean; begin end;
function php_setClipPath(const _clip_mask: string): boolean; begin end;
function php_setClipRule(const _fill_rule: integer): boolean; begin end;
function php_setClipUnits(const _clip_units: integer): boolean; begin end;
function php_setFillAlpha(const _opacity: extended): boolean; begin end;
function php_setFillColor(const _fill_pixel: variant): boolean; begin end;
function php_setFillOpacity(const _fillOpacity: extended): boolean; begin end;
function php_setFillPatternURL(const _fill_url: string): boolean; begin end;
function php_setFillRule(const _fill_rule: integer): boolean; begin end;
function php_setFontFamily(const _font_family: string): boolean; begin end;
function php_setFontSize(const _pointsize: extended): boolean; begin end;
function php_setFontStretch(const _fontStretch: integer): boolean; begin end;
function php_setFontStyle(const _style: integer): boolean; begin end;
function php_setFontWeight(const _font_weight: integer): boolean; begin end;
procedure php_setResolution(const _x_resolution: string; const _y_resolution: string); begin end;
function php_setStrokeAlpha(const _opacity: extended): boolean; begin end;
function php_setStrokeAntialias(const _stroke_antialias: boolean): boolean; begin end;
function php_setStrokeColor(const _stroke_pixel: variant): boolean; begin end;
function php_setStrokeDashArray(const _dashArray: variant): boolean; begin end;
function php_setStrokeDashOffset(const _dash_offset: extended): boolean; begin end;
function php_setStrokeLineCap(const _linecap: integer): boolean; begin end;
function php_setStrokeLineJoin(const _linejoin: integer): boolean; begin end;
function php_setStrokeMiterLimit(const _miterlimit: integer): boolean; begin end;
function php_setStrokeOpacity(const _stroke_opacity: extended): boolean; begin end;
function php_setStrokePatternURL(const _stroke_url: string): boolean; begin end;
function php_setStrokeWidth(const _stroke_width: extended): boolean; begin end;
function php_setTextAlignment(const _alignment: integer): boolean; begin end;
function php_setTextAntialias(const _antiAlias: boolean): boolean; begin end;
function php_setTextDecoration(const _decoration: integer): boolean; begin end;
function php_setTextEncoding(const _encoding: string): boolean; begin end;
procedure php_setTextInterlineSpacing(const _spacing: extended); begin end;
procedure php_setTextInterwordSpacing(const _spacing: extended); begin end;
procedure php_setTextKerning(const _kerning: extended); begin end;
function php_setTextUnderColor(const _under_color: variant): boolean; begin end;
function php_setVectorGraphics(const _xml: string): boolean; begin end;
function php_setViewbox(const _x1: integer; const _y1: integer; const _x2: integer; const _y2: integer): boolean; begin end;
function php_skewX(const _degrees: extended): boolean; begin end;
function php_skewY(const _degrees: extended): boolean; begin end;
function php_translate(const _x: extended; const _y: extended): boolean; begin end;
function php_getColor(const _normalized: boolean): variant; begin end;
function php_getColorAsString(): string; begin end;
function php_getColorQuantum(): variant; begin end;
function php_getColorValueQuantum(): variant; begin end;
function php_getHSL(): variant; begin end;
function php_getIndex(): integer; begin end;
function php_isPixelSimilar(const _color: variant; const _fuzz: extended): boolean; begin end;
function php_isPixelSimilarQuantum(const _color: string; const _fuzz: string): boolean; begin end;
function php_isSimilar(const _color: variant; const _fuzz: extended): boolean; begin end;
function php_setColor(const _color: string): boolean; begin end;
procedure php_setcolorcount(const _colorCount: string); begin end;
function php_setColorValue(const _color: integer; const _value: extended): boolean; begin end;
procedure php_setColorValueQuantum(const _color: integer; const _value: variant); begin end;
function php_setHSL(const _hue: extended; const _saturation: extended; const _luminosity: extended): boolean; begin end;
procedure php_setIndex(const _index: integer); begin end;
function php_getCurrentIteratorRow(): variant; begin end;
function php_getIteratorRow(): integer; begin end;
function php_getNextIteratorRow(): variant; begin end;
function php_getPreviousIteratorRow(): variant; begin end;
function php_newPixelIterator(const _wand: variant): boolean; begin end;
function php_newPixelRegionIterator(const _wand: variant; const _x: integer; const _y: integer; const _columns: integer; const _rows: integer): boolean; begin end;
function php_resetIterator(): boolean; begin end;
function php_setIteratorFirstRow(): boolean; begin end;
function php_setIteratorLastRow(): boolean; begin end;
function php_setIteratorRow(const _row: integer): boolean; begin end;
function php_syncIterator(): boolean; begin end;
procedure php_addKernel(const _ImagickKernel: variant); begin end;
procedure php_addUnityKernel(); begin end;
procedure php_scale(); begin end;
function php_separate(): variant; begin end;
procedure php_cyrus_authenticate(const _connection: variant; const _mechlist: string; const _service: string; const _user: string; const _minssf: integer; const _maxssf: integer; const _authname: string; const _password: string); begin end;
function php_cyrus_bind(const _connection: variant; const _callbacks: variant): boolean; begin end;
function php_cyrus_close(const _connection: variant): boolean; begin end;
function php_cyrus_connect(const _host: string; const _port: string; const _flags: integer): variant; begin end;
function php_cyrus_query(const _connection: variant; const _query: string): variant; begin end;
function php_cyrus_unbind(const _connection: variant; const _trigger_name: string): boolean; begin end;
function php_imap_8bit(const _string: string): string; begin end;
function php_imap_alerts(): variant; begin end;
function php_imap_append(const _imap_stream: variant; const _mailbox: string; const _message: string; const _options: string; const _internal_date: string): boolean; begin end;
function php_imap_base64(const _text: string): string; begin end;
function php_imap_binary(const _string: string): string; begin end;
function php_imap_body(const _imap_stream: variant; const _msg_number: integer; const _options: integer): string; begin end;
function php_imap_bodystruct(const _imap_stream: variant; const _msg_number: integer; const _section: string): variant; begin end;
function php_imap_check(const _imap_stream: variant): variant; begin end;
function php_imap_clearflag_full(const _imap_stream: variant; const _sequence: string; const _flag: string; const _options: integer): boolean; begin end;
function php_imap_close(const _imap_stream: variant; const _flag: integer): boolean; begin end;
function php_imap_createmailbox(const _imap_stream: variant; const _mailbox: string): boolean; begin end;
function php_imap_delete(const _imap_stream: variant; const _msg_number: integer; const _options: integer): boolean; begin end;
function php_imap_deletemailbox(const _imap_stream: variant; const _mailbox: string): boolean; begin end;
function php_imap_errors(): variant; begin end;
function php_imap_expunge(const _imap_stream: variant): boolean; begin end;
function php_imap_fetch_overview(const _imap_stream: variant; const _sequence: string; const _options: integer): variant; begin end;
function php_imap_fetchbody(const _imap_stream: variant; const _msg_number: integer; const _section: string; const _options: integer): string; begin end;
function php_imap_fetchheader(const _imap_stream: variant; const _msg_number: integer; const _options: integer): string; begin end;
function php_imap_fetchmime(const _imap_stream: variant; const _msg_number: integer; const _section: string; const _options: integer): string; begin end;
function php_imap_fetchstructure(const _imap_stream: variant; const _msg_number: integer; const _options: integer): variant; begin end;
function php_imap_gc(const _imap_stream: variant; const _caches: integer): boolean; begin end;
function php_imap_get_quota(const _imap_stream: variant; const _quota_root: string): variant; begin end;
function php_imap_get_quotaroot(const _imap_stream: variant; const _quota_root: string): variant; begin end;
function php_imap_getacl(const _imap_stream: variant; const _mailbox: string): variant; begin end;
function php_imap_getmailboxes(const _imap_stream: variant; const _ref: string; const _pattern: string): variant; begin end;
function php_imap_getsubscribed(const _imap_stream: variant; const _ref: string; const _pattern: string): variant; begin end;
function php_imap_headerinfo(const _imap_stream: variant; const _msg_number: integer; const _fromlength: integer; const _subjectlength: integer; const _defaulthost: string): variant; begin end;
function php_imap_headers(const _imap_stream: variant): variant; begin end;
function php_imap_last_error(): string; begin end;
function php_imap_list(const _imap_stream: variant; const _ref: string; const _pattern: string): variant; begin end;
function php_imap_listscan(const _imap_stream: variant; const _ref: string; const _pattern: string; const _content: string): variant; begin end;
function php_imap_lsub(const _imap_stream: variant; const _ref: string; const _pattern: string): variant; begin end;
function php_imap_mail_compose(const _envelope: variant; const _body: variant): string; begin end;
function php_imap_mail_copy(const _imap_stream: variant; const _msglist: string; const _mailbox: string; const _options: integer): boolean; begin end;
function php_imap_mail_move(const _imap_stream: variant; const _msglist: string; const _mailbox: string; const _options: integer): boolean; begin end;
function php_imap_mail(const _to: string; const _subject: string; const _message: string; const _additional_headers: string; const _cc: string; const _bcc: string; const _rpath: string): boolean; begin end;
function php_imap_mailboxmsginfo(const _imap_stream: variant): variant; begin end;
function php_imap_mime_header_decode(const _text: string): variant; begin end;
function php_imap_msgno(const _imap_stream: variant; const _uid: integer): integer; begin end;
function php_imap_num_msg(const _imap_stream: variant): integer; begin end;
function php_imap_num_recent(const _imap_stream: variant): integer; begin end;
function php_imap_open(const _mailbox: string; const _username: string; const _password: string; const _options: integer; const _n_retries: integer; const _params: variant): variant; begin end;
function php_imap_ping(const _imap_stream: variant): boolean; begin end;
function php_imap_qprint(const _string: string): string; begin end;
function php_imap_renamemailbox(const _imap_stream: variant; const _old_mbox: string; const _new_mbox: string): boolean; begin end;
function php_imap_reopen(const _imap_stream: variant; const _mailbox: string; const _options: integer; const _n_retries: integer): boolean; begin end;
function php_imap_rfc822_parse_adrlist(const _address: string; const _default_host: string): variant; begin end;
function php_imap_rfc822_parse_headers(const _headers: string; const _defaulthost: string): variant; begin end;
function php_imap_rfc822_write_address(const _mailbox: string; const _host: string; const _personal: string): string; begin end;
function php_imap_savebody(const _imap_stream: variant; const _file: variant; const _msg_number: integer; const _part_number: string; const _options: integer): boolean; begin end;
function php_imap_search(const _imap_stream: variant; const _criteria: string; const _options: integer; const _charset: string): variant; begin end;
function php_imap_set_quota(const _imap_stream: variant; const _quota_root: string; const _quota_limit: integer): boolean; begin end;
function php_imap_setacl(const _imap_stream: variant; const _mailbox: string; const _id: string; const _rights: string): boolean; begin end;
function php_imap_setflag_full(const _imap_stream: variant; const _sequence: string; const _flag: string; const _options: integer): boolean; begin end;
function php_imap_sort(const _imap_stream: variant; const _criteria: integer; const _reverse: integer; const _options: integer; const _search_criteria: string; const _charset: string): variant; begin end;
function php_imap_status(const _imap_stream: variant; const _mailbox: string; const _options: integer): variant; begin end;
function php_imap_subscribe(const _imap_stream: variant; const _mailbox: string): boolean; begin end;
function php_imap_thread(const _imap_stream: variant; const _options: integer): variant; begin end;
function php_imap_timeout(const _timeout_type: integer; const _timeout: integer): variant; begin end;
function php_imap_uid(const _imap_stream: variant; const _msg_number: integer): integer; begin end;
function php_imap_undelete(const _imap_stream: variant; const _msg_number: integer; const _flags: integer): boolean; begin end;
function php_imap_unsubscribe(const _imap_stream: variant; const _mailbox: string): boolean; begin end;
function php_imap_utf7_decode(const _text: string): string; begin end;
function php_imap_utf7_encode(const _data: string): string; begin end;
function php_imap_utf8(const _mime_encoded_text: string): string; begin end;
function php_ezmlm_hash(const _addr: string): integer; begin end;
function php_mail(const _to: string; const _subject: string; const _message: string; const _additional_headers: string; const _additional_parameters: string): boolean; begin end;
function php_mailparse_determine_best_xfer_encoding(const _fp: variant): string; begin end;
function php_mailparse_msg_create(): variant; begin end;
function php_mailparse_msg_extract_part_file(const _mimemail: variant; const _filename: variant; const _callbackfunc: variant): string; begin end;
procedure php_mailparse_msg_extract_part(const _mimemail: variant; const _msgbody: string; const _callbackfunc: variant); begin end;
function php_mailparse_msg_extract_whole_part_file(const _mimemail: variant; const _filename: string; const _callbackfunc: variant): string; begin end;
function php_mailparse_msg_free(const _mimemail: variant): boolean; begin end;
function php_mailparse_msg_get_part_data(const _mimemail: variant): variant; begin end;
function php_mailparse_msg_get_part(const _mimemail: variant; const _mimesection: string): variant; begin end;
function php_mailparse_msg_get_structure(const _mimemail: variant): variant; begin end;
function php_mailparse_msg_parse_file(const _filename: string): variant; begin end;
function php_mailparse_msg_parse(const _mimemail: variant; const _data: string): boolean; begin end;
function php_mailparse_rfc822_parse_addresses(const _addresses: string): variant; begin end;
function php_mailparse_stream_encode(const _sourcefp: variant; const _destfp: variant; const _encoding: string): boolean; begin end;
function php_mailparse_uudecode_all(const _fp: variant): variant; begin end;
function php_vpopmail_add_alias_domain_ex(const _olddomain: string; const _newdomain: string): boolean; begin end;
function php_vpopmail_add_alias_domain(const _domain: string; const _aliasdomain: string): boolean; begin end;
function php_vpopmail_add_domain_ex(const _domain: string; const _passwd: string; const _quota: string; const _bounce: string; const _apop: boolean): boolean; begin end;
function php_vpopmail_add_domain(const _domain: string; const _dir: string; const _uid: integer; const _gid: integer): boolean; begin end;
function php_vpopmail_add_user(const _user: string; const _domain: string; const _password: string; const _gecos: string; const _apop: boolean): boolean; begin end;
function php_vpopmail_alias_add(const _user: string; const _domain: string; const _alias: string): boolean; begin end;
function php_vpopmail_alias_del_domain(const _domain: string): boolean; begin end;
function php_vpopmail_alias_del(const _user: string; const _domain: string): boolean; begin end;
function php_vpopmail_alias_get_all(const _domain: string): variant; begin end;
function php_vpopmail_alias_get(const _alias: string; const _domain: string): variant; begin end;
function php_vpopmail_auth_user(const _user: string; const _domain: string; const _password: string; const _apop: string): boolean; begin end;
function php_vpopmail_del_domain_ex(const _domain: string): boolean; begin end;
function php_vpopmail_del_domain(const _domain: string): boolean; begin end;
function php_vpopmail_del_user(const _user: string; const _domain: string): boolean; begin end;
function php_vpopmail_error(): string; begin end;
function php_vpopmail_passwd(const _user: string; const _domain: string; const _password: string; const _apop: boolean): boolean; begin end;
function php_vpopmail_set_user_quota(const _user: string; const _domain: string; const _quota: string): boolean; begin end;
function php_bcadd(const _left_operand: string; const _right_operand: string; const _scale: integer): string; begin end;
function php_bccomp(const _left_operand: string; const _right_operand: string; const _scale: integer): integer; begin end;
function php_bcdiv(const _left_operand: string; const _right_operand: string; const _scale: integer): string; begin end;
function php_bcmod(const _left_operand: string; const _modulus: string): string; begin end;
function php_bcmul(const _left_operand: string; const _right_operand: string; const _scale: integer): string; begin end;
function php_bcpow(const _left_operand: string; const _right_operand: string; const _scale: integer): string; begin end;
function php_bcpowmod(const _left_operand: string; const _right_operand: string; const _modulus: string; const _scale: integer): string; begin end;
function php_bcscale(const _scale: integer): boolean; begin end;
function php_bcsqrt(const _operand: string; const _scale: integer): string; begin end;
function php_bcsub(const _left_operand: string; const _right_operand: string; const _scale: integer): string; begin end;
procedure php_gmp_clrbit(const _a: variant; const _index: integer); begin end;
function php_gmp_cmp(const _a: variant; const _b: variant): integer; begin end;
function php_gmp_div_qr(const _n: variant; const _d: variant; const _round: integer): variant; begin end;
function php_gmp_export(const _gmpnumber: variant; const _word_size: integer; const _options: integer): string; begin end;
function php_gmp_gcdext(const _a: variant; const _b: variant): variant; begin end;
function php_gmp_hamdist(const _a: variant; const _b: variant): integer; begin end;
function php_gmp_intval(const _gmpnumber: variant): integer; begin end;
function php_gmp_jacobi(const _a: variant; const _p: variant): integer; begin end;
function php_gmp_legendre(const _a: variant; const _p: variant): integer; begin end;
function php_gmp_perfect_square(const _a: variant): boolean; begin end;
function php_gmp_popcount(const _a: variant): integer; begin end;
function php_gmp_prob_prime(const _a: variant; const _reps: integer): integer; begin end;
function php_gmp_random_seed(const _seed: variant): variant; begin end;
function php_gmp_rootrem(const _a: variant; const _nth: integer): variant; begin end;
function php_gmp_scan0(const _a: variant; const _start: integer): integer; begin end;
function php_gmp_scan1(const _a: variant; const _start: integer): integer; begin end;
procedure php_gmp_setbit(var _a: variant; const _index: integer; const _bit_on: boolean); begin end;
function php_gmp_sign(const _a: variant): integer; begin end;
function php_gmp_sqrtrem(const _a: variant): variant; begin end;
function php_gmp_strval(const _gmpnumber: variant; const _base: integer): string; begin end;
function php_gmp_testbit(const _a: variant; const _index: integer): boolean; begin end;
function php_eigenValues(const _a: variant; const _left: variant; const _right: variant): variant; begin end;
function php_identity(const _n: integer): variant; begin end;
function php_leastSquaresByFactorisation(const _a: variant; const _b: variant): variant; begin end;
function php_leastSquaresBySVD(const _a: variant; const _b: variant): variant; begin end;
function php_pseudoInverse(const _a: variant): variant; begin end;
function php_singularValues(const _a: variant): variant; begin end;
function php_solveLinearEquation(const _a: variant; const _b: variant): variant; begin end;
function php_abs(const _number: variant): variant; begin end;
function php_acos(const _arg: extended): extended; begin end;
function php_acosh(const _arg: extended): extended; begin end;
function php_asin(const _arg: extended): extended; begin end;
function php_asinh(const _arg: extended): extended; begin end;
function php_atan2(const _y: extended; const _x: extended): extended; begin end;
function php_atan(const _arg: extended): extended; begin end;
function php_atanh(const _arg: extended): extended; begin end;
function php_base_convert(const _number: string; const _frombase: integer; const _tobase: integer): string; begin end;
function php_bindec(const _binary_string: string): variant; begin end;
function php_ceil(const _value: extended): extended; begin end;
function php_cos(const _arg: extended): extended; begin end;
function php_cosh(const _arg: extended): extended; begin end;
function php_decbin(const _number: integer): string; begin end;
function php_dechex(const _number: integer): string; begin end;
function php_decoct(const _number: integer): string; begin end;
function php_deg2rad(const _number: extended): extended; begin end;
function php_exp(const _arg: extended): extended; begin end;
function php_expm1(const _arg: extended): extended; begin end;
function php_floor(const _value: extended): variant; begin end;
function php_fmod(const _x: extended; const _y: extended): extended; begin end;
function php_getrandmax(): integer; begin end;
function php_hexdec(const _hex_string: string): variant; begin end;
function php_hypot(const _x: extended; const _y: extended): extended; begin end;
function php_intdiv(const _dividend: integer; const _divisor: integer): integer; begin end;
function php_is_finite(const _val: extended): boolean; begin end;
function php_is_infinite(const _val: extended): boolean; begin end;
function php_is_nan(const _val: extended): boolean; begin end;
function php_lcg_value(): extended; begin end;
function php_log10(const _arg: extended): extended; begin end;
function php_log1p(const _number: extended): extended; begin end;
function php_log(const _arg: extended; const _base: extended): extended; begin end;
function php_max(const _values: variant): variant; begin end;
function php_max(const _value1: variant; const _value2: variant): variant; begin end;
function php_min(const _values: variant): variant; begin end;
function php_min(const _value1: variant; const _value2: variant): variant; begin end;
function php_mt_getrandmax(): integer; begin end;
function php_mt_rand(): integer; begin end;
function php_mt_rand(const _min: integer; const _max: integer): integer; begin end;
procedure php_mt_srand(const _seed: integer); begin end;
function php_octdec(const _octal_string: string): variant; begin end;
function php_pi(): extended; begin end;
function php_pow(const _base: variant; const _exp: variant): variant; begin end;
function php_rad2deg(const _number: extended): extended; begin end;
function php_rand(): integer; begin end;
function php_rand(const _min: integer; const _max: integer): integer; begin end;
function php_round(const _val: extended; const _precision: integer; const _mode: integer): extended; begin end;
function php_sin(const _arg: extended): extended; begin end;
function php_sinh(const _arg: extended): extended; begin end;
function php_sqrt(const _arg: extended): extended; begin end;
procedure php_srand(const _seed: integer); begin end;
function php_tan(const _arg: extended): extended; begin end;
function php_tanh(const _arg: extended): extended; begin end;
function php_stats_absolute_deviation(const _a: variant): extended; begin end;
function php_stats_cdf_beta(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_binomial(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_cauchy(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_chisquare(const _par1: extended; const _par2: extended; const _which: integer): extended; begin end;
function php_stats_cdf_exponential(const _par1: extended; const _par2: extended; const _which: integer): extended; begin end;
function php_stats_cdf_f(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_gamma(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_laplace(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_logistic(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_negative_binomial(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_noncentral_chisquare(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_noncentral_f(const _par1: extended; const _par2: extended; const _par3: extended; const _par4: extended; const _which: integer): extended; begin end;
function php_stats_cdf_poisson(const _par1: extended; const _par2: extended; const _which: integer): extended; begin end;
function php_stats_cdf_t(const _par1: extended; const _par2: extended; const _which: integer): extended; begin end;
function php_stats_cdf_uniform(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_cdf_weibull(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_covariance(const _a: variant; const _b: variant): extended; begin end;
function php_stats_den_uniform(const _x: extended; const _a: extended; const _b: extended): extended; begin end;
function php_stats_dens_beta(const _x: extended; const _a: extended; const _b: extended): extended; begin end;
function php_stats_dens_cauchy(const _x: extended; const _ave: extended; const _stdev: extended): extended; begin end;
function php_stats_dens_chisquare(const _x: extended; const _dfr: extended): extended; begin end;
function php_stats_dens_exponential(const _x: extended; const _scale: extended): extended; begin end;
function php_stats_dens_f(const _x: extended; const _dfr1: extended; const _dfr2: extended): extended; begin end;
function php_stats_dens_gamma(const _x: extended; const _shape: extended; const _scale: extended): extended; begin end;
function php_stats_dens_laplace(const _x: extended; const _ave: extended; const _stdev: extended): extended; begin end;
function php_stats_dens_logistic(const _x: extended; const _ave: extended; const _stdev: extended): extended; begin end;
function php_stats_dens_negative_binomial(const _x: extended; const _n: extended; const _pi: extended): extended; begin end;
function php_stats_dens_normal(const _x: extended; const _ave: extended; const _stdev: extended): extended; begin end;
function php_stats_dens_pmf_binomial(const _x: extended; const _n: extended; const _pi: extended): extended; begin end;
function php_stats_dens_pmf_hypergeometric(const _n1: extended; const _n2: extended; const _N12: extended; const _N23: extended): extended; begin end;
function php_stats_dens_pmf_poisson(const _x: extended; const _lb: extended): extended; begin end;
function php_stats_dens_t(const _x: extended; const _dfr: extended): extended; begin end;
function php_stats_dens_weibull(const _x: extended; const _a: extended; const _b: extended): extended; begin end;
function php_stats_harmonic_mean(const _a: variant): variant; begin end;
function php_stats_kurtosis(const _a: variant): extended; begin end;
function php_stats_rand_gen_beta(const _a: extended; const _b: extended): extended; begin end;
function php_stats_rand_gen_chisquare(const _df: extended): extended; begin end;
function php_stats_rand_gen_exponential(const _av: extended): extended; begin end;
function php_stats_rand_gen_f(const _dfn: extended; const _dfd: extended): extended; begin end;
function php_stats_rand_gen_funiform(const _low: extended; const _high: extended): extended; begin end;
function php_stats_rand_gen_gamma(const _a: extended; const _r: extended): extended; begin end;
function php_stats_rand_gen_ibinomial_negative(const _n: integer; const _p: extended): integer; begin end;
function php_stats_rand_gen_ibinomial(const _n: integer; const _pp: extended): integer; begin end;
function php_stats_rand_gen_int(): integer; begin end;
function php_stats_rand_gen_ipoisson(const _mu: extended): integer; begin end;
function php_stats_rand_gen_iuniform(const _low: integer; const _high: integer): integer; begin end;
function php_stats_rand_gen_noncenral_chisquare(const _df: extended; const _xnonc: extended): extended; begin end;
function php_stats_rand_gen_noncentral_f(const _dfn: extended; const _dfd: extended; const _xnonc: extended): extended; begin end;
function php_stats_rand_gen_noncentral_t(const _df: extended; const _xnonc: extended): extended; begin end;
function php_stats_rand_gen_normal(const _av: extended; const _sd: extended): extended; begin end;
function php_stats_rand_gen_t(const _df: extended): extended; begin end;
function php_stats_rand_get_seeds(): variant; begin end;
function php_stats_rand_phrase_to_seeds(const _phrase: string): variant; begin end;
function php_stats_rand_ranf(): extended; begin end;
procedure php_stats_rand_setall(const _iseed1: integer; const _iseed2: integer); begin end;
function php_stats_skew(const _a: variant): extended; begin end;
function php_stats_standard_deviation(const _a: variant; const _sample: boolean): extended; begin end;
function php_stats_stat_binomial_coef(const _x: integer; const _n: integer): extended; begin end;
function php_stats_stat_correlation(const _arr1: variant; const _arr2: variant): extended; begin end;
function php_stats_stat_gennch(const _n: integer): extended; begin end;
function php_stats_stat_independent_t(const _arr1: variant; const _arr2: variant): extended; begin end;
function php_stats_stat_innerproduct(const _arr1: variant; const _arr2: variant): extended; begin end;
function php_stats_stat_noncentral_t(const _par1: extended; const _par2: extended; const _par3: extended; const _which: integer): extended; begin end;
function php_stats_stat_paired_t(const _arr1: variant; const _arr2: variant): extended; begin end;
function php_stats_stat_percentile(const _df: extended; const _xnonc: extended): extended; begin end;
function php_stats_stat_powersum(const _arr: variant; const _power: extended): extended; begin end;
function php_stats_variance(const _a: variant; const _sample: boolean): extended; begin end;
function php_trader_acos(const _real: variant): variant; begin end;
function php_trader_ad(const _high: variant; const _low: variant; const _close: variant; const _volume: variant): variant; begin end;
function php_trader_add(const _real0: variant; const _real1: variant): variant; begin end;
function php_trader_adosc(const _high: variant; const _low: variant; const _close: variant; const _volume: variant; const _fastPeriod: integer; const _slowPeriod: integer): variant; begin end;
function php_trader_adx(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_adxr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_apo(const _real: variant; const _fastPeriod: integer; const _slowPeriod: integer; const _mAType: integer): variant; begin end;
function php_trader_aroon(const _high: variant; const _low: variant; const _timePeriod: integer): variant; begin end;
function php_trader_aroonosc(const _high: variant; const _low: variant; const _timePeriod: integer): variant; begin end;
function php_trader_asin(const _real: variant): variant; begin end;
function php_trader_atan(const _real: variant): variant; begin end;
function php_trader_atr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_avgprice(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_bbands(const _real: variant; const _timePeriod: integer; const _nbDevUp: extended; const _nbDevDn: extended; const _mAType: integer): variant; begin end;
function php_trader_beta(const _real0: variant; const _real1: variant; const _timePeriod: integer): variant; begin end;
function php_trader_bop(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cci(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_cdl2crows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdl3blackcrows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdl3inside(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdl3linestrike(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdl3outside(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdl3starsinsouth(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdl3whitesoldiers(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlabandonedbaby(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant; begin end;
function php_trader_cdladvanceblock(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlbelthold(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlbreakaway(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlclosingmarubozu(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlconcealbabyswall(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlcounterattack(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdldarkcloudcover(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant; begin end;
function php_trader_cdldoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdldojistar(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdldragonflydoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlengulfing(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdleveningdojistar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant; begin end;
function php_trader_cdleveningstar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant; begin end;
function php_trader_cdlgapsidesidewhite(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlgravestonedoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlhammer(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlhangingman(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlharami(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlharamicross(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlhighwave(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlhikkake(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlhikkakemod(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlhomingpigeon(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlidentical3crows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlinneck(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlinvertedhammer(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlkicking(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlkickingbylength(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlladderbottom(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdllongleggeddoji(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdllongline(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlmarubozu(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlmatchinglow(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlmathold(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant; begin end;
function php_trader_cdlmorningdojistar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant; begin end;
function php_trader_cdlmorningstar(const _open: variant; const _high: variant; const _low: variant; const _close: variant; const _penetration: extended): variant; begin end;
function php_trader_cdlonneck(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlpiercing(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlrickshawman(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlrisefall3methods(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlseparatinglines(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlshootingstar(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlshortline(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlspinningtop(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlstalledpattern(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlsticksandwich(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdltakuri(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdltasukigap(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlthrusting(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdltristar(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlunique3river(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlupsidegap2crows(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_cdlxsidegap3methods(const _open: variant; const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_ceil(const _real: variant): variant; begin end;
function php_trader_cmo(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_correl(const _real0: variant; const _real1: variant; const _timePeriod: integer): variant; begin end;
function php_trader_cos(const _real: variant): variant; begin end;
function php_trader_cosh(const _real: variant): variant; begin end;
function php_trader_dema(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_div(const _real0: variant; const _real1: variant): variant; begin end;
function php_trader_dx(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_ema(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_errno(): integer; begin end;
function php_trader_exp(const _real: variant): variant; begin end;
function php_trader_floor(const _real: variant): variant; begin end;
function php_trader_get_compat(): integer; begin end;
function php_trader_get_unstable_period(const _functionId: integer): integer; begin end;
function php_trader_ht_dcperiod(const _real: variant): variant; begin end;
function php_trader_ht_dcphase(const _real: variant): variant; begin end;
function php_trader_ht_phasor(const _real: variant): variant; begin end;
function php_trader_ht_sine(const _real: variant): variant; begin end;
function php_trader_ht_trendline(const _real: variant): variant; begin end;
function php_trader_ht_trendmode(const _real: variant): variant; begin end;
function php_trader_kama(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_linearreg_angle(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_linearreg_intercept(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_linearreg_slope(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_linearreg(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_ln(const _real: variant): variant; begin end;
function php_trader_log10(const _real: variant): variant; begin end;
function php_trader_ma(const _real: variant; const _timePeriod: integer; const _mAType: integer): variant; begin end;
function php_trader_macd(const _real: variant; const _fastPeriod: integer; const _slowPeriod: integer; const _signalPeriod: integer): variant; begin end;
function php_trader_macdext(const _real: variant; const _fastPeriod: integer; const _fastMAType: integer; const _slowPeriod: integer; const _slowMAType: integer; const _signalPeriod: integer; const _signalMAType: integer): variant; begin end;
function php_trader_macdfix(const _real: variant; const _signalPeriod: integer): variant; begin end;
function php_trader_mama(const _real: variant; const _fastLimit: extended; const _slowLimit: extended): variant; begin end;
function php_trader_mavp(const _real: variant; const _periods: variant; const _minPeriod: integer; const _maxPeriod: integer; const _mAType: integer): variant; begin end;
function php_trader_max(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_maxindex(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_medprice(const _high: variant; const _low: variant): variant; begin end;
function php_trader_mfi(const _high: variant; const _low: variant; const _close: variant; const _volume: variant; const _timePeriod: integer): variant; begin end;
function php_trader_midpoint(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_midprice(const _high: variant; const _low: variant; const _timePeriod: integer): variant; begin end;
function php_trader_min(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_minindex(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_minmax(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_minmaxindex(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_minus_di(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_minus_dm(const _high: variant; const _low: variant; const _timePeriod: integer): variant; begin end;
function php_trader_mom(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_mult(const _real0: variant; const _real1: variant): variant; begin end;
function php_trader_natr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_obv(const _real: variant; const _volume: variant): variant; begin end;
function php_trader_plus_di(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_plus_dm(const _high: variant; const _low: variant; const _timePeriod: integer): variant; begin end;
function php_trader_ppo(const _real: variant; const _fastPeriod: integer; const _slowPeriod: integer; const _mAType: integer): variant; begin end;
function php_trader_roc(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_rocp(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_rocr100(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_rocr(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_rsi(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_sar(const _high: variant; const _low: variant; const _acceleration: extended; const _maximum: extended): variant; begin end;
function php_trader_sarext(const _high: variant; const _low: variant; const _startValue: extended; const _offsetOnReverse: extended; const _accelerationInitLong: extended; const _accelerationLong: extended; const _accelerationMaxLong: extended; const _accelerationInitShort: extended; const _accelerationShort: extended; const _accelerationMaxShort: extended): variant; begin end;
procedure php_trader_set_compat(const _compatId: integer); begin end;
procedure php_trader_set_unstable_period(const _functionId: integer; const _timePeriod: integer); begin end;
function php_trader_sin(const _real: variant): variant; begin end;
function php_trader_sinh(const _real: variant): variant; begin end;
function php_trader_sma(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_sqrt(const _real: variant): variant; begin end;
function php_trader_stddev(const _real: variant; const _timePeriod: integer; const _nbDev: extended): variant; begin end;
function php_trader_stoch(const _high: variant; const _low: variant; const _close: variant; const _fastK_Period: integer; const _slowK_Period: integer; const _slowK_MAType: integer; const _slowD_Period: integer; const _slowD_MAType: integer): variant; begin end;
function php_trader_stochf(const _high: variant; const _low: variant; const _close: variant; const _fastK_Period: integer; const _fastD_Period: integer; const _fastD_MAType: integer): variant; begin end;
function php_trader_stochrsi(const _real: variant; const _timePeriod: integer; const _fastK_Period: integer; const _fastD_Period: integer; const _fastD_MAType: integer): variant; begin end;
function php_trader_sub(const _real0: variant; const _real1: variant): variant; begin end;
function php_trader_sum(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_t3(const _real: variant; const _timePeriod: integer; const _vFactor: extended): variant; begin end;
function php_trader_tan(const _real: variant): variant; begin end;
function php_trader_tanh(const _real: variant): variant; begin end;
function php_trader_tema(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_trange(const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_trima(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_trix(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_tsf(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_trader_typprice(const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_ultosc(const _high: variant; const _low: variant; const _close: variant; const _timePeriod1: integer; const _timePeriod2: integer; const _timePeriod3: integer): variant; begin end;
function php_trader_var(const _real: variant; const _timePeriod: integer; const _nbDev: extended): variant; begin end;
function php_trader_wclprice(const _high: variant; const _low: variant; const _close: variant): variant; begin end;
function php_trader_willr(const _high: variant; const _low: variant; const _close: variant; const _timePeriod: integer): variant; begin end;
function php_trader_wma(const _real: variant; const _timePeriod: integer): variant; begin end;
function php_fdf_add_doc_javascript(const _fdf_document: variant; const _script_name: string; const _script_code: string): boolean; begin end;
function php_fdf_add_template(const _fdf_document: variant; const _newpage: integer; const _filename: string; const _template: string; const _rename: integer): boolean; begin end;
procedure php_fdf_close(const _fdf_document: variant); begin end;
function php_fdf_create(): variant; begin end;
function php_fdf_enum_values(const _fdf_document: variant; const _function: variant; const _userdata: variant): boolean; begin end;
function php_fdf_errno(): integer; begin end;
function php_fdf_error(const _error_code: integer): string; begin end;
function php_fdf_get_ap(const _fdf_document: variant; const _field: string; const _face: integer; const _filename: string): boolean; begin end;
function php_fdf_get_attachment(const _fdf_document: variant; const _fieldname: string; const _savepath: string): variant; begin end;
function php_fdf_get_encoding(const _fdf_document: variant): string; begin end;
function php_fdf_get_file(const _fdf_document: variant): string; begin end;
function php_fdf_get_flags(const _fdf_document: variant; const _fieldname: string; const _whichflags: integer): integer; begin end;
function php_fdf_get_opt(const _fdf_document: variant; const _fieldname: string; const _element: integer): variant; begin end;
function php_fdf_get_status(const _fdf_document: variant): string; begin end;
function php_fdf_get_value(const _fdf_document: variant; const _fieldname: string; const _which: integer): variant; begin end;
function php_fdf_get_version(const _fdf_document: variant): string; begin end;
procedure php_fdf_header(); begin end;
function php_fdf_next_field_name(const _fdf_document: variant; const _fieldname: string): string; begin end;
function php_fdf_open_string(const _fdf_data: string): variant; begin end;
function php_fdf_open(const _filename: string): variant; begin end;
function php_fdf_remove_item(const _fdf_document: variant; const _fieldname: string; const _item: integer): boolean; begin end;
function php_fdf_save_string(const _fdf_document: variant): string; begin end;
function php_fdf_save(const _fdf_document: variant; const _filename: string): boolean; begin end;
function php_fdf_set_ap(const _fdf_document: variant; const _field_name: string; const _face: integer; const _filename: string; const _page_number: integer): boolean; begin end;
function php_fdf_set_encoding(const _fdf_document: variant; const _encoding: string): boolean; begin end;
function php_fdf_set_file(const _fdf_document: variant; const _url: string; const _target_frame: string): boolean; begin end;
function php_fdf_set_flags(const _fdf_document: variant; const _fieldname: string; const _whichFlags: integer; const _newFlags: integer): boolean; begin end;
function php_fdf_set_javascript_action(const _fdf_document: variant; const _fieldname: string; const _trigger: integer; const _script: string): boolean; begin end;
function php_fdf_set_on_import_javascript(const _fdf_document: variant; const _script: string; const _before_data_import: boolean): boolean; begin end;
function php_fdf_set_opt(const _fdf_document: variant; const _fieldname: string; const _element: integer; const _str1: string; const _str2: string): boolean; begin end;
function php_fdf_set_status(const _fdf_document: variant; const _status: string): boolean; begin end;
function php_fdf_set_submit_form_action(const _fdf_document: variant; const _fieldname: string; const _trigger: integer; const _script: string; const _flags: integer): boolean; begin end;
function php_fdf_set_target_frame(const _fdf_document: variant; const _frame_name: string): boolean; begin end;
function php_fdf_set_value(const _fdf_document: variant; const _fieldname: string; const _value: variant; const _isName: integer): boolean; begin end;
function php_fdf_set_version(const _fdf_document: variant; const _version: string): boolean; begin end;
function php_gnupg_adddecryptkey(const _identifier: variant; const _fingerprint: string; const _passphrase: string): boolean; begin end;
function php_gnupg_addencryptkey(const _identifier: variant; const _fingerprint: string): boolean; begin end;
function php_gnupg_addsignkey(const _identifier: variant; const _fingerprint: string; const _passphrase: string): boolean; begin end;
function php_gnupg_cleardecryptkeys(const _identifier: variant): boolean; begin end;
function php_gnupg_clearencryptkeys(const _identifier: variant): boolean; begin end;
function php_gnupg_clearsignkeys(const _identifier: variant): boolean; begin end;
function php_gnupg_decrypt(const _identifier: variant; const _text: string): string; begin end;
function php_gnupg_decryptverify(const _identifier: variant; const _text: string; var _plaintext: string): variant; begin end;
function php_gnupg_encrypt(const _identifier: variant; const _plaintext: string): string; begin end;
function php_gnupg_encryptsign(const _identifier: variant; const _plaintext: string): string; begin end;
function php_gnupg_export(const _identifier: variant; const _fingerprint: string): string; begin end;
function php_gnupg_geterror(const _identifier: variant): string; begin end;
function php_gnupg_getprotocol(const _identifier: variant): integer; begin end;
function php_gnupg_import(const _identifier: variant; const _keydata: string): variant; begin end;
function php_gnupg_init(): variant; begin end;
function php_gnupg_keyinfo(const _identifier: variant; const _pattern: string): variant; begin end;
function php_gnupg_setarmor(const _identifier: variant; const _armor: integer): boolean; begin end;
procedure php_gnupg_seterrormode(const _identifier: variant; const _errormode: integer); begin end;
function php_gnupg_setsignmode(const _identifier: variant; const _signmode: integer): boolean; begin end;
function php_gnupg_sign(const _identifier: variant; const _plaintext: string): string; begin end;
function php_gnupg_verify(const _identifier: variant; const _signed_text: string; const _signature: string; var _plaintext: string): variant; begin end;
function php_addPage(): variant; begin end;
function php_addPageLabel(const _first_page: integer; const _style: integer; const _first_num: integer; const _prefix: string): boolean; begin end;
function php_createOutline(const _title: string; const _parent_outline: variant; const _encoder: variant): variant; begin end;
function php_getCurrentEncoder(): variant; begin end;
function php_getCurrentPage(): variant; begin end;
function php_getEncoder(const _encoding: string): variant; begin end;
function php_getFont(const _fontname: string; const _encoding: string): variant; begin end;
function php_getInfoAttr(const _type: integer): string; begin end;
function php_getPageLayout(): integer; begin end;
function php_getPageMode(): integer; begin end;
function php_getStreamSize(): integer; begin end;
function php_insertPage(const _page: variant): variant; begin end;
function php_loadJPEG(const _filename: string): variant; begin end;
function php_loadPNG(const _filename: string; const _deferred: boolean): variant; begin end;
function php_loadRaw(const _filename: string; const _width: integer; const _height: integer; const _color_space: integer): variant; begin end;
function php_loadTTC(const _fontfile: string; const _index: integer; const _embed: boolean): string; begin end;
function php_loadTTF(const _fontfile: string; const _embed: boolean): string; begin end;
function php_loadType1(const _afmfile: string; const _pfmfile: string): string; begin end;
function php_output(): boolean; begin end;
function php_readFromStream(const _bytes: integer): string; begin end;
function php_resetStream(): boolean; begin end;
function php_save(const _file: string): boolean; begin end;
function php_saveToStream(): boolean; begin end;
function php_setCompressionMode(const _mode: integer): boolean; begin end;
function php_setCurrentEncoder(const _encoding: string): boolean; begin end;
function php_setEncryptionMode(const _mode: integer; const _key_len: integer): boolean; begin end;
function php_setInfoAttr(const _type: integer; const _info: string): boolean; begin end;
function php_setInfoDateAttr(const _type: integer; const _year: integer; const _month: integer; const _day: integer; const _hour: integer; const _min: integer; const _sec: integer; const _ind: string; const _off_hour: integer; const _off_min: integer): boolean; begin end;
function php_setOpenAction(const _destination: variant): boolean; begin end;
function php_setPageLayout(const _layout: integer): boolean; begin end;
function php_setPageMode(const _mode: integer): boolean; begin end;
function php_setPagesConfiguration(const _page_per_pages: integer): boolean; begin end;
function php_setPassword(const _owner_password: string; const _user_password: string): boolean; begin end;
function php_setPermission(const _permission: integer): boolean; begin end;
function php_useCNSEncodings(): boolean; begin end;
function php_useCNSFonts(): boolean; begin end;
function php_useCNTEncodings(): boolean; begin end;
function php_useCNTFonts(): boolean; begin end;
function php_useJPEncodings(): boolean; begin end;
function php_useJPFonts(): boolean; begin end;
function php_useKREncodings(): boolean; begin end;
function php_useKRFonts(): boolean; begin end;
function php_beginText(): boolean; begin end;
function php_circle(const _x: extended; const _y: extended; const _ray: extended): boolean; begin end;
function php_concat(const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_createDestination(): variant; begin end;
function php_createLinkAnnotation(const _rectangle: variant; const _destination: variant): variant; begin end;
function php_createTextAnnotation(const _rectangle: variant; const _text: string; const _encoder: variant): variant; begin end;
function php_createURLAnnotation(const _rectangle: variant; const _url: string): variant; begin end;
function php_curveTo2(const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended): boolean; begin end;
function php_curveTo3(const _x1: extended; const _y1: extended; const _x3: extended; const _y3: extended): boolean; begin end;
function php_drawImage(const _image: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean; begin end;
function php_ellipse(const _x: extended; const _y: extended; const _xray: extended; const _yray: extended): boolean; begin end;
function php_endPath(): boolean; begin end;
function php_endText(): boolean; begin end;
function php_eofill(): boolean; begin end;
function php_eoFillStroke(const _close_path: boolean): boolean; begin end;
function php_fillStroke(const _close_path: boolean): boolean; begin end;
function php_getCharSpace(): extended; begin end;
function php_getCMYKFill(): variant; begin end;
function php_getCMYKStroke(): variant; begin end;
function php_getCurrentFont(): variant; begin end;
function php_getCurrentFontSize(): extended; begin end;
function php_getCurrentPos(): variant; begin end;
function php_getCurrentTextPos(): variant; begin end;
function php_getFillingColorSpace(): integer; begin end;
function php_getFlatness(): extended; begin end;
function php_getGMode(): integer; begin end;
function php_getGrayFill(): extended; begin end;
function php_getGrayStroke(): extended; begin end;
function php_getHorizontalScaling(): extended; begin end;
function php_getRGBFill(): variant; begin end;
function php_getRGBStroke(): variant; begin end;
function php_getStrokingColorSpace(): integer; begin end;
function php_getTextLeading(): extended; begin end;
function php_getTextMatrix(): variant; begin end;
function php_getTextRenderingMode(): integer; begin end;
function php_getTextRise(): extended; begin end;
function php_getTextWidth(const _text: string): extended; begin end;
function php_getTransMatrix(): variant; begin end;
function php_getWordSpace(): extended; begin end;
function php_lineTo(const _x: extended; const _y: extended): boolean; begin end;
function php_measureText(const _text: string; const _width: extended; const _wordwrap: boolean): integer; begin end;
function php_moveTextPos(const _x: extended; const _y: extended; const _set_leading: boolean): boolean; begin end;
function php_moveTo(const _x: extended; const _y: extended): boolean; begin end;
function php_moveToNextLine(): boolean; begin end;
function php_setCharSpace(const _char_space: extended): boolean; begin end;
function php_setCMYKFill(const _c: extended; const _m: extended; const _y: extended; const _k: extended): boolean; begin end;
function php_setCMYKStroke(const _c: extended; const _m: extended; const _y: extended; const _k: extended): boolean; begin end;
function php_setDash(const _pattern: variant; const _phase: integer): boolean; begin end;
function php_setFlatness(const _flatness: extended): boolean; begin end;
function php_setFontAndSize(const _font: variant; const _size: extended): boolean; begin end;
function php_setGrayFill(const _value: extended): boolean; begin end;
function php_setGrayStroke(const _value: extended): boolean; begin end;
function php_setHeight(const _height: extended): boolean; begin end;
function php_setHorizontalScaling(const _scaling: extended): boolean; begin end;
function php_setLineCap(const _cap: integer): boolean; begin end;
function php_setLineJoin(const _join: integer): boolean; begin end;
function php_setLineWidth(const _width: extended): boolean; begin end;
function php_setMiterLimit(const _limit: extended): boolean; begin end;
function php_setRGBFill(const _r: extended; const _g: extended; const _b: extended): boolean; begin end;
function php_setRGBStroke(const _r: extended; const _g: extended; const _b: extended): boolean; begin end;
function php_setRotate(const _angle: integer): boolean; begin end;
function php_setSlideShow(const _type: integer; const _disp_time: extended; const _trans_time: extended): boolean; begin end;
function php_setTextLeading(const _text_leading: extended): boolean; begin end;
function php_setTextMatrix(const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _x: extended; const _y: extended): boolean; begin end;
function php_setTextRenderingMode(const _mode: integer): boolean; begin end;
function php_setTextRise(const _rise: extended): boolean; begin end;
function php_setWidth(const _width: extended): boolean; begin end;
function php_setWordSpace(const _word_space: extended): boolean; begin end;
function php_showTextNextLine(const _text: string; const _word_space: extended; const _char_space: extended): boolean; begin end;
function php_stroke(const _close_path: boolean): boolean; begin end;
function php_textOut(const _x: extended; const _y: extended; const _text: string): boolean; begin end;
function php_textRect(const _left: extended; const _top: extended; const _right: extended; const _bottom: extended; const _text: string; const _align: integer): boolean; begin end;
function php_getAscent(): integer; begin end;
function php_getCapHeight(): integer; begin end;
function php_getDescent(): integer; begin end;
function php_getEncodingName(): string; begin end;
function php_getFontName(): string; begin end;
function php_getUnicodeWidth(const _character: integer): integer; begin end;
function php_getXHeight(): integer; begin end;
function php_measureText(const _text: string; const _width: extended; const _font_size: extended; const _char_space: extended; const _word_space: extended; const _word_wrap: boolean): integer; begin end;
function php_getBitsPerComponent(): integer; begin end;
function php_setColorMask(const _rmin: integer; const _rmax: integer; const _gmin: integer; const _gmax: integer; const _bmin: integer; const _bmax: integer): boolean; begin end;
function php_setMaskImage(const _mask_image: variant): boolean; begin end;
function php_getByteType(const _text: string; const _index: integer): integer; begin end;
function php_getUnicode(const _character: integer): integer; begin end;
function php_getWritingMode(): integer; begin end;
function php_setDestination(const _destination: variant): boolean; begin end;
function php_setOpened(const _opened: boolean): boolean; begin end;
function php_setBorderStyle(const _width: extended; const _dash_on: integer; const _dash_off: integer): boolean; begin end;
function php_setHighlightMode(const _mode: integer): boolean; begin end;
function php_setIcon(const _icon: integer): boolean; begin end;
function php_setFit(): boolean; begin end;
function php_setFitB(): boolean; begin end;
function php_setFitBH(const _top: extended): boolean; begin end;
function php_setFitBV(const _left: extended): boolean; begin end;
function php_setFitH(const _top: extended): boolean; begin end;
function php_setFitR(const _left: extended; const _bottom: extended; const _right: extended; const _top: extended): boolean; begin end;
function php_setFitV(const _left: extended): boolean; begin end;
function php_setXYZ(const _left: extended; const _top: extended; const _zoom: extended): boolean; begin end;
function php_ming_keypress(const _char: string): integer; begin end;
procedure php_ming_setcubicthreshold(const _threshold: integer); begin end;
procedure php_ming_setscale(const _scale: extended); begin end;
procedure php_ming_setswfcompression(const _level: integer); begin end;
procedure php_ming_useconstants(const _use: integer); begin end;
procedure php_ming_useswfversion(const _version: integer); begin end;
procedure php_addAction(const _action: variant; const _flags: integer); begin end;
procedure php_addShape(const _shape: variant; const _flags: integer); begin end;
procedure php_setAction(const _action: variant); begin end;
procedure php_setDown(const _shape: variant); begin end;
procedure php_setHit(const _shape: variant); begin end;
procedure php_setMenu(const _flag: integer); begin end;
procedure php_setOver(const _shape: variant); begin end;
procedure php_setUp(const _shape: variant); begin end;
procedure php_addColor(const _red: integer; const _green: integer; const _blue: integer; const _a: integer); begin end;
procedure php_endMask(); begin end;
function php_getRot(): extended; begin end;
function php_getX(): extended; begin end;
function php_getXScale(): extended; begin end;
function php_getXSkew(): extended; begin end;
function php_getY(): extended; begin end;
function php_getYScale(): extended; begin end;
function php_getYSkew(): extended; begin end;
procedure php_move(const _dx: extended; const _dy: extended); begin end;
procedure php_multColor(const _red: extended; const _green: extended; const _blue: extended; const _a: extended); begin end;
procedure php_remove(); begin end;
procedure php_rotateTo(const _angle: extended); begin end;
procedure php_scaleTo(const _x: extended; const _y: extended); begin end;
procedure php_setDepth(const _depth: integer); begin end;
procedure php_setMaskLevel(const _level: integer); begin end;
procedure php_setMatrix(const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _x: extended; const _y: extended); begin end;
procedure php_setName(const _name: string); begin end;
procedure php_setRatio(const _ratio: extended); begin end;
procedure php_skewXTo(const _degrees: extended); begin end;
procedure php_skewYTo(const _degrees: extended); begin end;
function php_getLeading(): extended; begin end;
function php_getShape(const _code: integer): string; begin end;
function php_getUTF8Width(const _string: string): extended; begin end;
function php_getWidth(const _string: string): extended; begin end;
procedure php_addChars(const _char: string); begin end;
procedure php_addUTF8Chars(const _char: string); begin end;
procedure php_addEntry(const _ratio: extended; const _red: integer; const _green: integer; const _blue: integer; const _alpha: integer); begin end;
procedure php_addExport(const _char: variant; const _name: string); begin end;
function php_addFont(const _font: variant): variant; begin end;
procedure php_labelFrame(const _label: string); begin end;
procedure php_nextFrame(); begin end;
function php_output(const _compression: integer): integer; begin end;
procedure php_remove(const _instance: variant); begin end;
function php_saveToFile(const _x: variant; const _compression: integer): integer; begin end;
procedure php_setbackground(const _red: integer; const _green: integer; const _blue: integer); begin end;
procedure php_setDimension(const _width: extended; const _height: extended); begin end;
procedure php_setFrames(const _number: integer); begin end;
procedure php_setRate(const _rate: extended); begin end;
procedure php_stopSound(const _sound: variant); begin end;
function php_streamMP3(const _mp3file: variant; const _skip: extended): integer; begin end;
procedure php_writeExports(); begin end;
procedure php_drawArc(const _r: extended; const _startAngle: extended; const _endAngle: extended); begin end;
procedure php_drawCircle(const _r: extended); begin end;
function php_drawCubic(const _bx: extended; const _by: extended; const _cx: extended; const _cy: extended; const _dx: extended; const _dy: extended): integer; begin end;
function php_drawCubicTo(const _bx: extended; const _by: extended; const _cx: extended; const _cy: extended; const _dx: extended; const _dy: extended): integer; begin end;
function php_drawCurve(const _controldx: extended; const _controldy: extended; const _anchordx: extended; const _anchordy: extended; const _targetdx: extended; const _targetdy: extended): integer; begin end;
function php_drawCurveTo(const _controlx: extended; const _controly: extended; const _anchorx: extended; const _anchory: extended; const _targetx: extended; const _targety: extended): integer; begin end;
procedure php_drawGlyph(const _font: variant; const _character: string; const _size: integer); begin end;
procedure php_drawLine(const _dx: extended; const _dy: extended); begin end;
procedure php_drawLineTo(const _x: extended; const _y: extended); begin end;
procedure php_movePen(const _dx: extended; const _dy: extended); begin end;
procedure php_movePenTo(const _x: extended; const _y: extended); begin end;
procedure php_setLeftFill(const _fill: variant); begin end;
procedure php_setLine(const _shape: variant); begin end;
procedure php_setRightFill(const _fill: variant); begin end;
procedure php_setLeftFill(const _red: integer; const _green: integer; const _blue: integer; const _a: integer); begin end;
procedure php_setLine(const _width: integer; const _red: integer; const _green: integer; const _blue: integer; const _a: integer); begin end;
procedure php_setRightFill(const _red: integer; const _green: integer; const _blue: integer; const _a: integer); begin end;
procedure php_loopCount(const _point: integer); begin end;
procedure php_loopInPoint(const _point: integer); begin end;
procedure php_loopOutPoint(const _point: integer); begin end;
procedure php_noMultiple(); begin end;
procedure php_addString(const _string: string); begin end;
procedure php_addUTF8String(const _text: string); begin end;
procedure php_setColor(const _red: integer; const _green: integer; const _blue: integer; const _a: integer); begin end;
procedure php_setFont(const _font: variant); begin end;
procedure php_setSpacing(const _spacing: extended); begin end;
procedure php_align(const _alignement: integer); begin end;
procedure php_setBounds(const _width: extended; const _height: extended); begin end;
procedure php_setIndentation(const _width: extended); begin end;
procedure php_setLeftMargin(const _width: extended); begin end;
procedure php_setLineSpacing(const _height: extended); begin end;
procedure php_setMargins(const _left: extended; const _right: extended); begin end;
procedure php_setPadding(const _padding: extended); begin end;
procedure php_setRightMargin(const _width: extended); begin end;
function php_getNumFrames(): integer; begin end;
procedure php_setDimension(const _x: integer; const _y: integer); begin end;
function php_PDF_activate_item(const _pdfdoc: variant; const _id: integer): boolean; begin end;
function php_PDF_add_launchlink(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string): boolean; begin end;
function php_PDF_add_locallink(const _pdfdoc: variant; const _lowerleftx: extended; const _lowerlefty: extended; const _upperrightx: extended; const _upperrighty: extended; const _page: integer; const _dest: string): boolean; begin end;
function php_PDF_add_nameddest(const _pdfdoc: variant; const _name: string; const _optlist: string): boolean; begin end;
function php_PDF_add_note(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _contents: string; const _title: string; const _icon: string; const _open: integer): boolean; begin end;
function php_PDF_add_pdflink(const _pdfdoc: variant; const _bottom_left_x: extended; const _bottom_left_y: extended; const _up_right_x: extended; const _up_right_y: extended; const _filename: string; const _page: integer; const _dest: string): boolean; begin end;
function php_PDF_add_table_cell(const _pdfdoc: variant; const _table: integer; const _column: integer; const _row: integer; const _text: string; const _optlist: string): integer; begin end;
function php_PDF_add_textflow(const _pdfdoc: variant; const _textflow: integer; const _text: string; const _optlist: string): integer; begin end;
function php_PDF_add_thumbnail(const _pdfdoc: variant; const _image: integer): boolean; begin end;
function php_PDF_add_weblink(const _pdfdoc: variant; const _lowerleftx: extended; const _lowerlefty: extended; const _upperrightx: extended; const _upperrighty: extended; const _url: string): boolean; begin end;
function php_PDF_arc(const _p: variant; const _x: extended; const _y: extended; const _r: extended; const _alpha: extended; const _beta: extended): boolean; begin end;
function php_PDF_arcn(const _p: variant; const _x: extended; const _y: extended; const _r: extended; const _alpha: extended; const _beta: extended): boolean; begin end;
function php_PDF_attach_file(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string; const _description: string; const _author: string; const _mimetype: string; const _icon: string): boolean; begin end;
function php_PDF_begin_document(const _pdfdoc: variant; const _filename: string; const _optlist: string): integer; begin end;
function php_PDF_begin_font(const _pdfdoc: variant; const _filename: string; const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _e: extended; const _f: extended; const _optlist: string): boolean; begin end;
function php_PDF_begin_glyph(const _pdfdoc: variant; const _glyphname: string; const _wx: extended; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended): boolean; begin end;
function php_PDF_begin_item(const _pdfdoc: variant; const _tag: string; const _optlist: string): integer; begin end;
function php_PDF_begin_layer(const _pdfdoc: variant; const _layer: integer): boolean; begin end;
function php_PDF_begin_page_ext(const _pdfdoc: variant; const _width: extended; const _height: extended; const _optlist: string): boolean; begin end;
function php_PDF_begin_page(const _pdfdoc: variant; const _width: extended; const _height: extended): boolean; begin end;
function php_PDF_begin_pattern(const _pdfdoc: variant; const _width: extended; const _height: extended; const _xstep: extended; const _ystep: extended; const _painttype: integer): integer; begin end;
function php_PDF_begin_template_ext(const _pdfdoc: variant; const _width: extended; const _height: extended; const _optlist: string): integer; begin end;
function php_PDF_begin_template(const _pdfdoc: variant; const _width: extended; const _height: extended): integer; begin end;
function php_PDF_circle(const _pdfdoc: variant; const _x: extended; const _y: extended; const _r: extended): boolean; begin end;
function php_PDF_clip(const _p: variant): boolean; begin end;
function php_PDF_close_image(const _p: variant; const _image: integer): boolean; begin end;
function php_PDF_close_pdi_page(const _p: variant; const _page: integer): boolean; begin end;
function php_PDF_close_pdi(const _p: variant; const _doc: integer): boolean; begin end;
function php_PDF_close(const _p: variant): boolean; begin end;
function php_PDF_closepath_fill_stroke(const _p: variant): boolean; begin end;
function php_PDF_closepath_stroke(const _p: variant): boolean; begin end;
function php_PDF_closepath(const _p: variant): boolean; begin end;
function php_PDF_concat(const _p: variant; const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _e: extended; const _f: extended): boolean; begin end;
function php_PDF_continue_text(const _p: variant; const _text: string): boolean; begin end;
function php_PDF_create_3dview(const _pdfdoc: variant; const _username: string; const _optlist: string): integer; begin end;
function php_PDF_create_action(const _pdfdoc: variant; const _type: string; const _optlist: string): integer; begin end;
function php_PDF_create_annotation(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _type: string; const _optlist: string): boolean; begin end;
function php_PDF_create_bookmark(const _pdfdoc: variant; const _text: string; const _optlist: string): integer; begin end;
function php_PDF_create_field(const _pdfdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _name: string; const _type: string; const _optlist: string): boolean; begin end;
function php_PDF_create_fieldgroup(const _pdfdoc: variant; const _name: string; const _optlist: string): boolean; begin end;
function php_PDF_create_gstate(const _pdfdoc: variant; const _optlist: string): integer; begin end;
function php_PDF_create_pvf(const _pdfdoc: variant; const _filename: string; const _data: string; const _optlist: string): boolean; begin end;
function php_PDF_create_textflow(const _pdfdoc: variant; const _text: string; const _optlist: string): integer; begin end;
function php_PDF_curveto(const _p: variant; const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended): boolean; begin end;
function php_PDF_define_layer(const _pdfdoc: variant; const _name: string; const _optlist: string): integer; begin end;
function php_PDF_delete_pvf(const _pdfdoc: variant; const _filename: string): integer; begin end;
function php_PDF_delete_table(const _pdfdoc: variant; const _table: integer; const _optlist: string): boolean; begin end;
function php_PDF_delete_textflow(const _pdfdoc: variant; const _textflow: integer): boolean; begin end;
function php_PDF_delete(const _pdfdoc: variant): boolean; begin end;
function php_PDF_encoding_set_char(const _pdfdoc: variant; const _encoding: string; const _slot: integer; const _glyphname: string; const _uv: integer): boolean; begin end;
function php_PDF_end_document(const _pdfdoc: variant; const _optlist: string): boolean; begin end;
function php_PDF_end_font(const _pdfdoc: variant): boolean; begin end;
function php_PDF_end_glyph(const _pdfdoc: variant): boolean; begin end;
function php_PDF_end_item(const _pdfdoc: variant; const _id: integer): boolean; begin end;
function php_PDF_end_layer(const _pdfdoc: variant): boolean; begin end;
function php_PDF_end_page_ext(const _pdfdoc: variant; const _optlist: string): boolean; begin end;
function php_PDF_end_page(const _p: variant): boolean; begin end;
function php_PDF_end_pattern(const _p: variant): boolean; begin end;
function php_PDF_end_template(const _p: variant): boolean; begin end;
function php_PDF_endpath(const _p: variant): boolean; begin end;
function php_PDF_fill_imageblock(const _pdfdoc: variant; const _page: integer; const _blockname: string; const _image: integer; const _optlist: string): integer; begin end;
function php_PDF_fill_pdfblock(const _pdfdoc: variant; const _page: integer; const _blockname: string; const _contents: integer; const _optlist: string): integer; begin end;
function php_PDF_fill_stroke(const _p: variant): boolean; begin end;
function php_PDF_fill_textblock(const _pdfdoc: variant; const _page: integer; const _blockname: string; const _text: string; const _optlist: string): integer; begin end;
function php_PDF_fill(const _p: variant): boolean; begin end;
function php_PDF_findfont(const _p: variant; const _fontname: string; const _encoding: string; const _embed: integer): integer; begin end;
function php_PDF_fit_image(const _pdfdoc: variant; const _image: integer; const _x: extended; const _y: extended; const _optlist: string): boolean; begin end;
function php_PDF_fit_pdi_page(const _pdfdoc: variant; const _page: integer; const _x: extended; const _y: extended; const _optlist: string): boolean; begin end;
function php_PDF_fit_table(const _pdfdoc: variant; const _table: integer; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _optlist: string): string; begin end;
function php_PDF_fit_textflow(const _pdfdoc: variant; const _textflow: integer; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _optlist: string): string; begin end;
function php_PDF_fit_textline(const _pdfdoc: variant; const _text: string; const _x: extended; const _y: extended; const _optlist: string): boolean; begin end;
function php_PDF_get_apiname(const _pdfdoc: variant): string; begin end;
function php_PDF_get_buffer(const _p: variant): string; begin end;
function php_PDF_get_errmsg(const _pdfdoc: variant): string; begin end;
function php_PDF_get_errnum(const _pdfdoc: variant): integer; begin end;
function php_PDF_get_majorversion(): integer; begin end;
function php_PDF_get_minorversion(): integer; begin end;
function php_PDF_get_parameter(const _p: variant; const _key: string; const _modifier: extended): string; begin end;
function php_PDF_get_pdi_parameter(const _p: variant; const _key: string; const _doc: integer; const _page: integer; const _reserved: integer): string; begin end;
function php_PDF_get_pdi_value(const _p: variant; const _key: string; const _doc: integer; const _page: integer; const _reserved: integer): extended; begin end;
function php_PDF_get_value(const _p: variant; const _key: string; const _modifier: extended): extended; begin end;
function php_PDF_info_font(const _pdfdoc: variant; const _font: integer; const _keyword: string; const _optlist: string): extended; begin end;
function php_PDF_info_matchbox(const _pdfdoc: variant; const _boxname: string; const _num: integer; const _keyword: string): extended; begin end;
function php_PDF_info_table(const _pdfdoc: variant; const _table: integer; const _keyword: string): extended; begin end;
function php_PDF_info_textflow(const _pdfdoc: variant; const _textflow: integer; const _keyword: string): extended; begin end;
function php_PDF_info_textline(const _pdfdoc: variant; const _text: string; const _keyword: string; const _optlist: string): extended; begin end;
function php_PDF_initgraphics(const _p: variant): boolean; begin end;
function php_PDF_lineto(const _p: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_PDF_load_3ddata(const _pdfdoc: variant; const _filename: string; const _optlist: string): integer; begin end;
function php_PDF_load_font(const _pdfdoc: variant; const _fontname: string; const _encoding: string; const _optlist: string): integer; begin end;
function php_PDF_load_iccprofile(const _pdfdoc: variant; const _profilename: string; const _optlist: string): integer; begin end;
function php_PDF_load_image(const _pdfdoc: variant; const _imagetype: string; const _filename: string; const _optlist: string): integer; begin end;
function php_PDF_makespotcolor(const _p: variant; const _spotname: string): integer; begin end;
function php_PDF_moveto(const _p: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_PDF_new(): variant; begin end;
function php_PDF_open_ccitt(const _pdfdoc: variant; const _filename: string; const _width: integer; const _height: integer; const _BitReverse: integer; const _k: integer; const _Blackls1: integer): integer; begin end;
function php_PDF_open_file(const _p: variant; const _filename: string): boolean; begin end;
function php_PDF_open_image_file(const _p: variant; const _imagetype: string; const _filename: string; const _stringparam: string; const _intparam: integer): integer; begin end;
function php_PDF_open_image(const _p: variant; const _imagetype: string; const _source: string; const _data: string; const _length: integer; const _width: integer; const _height: integer; const _components: integer; const _bpc: integer; const _params: string): integer; begin end;
function php_PDF_open_memory_image(const _p: variant; const _image: variant): integer; begin end;
function php_PDF_open_pdi_document(const _p: variant; const _filename: string; const _optlist: string): integer; begin end;
function php_PDF_open_pdi_page(const _p: variant; const _doc: integer; const _pagenumber: integer; const _optlist: string): integer; begin end;
function php_PDF_open_pdi(const _pdfdoc: variant; const _filename: string; const _optlist: string; const _len: integer): integer; begin end;
function php_PDF_pcos_get_number(const _p: variant; const _doc: integer; const _path: string): extended; begin end;
function php_PDF_pcos_get_stream(const _p: variant; const _doc: integer; const _optlist: string; const _path: string): string; begin end;
function php_PDF_pcos_get_string(const _p: variant; const _doc: integer; const _path: string): string; begin end;
function php_PDF_place_image(const _pdfdoc: variant; const _image: integer; const _x: extended; const _y: extended; const _scale: extended): boolean; begin end;
function php_PDF_place_pdi_page(const _pdfdoc: variant; const _page: integer; const _x: extended; const _y: extended; const _sx: extended; const _sy: extended): boolean; begin end;
function php_PDF_process_pdi(const _pdfdoc: variant; const _doc: integer; const _page: integer; const _optlist: string): integer; begin end;
function php_PDF_rect(const _p: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean; begin end;
function php_PDF_restore(const _p: variant): boolean; begin end;
function php_PDF_resume_page(const _pdfdoc: variant; const _optlist: string): boolean; begin end;
function php_PDF_rotate(const _p: variant; const _phi: extended): boolean; begin end;
function php_PDF_save(const _p: variant): boolean; begin end;
function php_PDF_scale(const _p: variant; const _sx: extended; const _sy: extended): boolean; begin end;
function php_PDF_set_border_color(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean; begin end;
function php_PDF_set_border_dash(const _pdfdoc: variant; const _black: extended; const _white: extended): boolean; begin end;
function php_PDF_set_border_style(const _pdfdoc: variant; const _style: string; const _width: extended): boolean; begin end;
function php_PDF_set_gstate(const _pdfdoc: variant; const _gstate: integer): boolean; begin end;
function php_PDF_set_info(const _p: variant; const _key: string; const _value: string): boolean; begin end;
function php_PDF_set_layer_dependency(const _pdfdoc: variant; const _type: string; const _optlist: string): boolean; begin end;
function php_PDF_set_parameter(const _p: variant; const _key: string; const _value: string): boolean; begin end;
function php_PDF_set_text_pos(const _p: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_PDF_set_value(const _p: variant; const _key: string; const _value: extended): boolean; begin end;
function php_PDF_setcolor(const _p: variant; const _fstype: string; const _colorspace: string; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended): boolean; begin end;
function php_PDF_setdash(const _pdfdoc: variant; const _b: extended; const _w: extended): boolean; begin end;
function php_PDF_setdashpattern(const _pdfdoc: variant; const _optlist: string): boolean; begin end;
function php_PDF_setflat(const _pdfdoc: variant; const _flatness: extended): boolean; begin end;
function php_PDF_setfont(const _pdfdoc: variant; const _font: integer; const _fontsize: extended): boolean; begin end;
function php_PDF_setgray_fill(const _p: variant; const _g: extended): boolean; begin end;
function php_PDF_setgray_stroke(const _p: variant; const _g: extended): boolean; begin end;
function php_PDF_setgray(const _p: variant; const _g: extended): boolean; begin end;
function php_PDF_setlinecap(const _p: variant; const _linecap: integer): boolean; begin end;
function php_PDF_setlinejoin(const _p: variant; const _value: integer): boolean; begin end;
function php_PDF_setlinewidth(const _p: variant; const _width: extended): boolean; begin end;
function php_PDF_setmatrix(const _p: variant; const _a: extended; const _b: extended; const _c: extended; const _d: extended; const _e: extended; const _f: extended): boolean; begin end;
function php_PDF_setmiterlimit(const _pdfdoc: variant; const _miter: extended): boolean; begin end;
function php_PDF_setrgbcolor_fill(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean; begin end;
function php_PDF_setrgbcolor_stroke(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean; begin end;
function php_PDF_setrgbcolor(const _p: variant; const _red: extended; const _green: extended; const _blue: extended): boolean; begin end;
function php_PDF_shading_pattern(const _pdfdoc: variant; const _shading: integer; const _optlist: string): integer; begin end;
function php_PDF_shading(const _pdfdoc: variant; const _shtype: string; const _x0: extended; const _y0: extended; const _x1: extended; const _y1: extended; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended; const _optlist: string): integer; begin end;
function php_PDF_shfill(const _pdfdoc: variant; const _shading: integer): boolean; begin end;
function php_PDF_show_boxed(const _p: variant; const _text: string; const _left: extended; const _top: extended; const _width: extended; const _height: extended; const _mode: string; const _feature: string): integer; begin end;
function php_PDF_show_xy(const _p: variant; const _text: string; const _x: extended; const _y: extended): boolean; begin end;
function php_PDF_show(const _pdfdoc: variant; const _text: string): boolean; begin end;
function php_PDF_skew(const _p: variant; const _alpha: extended; const _beta: extended): boolean; begin end;
function php_PDF_stringwidth(const _p: variant; const _text: string; const _font: integer; const _fontsize: extended): extended; begin end;
function php_PDF_stroke(const _p: variant): boolean; begin end;
function php_PDF_suspend_page(const _pdfdoc: variant; const _optlist: string): boolean; begin end;
function php_PDF_translate(const _p: variant; const _tx: extended; const _ty: extended): boolean; begin end;
function php_PDF_utf16_to_utf8(const _pdfdoc: variant; const _utf16string: string): string; begin end;
function php_PDF_utf32_to_utf16(const _pdfdoc: variant; const _utf32string: string; const _ordering: string): string; begin end;
function php_PDF_utf8_to_utf16(const _pdfdoc: variant; const _utf8string: string; const _ordering: string): string; begin end;
function php_ps_add_bookmark(const _psdoc: variant; const _text: string; const _parent: integer; const _open: integer): integer; begin end;
function php_ps_add_launchlink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string): boolean; begin end;
function php_ps_add_locallink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _page: integer; const _dest: string): boolean; begin end;
function php_ps_add_note(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _contents: string; const _title: string; const _icon: string; const _open: integer): boolean; begin end;
function php_ps_add_pdflink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _filename: string; const _page: integer; const _dest: string): boolean; begin end;
function php_ps_add_weblink(const _psdoc: variant; const _llx: extended; const _lly: extended; const _urx: extended; const _ury: extended; const _url: string): boolean; begin end;
function php_ps_arc(const _psdoc: variant; const _x: extended; const _y: extended; const _radius: extended; const _alpha: extended; const _beta: extended): boolean; begin end;
function php_ps_arcn(const _psdoc: variant; const _x: extended; const _y: extended; const _radius: extended; const _alpha: extended; const _beta: extended): boolean; begin end;
function php_ps_begin_page(const _psdoc: variant; const _width: extended; const _height: extended): boolean; begin end;
function php_ps_begin_pattern(const _psdoc: variant; const _width: extended; const _height: extended; const _xstep: extended; const _ystep: extended; const _painttype: integer): integer; begin end;
function php_ps_begin_template(const _psdoc: variant; const _width: extended; const _height: extended): integer; begin end;
function php_ps_circle(const _psdoc: variant; const _x: extended; const _y: extended; const _radius: extended): boolean; begin end;
function php_ps_clip(const _psdoc: variant): boolean; begin end;
procedure php_ps_close_image(const _psdoc: variant; const _imageid: integer); begin end;
function php_ps_close(const _psdoc: variant): boolean; begin end;
function php_ps_closepath_stroke(const _psdoc: variant): boolean; begin end;
function php_ps_closepath(const _psdoc: variant): boolean; begin end;
function php_ps_continue_text(const _psdoc: variant; const _text: string): boolean; begin end;
function php_ps_curveto(const _psdoc: variant; const _x1: extended; const _y1: extended; const _x2: extended; const _y2: extended; const _x3: extended; const _y3: extended): boolean; begin end;
function php_ps_delete(const _psdoc: variant): boolean; begin end;
function php_ps_end_page(const _psdoc: variant): boolean; begin end;
function php_ps_end_pattern(const _psdoc: variant): boolean; begin end;
function php_ps_end_template(const _psdoc: variant): boolean; begin end;
function php_ps_fill_stroke(const _psdoc: variant): boolean; begin end;
function php_ps_fill(const _psdoc: variant): boolean; begin end;
function php_ps_findfont(const _psdoc: variant; const _fontname: string; const _encoding: string; const _embed: boolean): integer; begin end;
function php_ps_get_buffer(const _psdoc: variant): string; begin end;
function php_ps_get_parameter(const _psdoc: variant; const _name: string; const _modifier: extended): string; begin end;
function php_ps_get_value(const _psdoc: variant; const _name: string; const _modifier: extended): extended; begin end;
function php_ps_hyphenate(const _psdoc: variant; const _text: string): variant; begin end;
function php_ps_include_file(const _psdoc: variant; const _file: string): boolean; begin end;
function php_ps_lineto(const _psdoc: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_ps_makespotcolor(const _psdoc: variant; const _name: string; const _reserved: integer): integer; begin end;
function php_ps_moveto(const _psdoc: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_ps_new(): variant; begin end;
function php_ps_open_file(const _psdoc: variant; const _filename: string): boolean; begin end;
function php_ps_open_image_file(const _psdoc: variant; const _type: string; const _filename: string; const _stringparam: string; const _intparam: integer): integer; begin end;
function php_ps_open_image(const _psdoc: variant; const _type: string; const _source: string; const _data: string; const _lenght: integer; const _width: integer; const _height: integer; const _components: integer; const _bpc: integer; const _params: string): integer; begin end;
function php_ps_open_memory_image(const _psdoc: variant; const _gd: integer): integer; begin end;
function php_ps_place_image(const _psdoc: variant; const _imageid: integer; const _x: extended; const _y: extended; const _scale: extended): boolean; begin end;
function php_ps_rect(const _psdoc: variant; const _x: extended; const _y: extended; const _width: extended; const _height: extended): boolean; begin end;
function php_ps_restore(const _psdoc: variant): boolean; begin end;
function php_ps_rotate(const _psdoc: variant; const _rot: extended): boolean; begin end;
function php_ps_save(const _psdoc: variant): boolean; begin end;
function php_ps_scale(const _psdoc: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_ps_set_border_color(const _psdoc: variant; const _red: extended; const _green: extended; const _blue: extended): boolean; begin end;
function php_ps_set_border_dash(const _psdoc: variant; const _black: extended; const _white: extended): boolean; begin end;
function php_ps_set_border_style(const _psdoc: variant; const _style: string; const _width: extended): boolean; begin end;
function php_ps_set_info(const _p: variant; const _key: string; const _val: string): boolean; begin end;
function php_ps_set_parameter(const _psdoc: variant; const _name: string; const _value: string): boolean; begin end;
function php_ps_set_text_pos(const _psdoc: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_ps_set_value(const _psdoc: variant; const _name: string; const _value: extended): boolean; begin end;
function php_ps_setcolor(const _psdoc: variant; const _type: string; const _colorspace: string; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended): boolean; begin end;
function php_ps_setdash(const _psdoc: variant; const _on: extended; const _off: extended): boolean; begin end;
function php_ps_setflat(const _psdoc: variant; const _value: extended): boolean; begin end;
function php_ps_setfont(const _psdoc: variant; const _fontid: integer; const _size: extended): boolean; begin end;
function php_ps_setgray(const _psdoc: variant; const _gray: extended): boolean; begin end;
function php_ps_setlinecap(const _psdoc: variant; const _type: integer): boolean; begin end;
function php_ps_setlinejoin(const _psdoc: variant; const _type: integer): boolean; begin end;
function php_ps_setlinewidth(const _psdoc: variant; const _width: extended): boolean; begin end;
function php_ps_setmiterlimit(const _psdoc: variant; const _value: extended): boolean; begin end;
function php_ps_setoverprintmode(const _psdoc: variant; const _mode: integer): boolean; begin end;
function php_ps_setpolydash(const _psdoc: variant; const _arr: extended): boolean; begin end;
function php_ps_shading_pattern(const _psdoc: variant; const _shadingid: integer; const _optlist: string): integer; begin end;
function php_ps_shading(const _psdoc: variant; const _type: string; const _x0: extended; const _y0: extended; const _x1: extended; const _y1: extended; const _c1: extended; const _c2: extended; const _c3: extended; const _c4: extended; const _optlist: string): integer; begin end;
function php_ps_shfill(const _psdoc: variant; const _shadingid: integer): boolean; begin end;
function php_ps_show_boxed(const _psdoc: variant; const _text: string; const _left: extended; const _bottom: extended; const _width: extended; const _height: extended; const _hmode: string; const _feature: string): integer; begin end;
function php_ps_show_xy2(const _psdoc: variant; const _text: string; const _len: integer; const _xcoor: extended; const _ycoor: extended): boolean; begin end;
function php_ps_show_xy(const _psdoc: variant; const _text: string; const _x: extended; const _y: extended): boolean; begin end;
function php_ps_show2(const _psdoc: variant; const _text: string; const _len: integer): boolean; begin end;
function php_ps_show(const _psdoc: variant; const _text: string): boolean; begin end;
function php_ps_string_geometry(const _psdoc: variant; const _text: string; const _fontid: integer; const _size: extended): variant; begin end;
function php_ps_stringwidth(const _psdoc: variant; const _text: string; const _fontid: integer; const _size: extended): extended; begin end;
function php_ps_stroke(const _psdoc: variant): boolean; begin end;
function php_ps_symbol_name(const _psdoc: variant; const _ord: integer; const _fontid: integer): string; begin end;
function php_ps_symbol_width(const _psdoc: variant; const _ord: integer; const _fontid: integer; const _size: extended): extended; begin end;
function php_ps_symbol(const _psdoc: variant; const _ord: integer): boolean; begin end;
function php_ps_translate(const _psdoc: variant; const _x: extended; const _y: extended): boolean; begin end;
function php_rpm_close(const _rpmr: variant): boolean; begin end;
function php_rpm_get_tag(const _rpmr: variant; const _tagnum: integer): variant; begin end;
function php_rpm_is_valid(const _filename: string): boolean; begin end;
function php_rpm_open(const _filename: string): variant; begin end;
function php_rpm_version(): string; begin end;
function php_eio_busy(const _delay: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
procedure php_eio_cancel(const _req: variant); begin end;
function php_eio_chmod(const _path: string; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_chown(const _path: string; const _uid: integer; const _gid: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_close(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_custom(const _execute: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_dup2(const _fd: variant; const _fd2: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_event_loop(): boolean; begin end;
function php_eio_fallocate(const _fd: variant; const _mode: integer; const _offset: integer; const _length: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_fchmod(const _fd: variant; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_fchown(const _fd: variant; const _uid: integer; const _gid: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_fdatasync(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_fstat(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_fstatvfs(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_fsync(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_ftruncate(const _fd: variant; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_futime(const _fd: variant; const _atime: extended; const _mtime: extended; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_get_event_stream(): variant; begin end;
function php_eio_get_last_error(const _req: variant): string; begin end;
procedure php_eio_grp_add(const _grp: variant; const _req: variant); begin end;
procedure php_eio_grp_cancel(const _grp: variant); begin end;
procedure php_eio_grp_limit(const _grp: variant; const _limit: integer); begin end;
function php_eio_grp(const _callback: variant; const _data: string): variant; begin end;
procedure php_eio_init(); begin end;
function php_eio_link(const _path: string; const _new_path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_lstat(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_mkdir(const _path: string; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_mknod(const _path: string; const _mode: integer; const _dev: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_nop(const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_npending(): integer; begin end;
function php_eio_nready(): integer; begin end;
function php_eio_nreqs(): integer; begin end;
function php_eio_nthreads(): integer; begin end;
function php_eio_open(const _path: string; const _flags: integer; const _mode: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_poll(): integer; begin end;
function php_eio_read(const _fd: variant; const _length: integer; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_readahead(const _fd: variant; const _offset: integer; const _length: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_readdir(const _path: string; const _flags: integer; const _pri: integer; const _callback: variant; const _data: string): variant; begin end;
function php_eio_readlink(const _path: string; const _pri: integer; const _callback: variant; const _data: string): variant; begin end;
function php_eio_realpath(const _path: string; const _pri: integer; const _callback: variant; const _data: string): variant; begin end;
function php_eio_rename(const _path: string; const _new_path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_rmdir(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_seek(const _fd: variant; const _offset: integer; const _whence: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_sendfile(const _out_fd: variant; const _in_fd: variant; const _offset: integer; const _length: integer; const _pri: integer; const _callback: variant; const _data: string): variant; begin end;
procedure php_eio_set_max_idle(const _nthreads: integer); begin end;
procedure php_eio_set_max_parallel(const _nthreads: integer); begin end;
procedure php_eio_set_max_poll_reqs(const _nreqs: integer); begin end;
procedure php_eio_set_max_poll_time(const _nseconds: extended); begin end;
procedure php_eio_set_min_parallel(const _nthreads: string); begin end;
function php_eio_stat(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_statvfs(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_symlink(const _path: string; const _new_path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_sync_file_range(const _fd: variant; const _offset: integer; const _nbytes: integer; const _flags: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_sync(const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_syncfs(const _fd: variant; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_truncate(const _path: string; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_unlink(const _path: string; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_utime(const _path: string; const _atime: extended; const _mtime: extended; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
function php_eio_write(const _fd: variant; const _str: string; const _length: integer; const _offset: integer; const _pri: integer; const _callback: variant; const _data: variant): variant; begin end;
procedure php_callback(const _watcher: variant; const _revents: integer); begin end;
function php_backend(): integer; begin end;
function php_depth(): integer; begin end;
procedure php_embeddableBackends(); begin end;
procedure php_feedSignal(const _signum: integer); begin end;
procedure php_feedSignalEvent(const _signum: integer); begin end;
function php_iteration(): integer; begin end;
procedure php_nowUpdate(); begin end;
procedure php_recommendedBackends(); begin end;
procedure php_resume(); begin end;
procedure php_run(const _flags: integer); begin end;
procedure php_sleep(const _seconds: variant); begin end;
procedure php_stop(const _how: integer); begin end;
procedure php_supportedBackends(); begin end;
procedure php_suspend(); begin end;
procedure php_verify(); begin end;
function php_createStopped(const _callback: string; const _data: string; const _priority: string): variant; begin end;
function php_createStopped(const _pid: integer; const _trace: boolean; const _callback: variant; const _data: variant; const _priority: integer): variant; begin end;
procedure php_set(const _pid: integer; const _trace: boolean); begin end;
procedure php_createStopped(const _other: variant; const _callback: variant; const _data: variant; const _priority: integer); begin end;
procedure php_set(const _other: variant); begin end;
procedure php_sweep(); begin end;
function php_createStopped(const _callback: string; const _data: variant; const _priority: integer): variant; begin end;
procedure php_set(const _fd: variant; const _events: integer); begin end;
procedure php_invokePending(); begin end;
procedure php_loopFork(); begin end;
procedure php_again(); begin end;
procedure php_set(const _offset: variant; const _interval: variant); begin end;
procedure php_set(const _signum: integer); begin end;
function php_attr(): variant; begin end;
procedure php_createStopped(const _path: string; const _interval: variant; const _callback: variant; const _data: variant; const _priority: integer); begin end;
procedure php_prev(); begin end;
procedure php_set(const _path: string; const _interval: variant); begin end;
procedure php_feed(const _revents: integer); begin end;
procedure php_invoke(const _revents: integer); begin end;
function php_keepalive(const _value: boolean): boolean; begin end;
function php_expect_expectl(const _expect: variant; const _cases: variant; var _match: variant): integer; begin end;
function php_expect_popen(const _command: string): variant; begin end;
function php_event_add(const _event: variant; const _timeout: integer): boolean; begin end;
procedure php_event_base_free(const _event_base: variant); begin end;
function php_event_base_loop(const _event_base: variant; const _flags: integer): integer; begin end;
function php_event_base_loopbreak(const _event_base: variant): boolean; begin end;
function php_event_base_loopexit(const _event_base: variant; const _timeout: integer): boolean; begin end;
function php_event_base_new(): variant; begin end;
function php_event_base_priority_init(const _event_base: variant; const _npriorities: integer): boolean; begin end;
function php_event_base_reinit(const _event_base: variant): boolean; begin end;
function php_event_base_set(const _event: variant; const _event_base: variant): boolean; begin end;
function php_event_buffer_base_set(const _bevent: variant; const _event_base: variant): boolean; begin end;
function php_event_buffer_disable(const _bevent: variant; const _events: integer): boolean; begin end;
function php_event_buffer_enable(const _bevent: variant; const _events: integer): boolean; begin end;
procedure php_event_buffer_fd_set(const _bevent: variant; const _fd: variant); begin end;
procedure php_event_buffer_free(const _bevent: variant); begin end;
function php_event_buffer_new(const _stream: variant; const _readcb: variant; const _writecb: variant; const _errorcb: variant; const _arg: variant): variant; begin end;
function php_event_buffer_priority_set(const _bevent: variant; const _priority: integer): boolean; begin end;
function php_event_buffer_read(const _bevent: variant; const _data_size: integer): string; begin end;
function php_event_buffer_set_callback(const _event: variant; const _readcb: variant; const _writecb: variant; const _errorcb: variant; const _arg: variant): boolean; begin end;
procedure php_event_buffer_timeout_set(const _bevent: variant; const _read_timeout: integer; const _write_timeout: integer); begin end;
procedure php_event_buffer_watermark_set(const _bevent: variant; const _events: integer; const _lowmark: integer; const _highmark: integer); begin end;
function php_event_buffer_write(const _bevent: variant; const _data: string; const _data_size: integer): boolean; begin end;
function php_event_del(const _event: variant): boolean; begin end;
procedure php_event_free(const _event: variant); begin end;
function php_event_new(): variant; begin end;
function php_event_priority_set(const _event: variant; const _priority: integer): boolean; begin end;
function php_event_set(const _event: variant; const _fd: variant; const _events: integer; const _callback: variant; const _arg: variant): boolean; begin end;
function php_event_timer_set(const _event: variant; const _callback: variant; const _arg: variant): boolean; begin end;
function php_pcntl_alarm(const _seconds: integer): integer; begin end;
function php_pcntl_exec(const _path: string; const _args: variant; const _envs: variant): boolean; begin end;
function php_pcntl_fork(): integer; begin end;
function php_pcntl_get_last_error(): integer; begin end;
function php_pcntl_getpriority(const _pid: integer): integer; begin end;
function php_pcntl_setpriority(const _priority: integer; const _pid: integer): boolean; begin end;
function php_pcntl_signal_dispatch(): boolean; begin end;
function php_pcntl_signal(const _signo: integer; const _handler: variant; const _restart_syscalls: boolean): boolean; begin end;
procedure php_handler(const _signo: integer); begin end;
function php_pcntl_sigprocmask(const _how: integer; const _set: variant; var _oldset: variant): boolean; begin end;
function php_pcntl_sigtimedwait(const _set: variant; var _siginfo: variant; const _seconds: integer; const _nanoseconds: integer): integer; begin end;
function php_pcntl_sigwaitinfo(const _set: variant; var _siginfo: variant): integer; begin end;
function php_pcntl_strerror(const _errno: integer): string; begin end;
function php_pcntl_wait(var _status: integer; const _options: integer): integer; begin end;
function php_pcntl_waitpid(const _pid: integer; var _status: integer; const _options: integer): integer; begin end;
function php_pcntl_wexitstatus(const _status: integer): integer; begin end;
function php_pcntl_wifexited(const _status: integer): boolean; begin end;
function php_pcntl_wifsignaled(const _status: integer): boolean; begin end;
function php_pcntl_wifstopped(const _status: integer): boolean; begin end;
function php_pcntl_wstopsig(const _status: integer): integer; begin end;
function php_pcntl_wtermsig(const _status: integer): integer; begin end;
function php_posix_access(const _file: string; const _mode: integer): boolean; begin end;
function php_posix_ctermid(): string; begin end;
function php_posix_get_last_error(): integer; begin end;
function php_posix_getcwd(): string; begin end;
function php_posix_getegid(): integer; begin end;
function php_posix_geteuid(): integer; begin end;
function php_posix_getgid(): integer; begin end;
function php_posix_getgrgid(const _gid: integer): variant; begin end;
function php_posix_getgrnam(const _name: string): variant; begin end;
function php_posix_getgroups(): variant; begin end;
function php_posix_getlogin(): string; begin end;
function php_posix_getpgid(const _pid: integer): integer; begin end;
function php_posix_getpgrp(): integer; begin end;
function php_posix_getpid(): integer; begin end;
function php_posix_getppid(): integer; begin end;
function php_posix_getpwnam(const _username: string): variant; begin end;
function php_posix_getpwuid(const _uid: integer): variant; begin end;
function php_posix_getrlimit(): variant; begin end;
function php_posix_getsid(const _pid: integer): integer; begin end;
function php_posix_getuid(): integer; begin end;
function php_posix_initgroups(const _name: string; const _base_group_id: integer): boolean; begin end;
function php_posix_isatty(const _fd: variant): boolean; begin end;
function php_posix_kill(const _pid: integer; const _sig: integer): boolean; begin end;
function php_posix_mkfifo(const _pathname: string; const _mode: integer): boolean; begin end;
function php_posix_mknod(const _pathname: string; const _mode: integer; const _major: integer; const _minor: integer): boolean; begin end;
function php_posix_setegid(const _gid: integer): boolean; begin end;
function php_posix_seteuid(const _uid: integer): boolean; begin end;
function php_posix_setgid(const _gid: integer): boolean; begin end;
function php_posix_setpgid(const _pid: integer; const _pgid: integer): boolean; begin end;
function php_posix_setrlimit(const _resource: integer; const _softlimit: integer; const _hardlimit: integer): boolean; begin end;
function php_posix_setsid(): integer; begin end;
function php_posix_setuid(const _uid: integer): boolean; begin end;
function php_posix_strerror(const _errno: integer): string; begin end;
function php_posix_times(): variant; begin end;
function php_posix_ttyname(const _fd: variant): string; begin end;
function php_posix_uname(): variant; begin end;
function php_escapeshellarg(const _arg: string): string; begin end;
function php_escapeshellcmd(const _command: string): string; begin end;
function php_exec(const _command: string; var _output: variant; var _return_var: integer): string; begin end;
procedure php_passthru(const _command: string; var _return_var: integer); begin end;
function php_proc_close(const _process: variant): integer; begin end;
function php_proc_get_status(const _process: variant): variant; begin end;
function php_proc_nice(const _increment: integer): boolean; begin end;
function php_proc_open(const _cmd: string; const _descriptorspec: variant; var _pipes: variant; const _cwd: string; const _env: variant; const _other_options: variant): variant; begin end;
function php_proc_terminate(const _process: variant; const _signal: integer): boolean; begin end;
function php_shell_exec(const _cmd: string): string; begin end;
function php_system(const _command: string; var _return_var: integer): string; begin end;
function php_chunk(const _size: integer; const _preserve: boolean): variant; begin end;
function php_extend(const _class: string): boolean; begin end;
function php_getTerminationInfo(): variant; begin end;
function php_isTerminated(): boolean; begin end;
function php_isWaiting(): boolean; begin end;
function php_lock(): boolean; begin end;
function php_merge(const _from: variant; const _overwrite: boolean): boolean; begin end;
function php_notify(): boolean; begin end;
procedure php_run(); begin end;
function php_shift(): variant; begin end;
function php_synchronized(const _block: variant): variant; begin end;
function php_unlock(): boolean; begin end;
function php_wait(const _timeout: integer): boolean; begin end;
procedure php_detach(); begin end;
function php_getCreatorId(): integer; begin end;
function php_getCurrentThreadId(): integer; begin end;
function php_getThreadId(): integer; begin end;
function php_globally(): variant; begin end;
function php_isJoined(): boolean; begin end;
function php_isStarted(): boolean; begin end;
function php_join(): boolean; begin end;
procedure php_kill(); begin end;
function php_start(const _options: integer): boolean; begin end;
function php_getStacked(): integer; begin end;
function php_isShutdown(): boolean; begin end;
function php_isWorking(): boolean; begin end;
function php_shutdown(): boolean; begin end;
function php_stack(var _work: variant): integer; begin end;
function php_unstack(var _work: variant): integer; begin end;
function php_isGarbage(): boolean; begin end;
procedure php_setGarbage(); begin end;
procedure php_collect(const _collector: variant); begin end;
procedure php_resize(const _size: integer); begin end;
function php_submit(const _task: variant): integer; begin end;
function php_submitTo(const _worker: integer; const _task: variant): integer; begin end;
function php_create(const _lock: boolean): integer; begin end;
function php_destroy(const _mutex: integer): boolean; begin end;
function php_lock(const _mutex: integer): boolean; begin end;
function php_trylock(const _mutex: integer): boolean; begin end;
function php_unlock(const _mutex: integer; const _destroy: boolean): boolean; begin end;
function php_broadcast(const _condition: integer): boolean; begin end;
function php_create(): integer; begin end;
function php_signal(const _condition: integer): boolean; begin end;
function php_wait(const _condition: integer; const _mutex: integer; const _timeout: integer): boolean; begin end;
function php_ftok(const _pathname: string; const _proj: string): integer; begin end;
function php_msg_get_queue(const _key: integer; const _perms: integer): variant; begin end;
function php_msg_queue_exists(const _key: integer): boolean; begin end;
function php_msg_receive(const _queue: variant; const _desiredmsgtype: integer; var _msgtype: integer; const _maxsize: integer; var _message: variant; const _unserialize: boolean; const _flags: integer; var _errorcode: integer): boolean; begin end;
function php_msg_remove_queue(const _queue: variant): boolean; begin end;
function php_msg_send(const _queue: variant; const _msgtype: integer; const _message: variant; const _serialize: boolean; const _blocking: boolean; var _errorcode: integer): boolean; begin end;
function php_msg_set_queue(const _queue: variant; const _data: variant): boolean; begin end;
function php_msg_stat_queue(const _queue: variant): variant; begin end;
function php_sem_acquire(const _sem_identifier: variant; const _nowait: boolean): boolean; begin end;
function php_sem_get(const _key: integer; const _max_acquire: integer; const _perm: integer; const _auto_release: integer): variant; begin end;
function php_sem_release(const _sem_identifier: variant): boolean; begin end;
function php_sem_remove(const _sem_identifier: variant): boolean; begin end;
function php_shm_attach(const _key: integer; const _memsize: integer; const _perm: integer): variant; begin end;
function php_shm_detach(const _shm_identifier: variant): boolean; begin end;
function php_shm_get_var(const _shm_identifier: variant; const _variable_key: integer): variant; begin end;
function php_shm_has_var(const _shm_identifier: variant; const _variable_key: integer): boolean; begin end;
function php_shm_put_var(const _shm_identifier: variant; const _variable_key: integer; const _variable: variant): boolean; begin end;
function php_shm_remove_var(const _shm_identifier: variant; const _variable_key: integer): boolean; begin end;
function php_shm_remove(const _shm_identifier: variant): boolean; begin end;
procedure php_shmop_close(const _shmid: integer); begin end;
function php_shmop_delete(const _shmid: integer): boolean; begin end;
function php_shmop_open(const _key: integer; const _flags: string; const _mode: integer; const _size: integer): integer; begin end;
function php_shmop_read(const _shmid: integer; const _start: integer; const _count: integer): string; begin end;
function php_shmop_size(const _shmid: integer): integer; begin end;
function php_shmop_write(const _shmid: integer; const _data: string; const _offset: integer): integer; begin end;
function php_unlock(const _all: boolean): boolean; begin end;
function php_unlock(var _prevcount: integer): boolean; begin end;
function php_fire(): boolean; begin end;
function php_readlock(const _wait: integer): boolean; begin end;
function php_readunlock(): boolean; begin end;
function php_writelock(const _wait: integer): boolean; begin end;
function php_writeunlock(): boolean; begin end;
function php_geoip_asnum_by_name(const _hostname: string): string; begin end;
function php_geoip_continent_code_by_name(const _hostname: string): string; begin end;
function php_geoip_country_code_by_name(const _hostname: string): string; begin end;
function php_geoip_country_code3_by_name(const _hostname: string): string; begin end;
function php_geoip_country_name_by_name(const _hostname: string): string; begin end;
function php_geoip_database_info(const _database: integer): string; begin end;
function php_geoip_db_avail(const _database: integer): boolean; begin end;
function php_geoip_db_filename(const _database: integer): string; begin end;
function php_geoip_db_get_all_info(): variant; begin end;
function php_geoip_domain_by_name(const _hostname: string): string; begin end;
function php_geoip_id_by_name(const _hostname: string): integer; begin end;
function php_geoip_isp_by_name(const _hostname: string): string; begin end;
function php_geoip_netspeedcell_by_name(const _hostname: string): string; begin end;
function php_geoip_org_by_name(const _hostname: string): string; begin end;
function php_geoip_record_by_name(const _hostname: string): variant; begin end;
function php_geoip_region_by_name(const _hostname: string): variant; begin end;
function php_geoip_region_name_by_code(const _country_code: string; const _region_code: string): string; begin end;
procedure php_geoip_setup_custom_directory(const _path: string); begin end;
function php_geoip_time_zone_by_country_and_region(const _country_code: string; const _region_code: string): string; begin end;
function php_fann_cascadetrain_on_data(const _ann: variant; const _data: variant; const _max_neurons: integer; const _neurons_between_reports: integer; const _desired_error: extended): boolean; begin end;
function php_fann_cascadetrain_on_file(const _ann: variant; const _filename: string; const _max_neurons: integer; const _neurons_between_reports: integer; const _desired_error: extended): boolean; begin end;
function php_fann_clear_scaling_params(const _ann: variant): boolean; begin end;
function php_fann_copy(const _ann: variant): variant; begin end;
function php_fann_create_from_file(const _configuration_file: string): variant; begin end;
function php_fann_create_shortcut_array(const _num_layers: integer; const _layers: variant): variant; begin end;
function php_fann_create_standard_array(const _num_layers: integer; const _layers: variant): variant; begin end;
function php_fann_create_standard(const _num_layers: integer; const _num_neurons1: integer; const _num_neurons2: integer): variant; begin end;
function php_fann_create_train_from_callback(const _num_data: integer; const _num_input: integer; const _num_output: integer; const _user_function: variant): variant; begin end;
function php_fann_create_train(const _num_data: integer; const _num_input: integer; const _num_output: integer): variant; begin end;
function php_fann_descale_input(const _ann: variant; const _input_vector: variant): boolean; begin end;
function php_fann_descale_output(const _ann: variant; const _output_vector: variant): boolean; begin end;
function php_fann_descale_train(const _ann: variant; const _train_data: variant): boolean; begin end;
function php_fann_destroy_train(const _train_data: variant): boolean; begin end;
function php_fann_destroy(const _ann: variant): boolean; begin end;
function php_fann_duplicate_train_data(const _data: variant): variant; begin end;
function php_fann_get_activation_function(const _ann: variant; const _layer: integer; const _neuron: integer): integer; begin end;
function php_fann_get_activation_steepness(const _ann: variant; const _layer: integer; const _neuron: integer): extended; begin end;
function php_fann_get_bias_array(const _ann: variant): variant; begin end;
function php_fann_get_bit_fail_limit(const _ann: variant): extended; begin end;
function php_fann_get_bit_fail(const _ann: variant): integer; begin end;
function php_fann_get_cascade_activation_functions_count(const _ann: variant): integer; begin end;
function php_fann_get_cascade_activation_functions(const _ann: variant): variant; begin end;
function php_fann_get_cascade_activation_steepnesses_count(const _ann: variant): integer; begin end;
function php_fann_get_cascade_activation_steepnesses(const _ann: variant): variant; begin end;
function php_fann_get_cascade_candidate_change_fraction(const _ann: variant): extended; begin end;
function php_fann_get_cascade_candidate_limit(const _ann: variant): extended; begin end;
function php_fann_get_cascade_candidate_stagnation_epochs(const _ann: variant): extended; begin end;
function php_fann_get_cascade_max_cand_epochs(const _ann: variant): integer; begin end;
function php_fann_get_cascade_max_out_epochs(const _ann: variant): integer; begin end;
function php_fann_get_cascade_min_cand_epochs(const _ann: variant): integer; begin end;
function php_fann_get_cascade_min_out_epochs(const _ann: variant): integer; begin end;
function php_fann_get_cascade_num_candidate_groups(const _ann: variant): integer; begin end;
function php_fann_get_cascade_num_candidates(const _ann: variant): integer; begin end;
function php_fann_get_cascade_output_change_fraction(const _ann: variant): extended; begin end;
function php_fann_get_cascade_output_stagnation_epochs(const _ann: variant): integer; begin end;
function php_fann_get_cascade_weight_multiplier(const _ann: variant): extended; begin end;
function php_fann_get_connection_array(const _ann: variant): variant; begin end;
function php_fann_get_connection_rate(const _ann: variant): extended; begin end;
function php_fann_get_errno(const _errdat: variant): integer; begin end;
function php_fann_get_errstr(const _errdat: variant): string; begin end;
function php_fann_get_layer_array(const _ann: variant): variant; begin end;
function php_fann_get_learning_momentum(const _ann: variant): extended; begin end;
function php_fann_get_learning_rate(const _ann: variant): extended; begin end;
function php_fann_get_MSE(const _ann: variant): extended; begin end;
function php_fann_get_network_type(const _ann: variant): integer; begin end;
function php_fann_get_num_input(const _ann: variant): integer; begin end;
function php_fann_get_num_layers(const _ann: variant): integer; begin end;
function php_fann_get_num_output(const _ann: variant): integer; begin end;
function php_fann_get_quickprop_decay(const _ann: variant): extended; begin end;
function php_fann_get_quickprop_mu(const _ann: variant): extended; begin end;
function php_fann_get_rprop_decrease_factor(const _ann: variant): extended; begin end;
function php_fann_get_rprop_delta_max(const _ann: variant): extended; begin end;
function php_fann_get_rprop_delta_min(const _ann: variant): extended; begin end;
function php_fann_get_rprop_increase_factor(const _ann: variant): extended; begin end;
function php_fann_get_sarprop_step_error_shift(const _ann: variant): extended; begin end;
function php_fann_get_sarprop_step_error_threshold_factor(const _ann: variant): extended; begin end;
function php_fann_get_sarprop_temperature(const _ann: variant): extended; begin end;
function php_fann_get_sarprop_weight_decay_shift(const _ann: variant): extended; begin end;
function php_fann_get_total_connections(const _ann: variant): integer; begin end;
function php_fann_get_total_neurons(const _ann: variant): integer; begin end;
function php_fann_get_train_error_function(const _ann: variant): integer; begin end;
function php_fann_get_train_stop_function(const _ann: variant): integer; begin end;
function php_fann_get_training_algorithm(const _ann: variant): integer; begin end;
function php_fann_init_weights(const _ann: variant; const _train_data: variant): boolean; begin end;
function php_fann_length_train_data(const _data: variant): integer; begin end;
function php_fann_merge_train_data(const _data1: variant; const _data2: variant): variant; begin end;
function php_fann_num_input_train_data(const _data: variant): integer; begin end;
function php_fann_num_output_train_data(const _data: variant): integer; begin end;
procedure php_fann_print_error(const _errdat: string); begin end;
function php_fann_randomize_weights(const _ann: variant; const _min_weight: extended; const _max_weight: extended): boolean; begin end;
function php_fann_read_train_from_file(const _filename: string): variant; begin end;
procedure php_fann_reset_errno(const _errdat: variant); begin end;
procedure php_fann_reset_errstr(const _errdat: variant); begin end;
function php_fann_reset_MSE(const _ann: string): boolean; begin end;
function php_fann_run(const _ann: variant; const _input: variant): variant; begin end;
function php_fann_save_train(const _data: variant; const _file_name: string): boolean; begin end;
function php_fann_save(const _ann: variant; const _configuration_file: string): boolean; begin end;
function php_fann_scale_input_train_data(const _train_data: variant; const _new_min: extended; const _new_max: extended): boolean; begin end;
function php_fann_scale_input(const _ann: variant; const _input_vector: variant): boolean; begin end;
function php_fann_scale_output_train_data(const _train_data: variant; const _new_min: extended; const _new_max: extended): boolean; begin end;
function php_fann_scale_output(const _ann: variant; const _output_vector: variant): boolean; begin end;
function php_fann_scale_train_data(const _train_data: variant; const _new_min: extended; const _new_max: extended): boolean; begin end;
function php_fann_scale_train(const _ann: variant; const _train_data: variant): boolean; begin end;
function php_fann_set_activation_function_hidden(const _ann: variant; const _activation_function: integer): boolean; begin end;
function php_fann_set_activation_function_layer(const _ann: variant; const _activation_function: integer; const _layer: integer): boolean; begin end;
function php_fann_set_activation_function_output(const _ann: variant; const _activation_function: integer): boolean; begin end;
function php_fann_set_activation_function(const _ann: variant; const _activation_function: integer; const _layer: integer; const _neuron: integer): boolean; begin end;
function php_fann_set_activation_steepness_hidden(const _ann: variant; const _activation_steepness: extended): boolean; begin end;
function php_fann_set_activation_steepness_layer(const _ann: variant; const _activation_steepness: extended; const _layer: integer): boolean; begin end;
function php_fann_set_activation_steepness_output(const _ann: variant; const _activation_steepness: extended): boolean; begin end;
function php_fann_set_activation_steepness(const _ann: variant; const _activation_steepness: extended; const _layer: integer; const _neuron: integer): boolean; begin end;
function php_fann_set_bit_fail_limit(const _ann: variant; const _bit_fail_limit: extended): boolean; begin end;
function php_fann_set_callback(const _ann: variant; const _callback: variant): boolean; begin end;
function php_fann_set_cascade_activation_functions(const _ann: variant; const _cascade_activation_functions: variant): boolean; begin end;
function php_fann_set_cascade_activation_steepnesses(const _ann: variant; const _cascade_activation_steepnesses_count: variant): boolean; begin end;
function php_fann_set_cascade_candidate_change_fraction(const _ann: variant; const _cascade_candidate_change_fraction: extended): boolean; begin end;
function php_fann_set_cascade_candidate_limit(const _ann: variant; const _cascade_candidate_limit: extended): boolean; begin end;
function php_fann_set_cascade_candidate_stagnation_epochs(const _ann: variant; const _cascade_candidate_stagnation_epochs: integer): boolean; begin end;
function php_fann_set_cascade_max_cand_epochs(const _ann: variant; const _cascade_max_cand_epochs: integer): boolean; begin end;
function php_fann_set_cascade_max_out_epochs(const _ann: variant; const _cascade_max_out_epochs: integer): boolean; begin end;
function php_fann_set_cascade_min_cand_epochs(const _ann: variant; const _cascade_min_cand_epochs: integer): boolean; begin end;
function php_fann_set_cascade_min_out_epochs(const _ann: variant; const _cascade_min_out_epochs: integer): boolean; begin end;
function php_fann_set_cascade_num_candidate_groups(const _ann: variant; const _cascade_num_candidate_groups: integer): boolean; begin end;
function php_fann_set_cascade_output_change_fraction(const _ann: variant; const _cascade_output_change_fraction: extended): boolean; begin end;
function php_fann_set_cascade_output_stagnation_epochs(const _ann: variant; const _cascade_output_stagnation_epochs: integer): boolean; begin end;
function php_fann_set_cascade_weight_multiplier(const _ann: variant; const _cascade_weight_multiplier: extended): boolean; begin end;
procedure php_fann_set_error_log(const _errdat: variant; const _log_file: string); begin end;
function php_fann_set_input_scaling_params(const _ann: variant; const _train_data: variant; const _new_input_min: extended; const _new_input_max: extended): boolean; begin end;
function php_fann_set_learning_momentum(const _ann: variant; const _learning_momentum: extended): boolean; begin end;
function php_fann_set_learning_rate(const _ann: variant; const _learning_rate: extended): boolean; begin end;
function php_fann_set_output_scaling_params(const _ann: variant; const _train_data: variant; const _new_output_min: extended; const _new_output_max: extended): boolean; begin end;
function php_fann_set_quickprop_decay(const _ann: variant; const _quickprop_decay: extended): boolean; begin end;
function php_fann_set_quickprop_mu(const _ann: variant; const _quickprop_mu: extended): boolean; begin end;
function php_fann_set_rprop_decrease_factor(const _ann: variant; const _rprop_decrease_factor: extended): boolean; begin end;
function php_fann_set_rprop_delta_max(const _ann: variant; const _rprop_delta_max: extended): boolean; begin end;
function php_fann_set_rprop_delta_min(const _ann: variant; const _rprop_delta_min: extended): boolean; begin end;
function php_fann_set_rprop_delta_zero(const _ann: variant; const _rprop_delta_zero: extended): boolean; begin end;
function php_fann_set_rprop_increase_factor(const _ann: variant; const _rprop_increase_factor: extended): boolean; begin end;
function php_fann_set_sarprop_step_error_shift(const _ann: variant; const _sarprop_step_error_shift: extended): boolean; begin end;
function php_fann_set_sarprop_step_error_threshold_factor(const _ann: variant; const _sarprop_step_error_threshold_factor: extended): boolean; begin end;
function php_fann_set_sarprop_temperature(const _ann: variant; const _sarprop_temperature: extended): boolean; begin end;
function php_fann_set_sarprop_weight_decay_shift(const _ann: variant; const _sarprop_weight_decay_shift: extended): boolean; begin end;
function php_fann_set_scaling_params(const _ann: variant; const _train_data: variant; const _new_input_min: extended; const _new_input_max: extended; const _new_output_min: extended; const _new_output_max: extended): boolean; begin end;
function php_fann_set_train_error_function(const _ann: variant; const _error_function: integer): boolean; begin end;
function php_fann_set_train_stop_function(const _ann: variant; const _stop_function: integer): boolean; begin end;
function php_fann_set_training_algorithm(const _ann: variant; const _training_algorithm: integer): boolean; begin end;
function php_fann_set_weight_array(const _ann: variant; const _connections: variant): boolean; begin end;
function php_fann_set_weight(const _ann: variant; const _from_neuron: integer; const _to_neuron: integer; const _weight: extended): boolean; begin end;
function php_fann_shuffle_train_data(const _train_data: variant): boolean; begin end;
function php_fann_subset_train_data(const _data: variant; const _pos: integer; const _length: integer): variant; begin end;
function php_fann_test_data(const _ann: variant; const _data: variant): extended; begin end;
function php_fann_test(const _ann: variant; const _input: variant; const _desired_output: variant): boolean; begin end;
function php_fann_train_epoch(const _ann: variant; const _data: variant): extended; begin end;
function php_fann_train_on_data(const _ann: variant; const _data: variant; const _max_epochs: integer; const _epochs_between_reports: integer; const _desired_error: extended): boolean; begin end;
function php_fann_train_on_file(const _ann: variant; const _filename: string; const _max_epochs: integer; const _epochs_between_reports: integer; const _desired_error: extended): boolean; begin end;
function php_fann_train(const _ann: variant; const _input: variant; const _desired_output: variant): boolean; begin end;
function php_getFromNeuron(): integer; begin end;
function php_getToNeuron(): integer; begin end;
procedure php_getWeight(); begin end;
function php_setWeight(const _weight: extended): boolean; begin end;
function php_jsonSerialize(): variant; begin end;
function php_json_decode(const _json: string; const _assoc: boolean; const _depth: integer; const _options: integer): variant; begin end;
function php_json_encode(const _value: variant; const _options: integer; const _depth: integer): string; begin end;
function php_json_last_error_msg(): string; begin end;
function php_json_last_error(): integer; begin end;
function php_byCount(const _nth_index: integer): integer; begin end;
function php_count(const _index_start: integer; const _index_end: integer): integer; begin end;
function php_first(const _index: variant): variant; begin end;
function php_firstEmpty(const _index: variant): integer; begin end;
procedure php_last(const _index: string); begin end;
function php_lastEmpty(const _index: integer): integer; begin end;
function php_memoryUsage(): integer; begin end;
function php_next(const _index: variant): variant; begin end;
function php_nextEmpty(const _index: integer): integer; begin end;
function php_prev(const _index: variant): variant; begin end;
function php_prevEmpty(const _index: variant): integer; begin end;
function php_judy_type(const _array: variant): integer; begin end;
function php_judy_version(): string; begin end;
function php_assign(const _name: string; const _value: string): variant; begin end;
function php_call(const _lua_func: variant; const _args: variant; const _use_self: integer): variant; begin end;
function php_eval(const _statements: string): variant; begin end;
function php_include(const _file: string): variant; begin end;
function php_registerCallback(const _name: string; const _function: variant): variant; begin end;
function php_connection_aborted(): integer; begin end;
function php_connection_status(): integer; begin end;
function php_constant(const _name: string): variant; begin end;
function php_define(const _name: string; const _value: variant; const _case_insensitive: boolean): boolean; begin end;
function php_defined(const _name: string): boolean; begin end;
procedure php_exit(const _status: string); begin end;
procedure php_exit(const _status: integer); begin end;
function php_get_browser(const _user_agent: string; const _return_array: boolean): variant; begin end;
function php_highlight_file(const _filename: string; const _return: boolean): variant; begin end;
function php_highlight_string(const _str: string; const _return: boolean): variant; begin end;
function php_ignore_user_abort(const _value: boolean): integer; begin end;
function php_pack(const _format: string; const _args: variant): string; begin end;
function php_php_check_syntax(const _filename: string; var _error_message: string): boolean; begin end;
function php_php_strip_whitespace(const _filename: string): string; begin end;
function php_sleep(const _seconds: integer): integer; begin end;
function php_sys_getloadavg(): variant; begin end;
function php_time_nanosleep(const _seconds: integer; const _nanoseconds: integer): variant; begin end;
function php_time_sleep_until(const _timestamp: extended): boolean; begin end;
function php_uniqid(const _prefix: string; const _more_entropy: boolean): string; begin end;
function php_unpack(const _format: string; const _data: string): variant; begin end;
procedure php_usleep(const _micro_seconds: integer); begin end;
function php_parsekit_compile_file(const _filename: string; var _errors: variant; const _options: integer): variant; begin end;
function php_parsekit_compile_string(const _phpcode: string; var _errors: variant; const _options: integer): variant; begin end;
function php_parsekit_func_arginfo(const _function: variant): variant; begin end;
procedure php_add(const _index: variant; const _newval: variant); begin end;
function php_bottom(): variant; begin end;
function php_getIteratorMode(): integer; begin end;
procedure php_push(const _value: variant); begin end;
procedure php_setIteratorMode(const _mode: integer); begin end;
function php_top(): variant; begin end;
procedure php_unshift(const _value: variant); begin end;
function php_dequeue(): variant; begin end;
procedure php_enqueue(const _value: variant); begin end;
function php_compare(const _value1: variant; const _value2: variant): integer; begin end;
function php_extract(): variant; begin end;
procedure php_recoverFromCorruption(); begin end;
procedure php_insert(const _value: variant; const _priority: variant); begin end;
procedure php_setExtractFlags(const _flags: integer); begin end;
function php_offsetExists(const _index: integer): boolean; begin end;
function php_offsetGet(const _index: integer): variant; begin end;
procedure php_offsetSet(const _index: integer; const _newval: variant); begin end;
procedure php_offsetUnset(const _index: integer); begin end;
procedure php_addAll(const _storage: variant); begin end;
procedure php_attach(const _object: variant; const _data: variant); begin end;
function php_contains(const _object: variant): boolean; begin end;
procedure php_detach(const _object: variant); begin end;
function php_getHash(const _object: variant): string; begin end;
procedure php_removeAll(const _storage: variant); begin end;
procedure php_removeAllExcept(const _storage: variant); begin end;
procedure php_setInfo(const _data: variant); begin end;
procedure php_getArrayIterator(); begin end;
procedure php_asort(); begin end;
function php_getArrayCopy(): variant; begin end;
procedure php_getFlags(); begin end;
procedure php_ksort(); begin end;
procedure php_natcasesort(); begin end;
procedure php_natsort(); begin end;
procedure php_seek(const _position: integer); begin end;
procedure php_setFlags(const _flags: string); begin end;
procedure php_uasort(const _cmp_function: string); begin end;
procedure php_uksort(const _cmp_function: string); begin end;
function php_getCache(): variant; begin end;
procedure php_setFlags(const _flags: integer); begin end;
function php_accept(): string; begin end;
function php_getATime(): integer; begin end;
function php_getBasename(const _suffix: string): string; begin end;
function php_getCTime(): integer; begin end;
function php_getExtension(): string; begin end;
function php_getGroup(): integer; begin end;
function php_getInode(): integer; begin end;
function php_getMTime(): integer; begin end;
function php_getOwner(): integer; begin end;
function php_getPath(): string; begin end;
function php_getPathname(): string; begin end;
function php_getPerms(): integer; begin end;
function php_isDir(): boolean; begin end;
function php_isDot(): boolean; begin end;
function php_isExecutable(): boolean; begin end;
function php_isFile(): boolean; begin end;
function php_isLink(): boolean; begin end;
function php_isReadable(): boolean; begin end;
function php_getPosition(): integer; begin end;
procedure php_attachIterator(const _iterator: variant; const _infos: string); begin end;
function php_containsIterator(const _iterator: variant): boolean; begin end;
function php_countIterators(): integer; begin end;
procedure php_detachIterator(const _iterator: variant); begin end;
function php_hasChildren(): boolean; begin end;
function php_getChildren(): variant; begin end;
function php_getSubPath(): string; begin end;
function php_getSubPathname(): string; begin end;
function php_hasChildren(const _allow_links: boolean): boolean; begin end;
procedure php_beginChildren(); begin end;
procedure php_beginIteration(); begin end;
function php_callHasChildren(): boolean; begin end;
procedure php_endChildren(); begin end;
procedure php_endIteration(); begin end;
function php_getDepth(): integer; begin end;
function php_getMaxDepth(): variant; begin end;
procedure php_nextElement(); begin end;
procedure php_setMaxDepth(const _max_depth: string); begin end;
function php_getEntry(): string; begin end;
procedure php_getPostfix(); begin end;
function php_getPrefix(): string; begin end;
procedure php_setPrefixPart(const _part: integer; const _value: string); begin end;
function php_getPregFlags(): integer; begin end;
function php_getRegex(): string; begin end;
procedure php_setMode(const _mode: integer); begin end;
procedure php_setPregFlags(const _preg_flags: integer); begin end;
function php_class_implements(const _class: variant; const _autoload: boolean): variant; begin end;
function php_class_parents(const _class: variant; const _autoload: boolean): variant; begin end;
function php_class_uses(const _class: variant; const _autoload: boolean): variant; begin end;
function php_iterator_apply(const _iterator: variant; const _function: variant; const _args: variant): integer; begin end;
function php_iterator_count(const _iterator: variant): integer; begin end;
function php_iterator_to_array(const _iterator: variant; const _use_keys: boolean): variant; begin end;
procedure php_spl_autoload_call(const _class_name: string); begin end;
function php_spl_autoload_extensions(const _file_extensions: string): string; begin end;
function php_spl_autoload_functions(): variant; begin end;
function php_spl_autoload_register(const _autoload_function: variant; const _throw: boolean; const _prepend: boolean): boolean; begin end;
function php_spl_autoload_unregister(const _autoload_function: variant): boolean; begin end;
procedure php_spl_autoload(const _class_name: string; const _file_extensions: string); begin end;
function php_spl_classes(): variant; begin end;
function php_spl_object_hash(const _obj: variant): string; begin end;
function php_getLinkTarget(): string; begin end;
function php_getRealPath(): string; begin end;
procedure php_setFileClass(const _class_name: string); begin end;
procedure php_setInfoClass(const _class_name: string); begin end;
function php_fflush(): boolean; begin end;
function php_fgetc(): string; begin end;
function php_fgetcsv(const _delimiter: string; const _enclosure: string; const _escape: string): variant; begin end;
function php_fgets(): string; begin end;
function php_fgetss(const _allowable_tags: string): string; begin end;
function php_flock(const _operation: integer; var _wouldblock: integer): boolean; begin end;
function php_fpassthru(): integer; begin end;
function php_fputcsv(const _fields: variant; const _delimiter: string; const _enclosure: string; const _escape: string): integer; begin end;
function php_fread(const _length: integer): string; begin end;
function php_fscanf(const _format: string): variant; begin end;
function php_fseek(const _offset: integer; const _whence: integer): integer; begin end;
function php_fstat(): variant; begin end;
function php_ftell(): integer; begin end;
function php_ftruncate(const _size: integer): boolean; begin end;
function php_fwrite(const _str: string; const _length: integer): integer; begin end;
function php_getCsvControl(): variant; begin end;
function php_getMaxLineLen(): integer; begin end;
procedure php_setCsvControl(const _delimiter: string; const _enclosure: string; const _escape: string); begin end;
procedure php_setMaxLineLen(const _max_len: integer); begin end;
function php_exchangeArray(const _input: variant): variant; begin end;
function php_getIteratorClass(): string; begin end;
procedure php_setIteratorClass(const _iterator_class: string); begin end;
procedure php_uasort(const _cmp_function: variant); begin end;
procedure php_uksort(const _cmp_function: variant); begin end;
procedure php_update(const _subject: variant); begin end;
procedure php_attach(const _observer: variant); begin end;
function php_getConstList(const _include_default: boolean): variant; begin end;
function php_filter(const _in: variant; const _out: variant; var _consumed: integer; const _closing: boolean): integer; begin end;
procedure php_onClose(); begin end;
function php_onCreate(): boolean; begin end;
function php_dir_closedir(): boolean; begin end;
function php_dir_opendir(const _path: string; const _options: integer): boolean; begin end;
function php_dir_readdir(): string; begin end;
function php_dir_rewinddir(): boolean; begin end;
function php_mkdir(const _path: string; const _mode: integer; const _options: integer): boolean; begin end;
function php_rename(const _path_from: string; const _path_to: string): boolean; begin end;
function php_rmdir(const _path: string; const _options: integer): boolean; begin end;
function php_stream_cast(const _cast_as: integer): variant; begin end;
procedure php_stream_close(); begin end;
function php_stream_eof(): boolean; begin end;
function php_stream_flush(): boolean; begin end;
function php_stream_lock(const _operation: integer): boolean; begin end;
function php_stream_metadata(const _path: string; const _option: integer; const _value: variant): boolean; begin end;
function php_stream_open(const _path: string; const _mode: string; const _options: integer; var _opened_path: string): boolean; begin end;
function php_stream_read(const _count: integer): string; begin end;
function php_stream_seek(const _offset: integer; const _whence: integer): boolean; begin end;
function php_stream_set_option(const _option: integer; const _arg1: integer; const _arg2: integer): boolean; begin end;
function php_stream_stat(): variant; begin end;
function php_stream_tell(): integer; begin end;
function php_stream_truncate(const _new_size: integer): boolean; begin end;
function php_stream_write(const _data: string): integer; begin end;
function php_unlink(const _path: string): boolean; begin end;
function php_url_stat(const _path: string; const _flags: integer): variant; begin end;
procedure php_stream_bucket_append(const _brigade: variant; const _bucket: variant); begin end;
function php_stream_bucket_make_writeable(const _brigade: variant): variant; begin end;
function php_stream_bucket_new(const _stream: variant; const _buffer: string): variant; begin end;
procedure php_stream_bucket_prepend(const _brigade: variant; const _bucket: variant); begin end;
function php_stream_context_create(const _options: variant; const _params: variant): variant; begin end;
function php_stream_context_get_default(const _options: variant): variant; begin end;
function php_stream_context_get_options(const _stream_or_context: variant): variant; begin end;
function php_stream_context_get_params(const _stream_or_context: variant): variant; begin end;
function php_stream_context_set_default(const _options: variant): variant; begin end;
function php_stream_context_set_option(const _stream_or_context: variant; const _wrapper: string; const _option: string; const _value: variant): boolean; begin end;
function php_stream_context_set_option(const _stream_or_context: variant; const _options: variant): boolean; begin end;
function php_stream_context_set_params(const _stream_or_context: variant; const _params: variant): boolean; begin end;
function php_stream_copy_to_stream(const _source: variant; const _dest: variant; const _maxlength: integer; const _offset: integer): integer; begin end;
function php_stream_encoding(const _stream: variant; const _encoding: string): boolean; begin end;
function php_stream_filter_append(const _stream: variant; const _filtername: string; const _read_write: integer; const _params: variant): variant; begin end;
function php_stream_filter_prepend(const _stream: variant; const _filtername: string; const _read_write: integer; const _params: variant): variant; begin end;
function php_stream_filter_register(const _filtername: string; const _classname: string): boolean; begin end;
function php_stream_filter_remove(const _stream_filter: variant): boolean; begin end;
function php_stream_get_contents(const _handle: variant; const _maxlength: integer; const _offset: integer): string; begin end;
function php_stream_get_filters(): variant; begin end;
function php_stream_get_line(const _handle: variant; const _length: integer; const _ending: string): string; begin end;
function php_stream_get_meta_data(const _stream: variant): variant; begin end;
function php_stream_get_transports(): variant; begin end;
function php_stream_get_wrappers(): variant; begin end;
function php_stream_is_local(const _stream_or_url: variant): boolean; begin end;
procedure php_stream_notification_callback(const _notification_code: integer; const _severity: integer; const _message: string; const _message_code: integer; const _bytes_transferred: integer; const _bytes_max: integer); begin end;
function php_stream_resolve_include_path(const _filename: string): string; begin end;
function php_stream_select(var _read: variant; var _write: variant; var _except: variant; const _tv_sec: integer; const _tv_usec: integer): integer; begin end;
function php_stream_set_blocking(const _stream: variant; const _mode: boolean): boolean; begin end;
function php_stream_set_chunk_size(const _fp: variant; const _chunk_size: integer): integer; begin end;
function php_stream_set_read_buffer(const _stream: variant; const _buffer: integer): integer; begin end;
function php_stream_set_timeout(const _stream: variant; const _seconds: integer; const _microseconds: integer): boolean; begin end;
function php_stream_set_write_buffer(const _stream: variant; const _buffer: integer): integer; begin end;
function php_stream_socket_accept(const _server_socket: variant; const _timeout: extended): variant; begin end;
function php_stream_socket_client(const _remote_socket: string; var _errno: integer; var _errstr: string; const _timeout: extended): variant; begin end;
function php_stream_socket_enable_crypto(const _stream: variant; const _enable: boolean; const _crypto_type: integer; const _session_stream: variant): variant; begin end;
function php_stream_socket_get_name(const _handle: variant; const _want_peer: boolean): string; begin end;
function php_stream_socket_pair(const _domain: integer; const _type: integer; const _protocol: integer): variant; begin end;
function php_stream_socket_recvfrom(const _socket: variant; const _length: integer; const _flags: integer; var _address: string): string; begin end;
function php_stream_socket_sendto(const _socket: variant; const _data: string; const _flags: integer; const _address: string): integer; begin end;
function php_stream_socket_server(const _local_socket: string; var _errno: integer; var _errstr: string; const _flags: integer; const _context: variant): variant; begin end;
function php_stream_socket_shutdown(const _stream: variant; const _how: integer): boolean; begin end;
function php_stream_supports_lock(const _stream: variant): boolean; begin end;
function php_stream_wrapper_register(const _protocol: string; const _classname: string; const _flags: integer): boolean; begin end;
function php_stream_wrapper_restore(const _protocol: string): boolean; begin end;
function php_stream_wrapper_unregister(const _protocol: string): boolean; begin end;
function php_cleanRepair(): boolean; begin end;
function php_diagnose(): boolean; begin end;
function php_getConfig(): variant; begin end;
function php_getHtmlVer(): integer; begin end;
function php_getOpt(const _option: string): variant; begin end;
function php_getOptDoc(const _optname: string): string; begin end;
function php_getRelease(): string; begin end;
function php_getStatus(): integer; begin end;
function php_isXhtml(): boolean; begin end;
function php_isXml(): boolean; begin end;
function php_parseFile(const _filename: string; const _config: variant; const _encoding: string; const _use_include_path: boolean): boolean; begin end;
function php_parseString(const _input: string; const _config: variant; const _encoding: string): boolean; begin end;
function php_repairFile(const _filename: string; const _config: variant; const _encoding: string; const _use_include_path: boolean): string; begin end;
function php_repairString(const _data: string; const _config: variant; const _encoding: string): string; begin end;
function php_tidy_clean_repair(const _object: variant): boolean; begin end;
function php_tidy_diagnose(const _object: variant): boolean; begin end;
function php_tidy_get_error_buffer(const _tidy: variant): string; begin end;
function php_tidy_get_config(const _object: variant): variant; begin end;
function php_tidy_get_html_ver(const _object: variant): integer; begin end;
function php_tidy_getopt(const _object: variant; const _option: string): variant; begin end;
function php_tidy_get_opt_doc(const _object: variant; const _optname: string): string; begin end;
function php_tidy_get_release(): string; begin end;
function php_tidy_get_status(const _object: variant): integer; begin end;
function php_tidy_is_xhtml(const _object: variant): boolean; begin end;
function php_tidy_is_xml(const _object: variant): boolean; begin end;
function php_tidy_repair_file(const _filename: string; const _config: variant; const _encoding: string; const _use_include_path: boolean): string; begin end;
function php_tidy_repair_string(const _data: string; const _config: variant; const _encoding: string): string; begin end;
function php_hasSiblings(): boolean; begin end;
function php_isAsp(): boolean; begin end;
function php_isComment(): boolean; begin end;
function php_isHtml(): boolean; begin end;
function php_isJste(): boolean; begin end;
function php_isPhp(): boolean; begin end;
function php_isText(): boolean; begin end;
function php_ob_tidyhandler(const _input: string; const _mode: integer): string; begin end;
function php_tidy_access_count(const _object: variant): integer; begin end;
function php_tidy_config_count(const _object: variant): integer; begin end;
function php_tidy_error_count(const _object: variant): integer; begin end;
function php_tidy_get_output(const _object: variant): string; begin end;
procedure php_tidy_load_config(const _filename: string; const _encoding: string); begin end;
function php_tidy_reset_config(): boolean; begin end;
function php_tidy_save_config(const _filename: string): boolean; begin end;
function php_tidy_set_encoding(const _encoding: string): boolean; begin end;
function php_tidy_setopt(const _option: string; const _value: variant): boolean; begin end;
function php_tidy_warning_count(const _object: variant): integer; begin end;
function php_token_get_all(const _source: string; const _flags: integer): variant; begin end;
function php_token_name(const _token: integer): string; begin end;
function php_base64_decode(const _data: string; const _strict: boolean): string; begin end;
function php_base64_encode(const _data: string): string; begin end;
function php_get_headers(const _url: string; const _format: integer): variant; begin end;
function php_get_meta_tags(const _filename: string; const _use_include_path: boolean): variant; begin end;
function php_http_build_query(const _query_data: variant; const _numeric_prefix: string; const _arg_separator: string; const _enc_type: integer): string; begin end;
function php_parse_url(const _url: string; const _component: integer): variant; begin end;
function php_rawurldecode(const _str: string): string; begin end;
function php_rawurlencode(const _str: string): string; begin end;
function php_urldecode(const _str: string): string; begin end;
function php_urlencode(const _str: string): string; begin end;
function php_executeString(const _script: string; const _identifier: string; const _flags: integer): variant; begin end;
function php_getExtensions(): variant; begin end;
function php_registerExtension(const _extension_name: string; const _script: string; const _dependencies: variant): boolean; begin end;
function php_getJsFileName(): string; begin end;
function php_getJsLineNumber(): integer; begin end;
function php_getJsSourceLine(): string; begin end;
function php_getJsTrace(): string; begin end;
function php_yaml_emit_file(const _filename: string; const _data: variant; const _encoding: integer; const _linebreak: integer; const _callbacks: variant): boolean; begin end;
function php_yaml_emit(const _data: variant; const _encoding: integer; const _linebreak: integer; const _callbacks: variant): string; begin end;
function php_yaml_parse_file(const _filename: string; const _pos: integer; var _ndocs: integer; const _callbacks: variant): variant; begin end;
function php_yaml_parse_url(const _url: string; const _pos: integer; var _ndocs: integer; const _callbacks: variant): variant; begin end;
function php_yaml_parse(const _input: string; const _pos: integer; var _ndocs: integer; const _callbacks: variant): variant; begin end;
procedure php_app(); begin end;
procedure php_bootstrap(const _bootstrap: variant); begin end;
procedure php_environ(); begin end;
function php_getLastErrorMsg(): string; begin end;
function php_getLastErrorNo(): integer; begin end;
function php_getModules(): variant; begin end;
function php_disableView(): boolean; begin end;
function php_get(const _name: string; const _value: variant): variant; begin end;
function php_readonly(): boolean; begin end;
function php_display(const _tpl: string; const _parameters: variant): boolean; begin end;
procedure php_forward(const _action: string; const _paramters: variant); begin end;
procedure php_getInvokeArg(const _name: string); begin end;
procedure php_getInvokeArgs(); begin end;
function php_getModuleName(): string; begin end;
procedure php_getViewpath(); begin end;
procedure php_init(); begin end;
procedure php_initView(const _options: variant); begin end;
function php_redirect(const _url: string): boolean; begin end;
function php_render(const _tpl: string; const _parameters: variant): string; begin end;
procedure php_setViewpath(const _view_directory: string); begin end;
procedure php_getScriptPath(); begin end;
procedure php_setScriptPath(const _template_dir: string); begin end;
function php_assign(const _name: string; const _value: variant): boolean; begin end;
function php_assignRef(const _name: string; var _value: variant): boolean; begin end;
function php_clear(const _name: string): boolean; begin end;
function php_eval(const _tpl_content: string; const _tpl_vars: variant): string; begin end;
procedure php_autoload(); begin end;
procedure php_clearLocalNamespace(); begin end;
procedure php_getInstance(); begin end;
procedure php_getLocalNamespace(); begin end;
procedure php_import(); begin end;
procedure php_isLocalName(); begin end;
procedure php_registerLocalNamespace(const _prefix: variant); begin end;
procedure php_dispatchLoopShutdown(const _request: variant; const _response: variant); begin end;
procedure php_dispatchLoopStartup(const _request: variant; const _response: variant); begin end;
procedure php_postDispatch(const _request: variant; const _response: variant); begin end;
procedure php_preDispatch(const _request: variant; const _response: variant); begin end;
procedure php_preResponse(const _request: variant; const _response: variant); begin end;
procedure php_routerShutdown(const _request: variant; const _response: variant); begin end;
procedure php_routerStartup(const _request: variant; const _response: variant); begin end;
procedure php_del(const _name: string); begin end;
function php_get(const _name: string): variant; begin end;
function php_has(const _name: string): boolean; begin end;
function php_set(const _name: string; const _value: string): boolean; begin end;
procedure php_getActionName(); begin end;
procedure php_getBaseUri(); begin end;
procedure php_getControllerName(); begin end;
procedure php_getEnv(const _name: string; const _default: string); begin end;
procedure php_getException(); begin end;
procedure php_getLanguage(); begin end;
procedure php_getParam(const _name: string; const _default: string); begin end;
procedure php_getParams(); begin end;
procedure php_getRequestUri(); begin end;
procedure php_getServer(const _name: string; const _default: string); begin end;
procedure php_isCli(); begin end;
procedure php_isDispatched(); begin end;
procedure php_isGet(); begin end;
procedure php_isHead(); begin end;
procedure php_isOptions(); begin end;
procedure php_isPost(); begin end;
procedure php_isPut(); begin end;
procedure php_isRouted(); begin end;
procedure php_isXmlHttpRequest(); begin end;
procedure php_setActionName(const _action: string); begin end;
function php_setBaseUri(const _uir: string): boolean; begin end;
procedure php_setControllerName(const _controller: string); begin end;
procedure php_setDispatched(); begin end;
procedure php_setModuleName(const _module: string); begin end;
procedure php_setParam(const _name: string; const _value: string); begin end;
procedure php_setRequestUri(const _uir: string); begin end;
procedure php_setRouted(const _flag: string); begin end;
function php_get(const _name: string; const _default: string): variant; begin end;
function php_getCookie(const _name: string; const _default: string): variant; begin end;
procedure php_getFiles(); begin end;
function php_getPost(const _name: string; const _default: string): variant; begin end;
function php_getQuery(const _name: string; const _default: string): variant; begin end;
procedure php_getRequest(); begin end;
procedure php_get(); begin end;
procedure php_getCookie(); begin end;
procedure php_getPost(); begin end;
procedure php_getQuery(); begin end;
function php_appendBody(const _content: string; const _key: string): boolean; begin end;
function php_clearBody(const _key: string): boolean; begin end;
procedure php_clearHeaders(); begin end;
function php_getBody(const _key: string): variant; begin end;
procedure php_getHeader(); begin end;
function php_prependBody(const _content: string; const _key: string): boolean; begin end;
procedure php_response(); begin end;
procedure php_setAllHeaders(); begin end;
function php_setBody(const _content: string; const _key: string): boolean; begin end;
procedure php_setHeader(); begin end;
procedure php_setRedirect(); begin end;
function php_assemble(const _info: variant; const _query: variant): string; begin end;
function php_route(const _request: variant): boolean; begin end;
function php_addConfig(const _config: variant): boolean; begin end;
function php_addRoute(const _name: string; const _route: variant): boolean; begin end;
function php_getCurrentRoute(): string; begin end;
function php_getRoutes(): variant; begin end;
procedure php_match(const _uri: string); begin end;
procedure php_getPrevious(); begin end;
function php_is_tainted(const _string: string): boolean; begin end;
function php_taint(var _string: string): boolean; begin end;
function php_untaint(var _string: string): boolean; begin end;
function php_chdb_create(const _pathname: string; const _data: variant): boolean; begin end;
procedure php_curl_close(const _ch: variant); begin end;
function php_curl_copy_handle(const _ch: variant): variant; begin end;
function php_curl_errno(const _ch: variant): integer; begin end;
function php_curl_error(const _ch: variant): string; begin end;
function php_curl_escape(const _ch: variant; const _str: string): string; begin end;
function php_curl_exec(const _ch: variant): variant; begin end;
function php_curl_getinfo(const _ch: variant; const _opt: integer): variant; begin end;
function php_curl_init(const _url: string): variant; begin end;
function php_curl_multi_add_handle(const _mh: variant; const _ch: variant): integer; begin end;
procedure php_curl_multi_close(const _mh: variant); begin end;
function php_curl_multi_exec(const _mh: variant; var _still_running: integer): integer; begin end;
function php_curl_multi_getcontent(const _ch: variant): string; begin end;
function php_curl_multi_info_read(const _mh: variant; var _msgs_in_queue: integer): variant; begin end;
function php_curl_multi_init(): variant; begin end;
function php_curl_multi_remove_handle(const _mh: variant; const _ch: variant): integer; begin end;
function php_curl_multi_select(const _mh: variant; const _timeout: extended): integer; begin end;
function php_curl_multi_setopt(const _mh: variant; const _option: integer; const _value: variant): boolean; begin end;
function php_curl_multi_strerror(const _errornum: integer): string; begin end;
function php_curl_pause(const _ch: variant; const _bitmask: integer): integer; begin end;
procedure php_curl_reset(const _ch: variant); begin end;
function php_curl_setopt_array(const _ch: variant; const _options: variant): boolean; begin end;
function php_curl_setopt(const _ch: variant; const _option: integer; const _value: variant): boolean; begin end;
procedure php_curl_share_close(const _sh: variant); begin end;
function php_curl_share_init(): variant; begin end;
function php_curl_share_setopt(const _sh: variant; const _option: integer; const _value: string): boolean; begin end;
function php_curl_strerror(const _errornum: integer): string; begin end;
function php_curl_unescape(const _ch: variant; const _str: string): string; begin end;
function php_curl_version(const _age: integer): variant; begin end;
function php_getPostFilename(): string; begin end;
procedure php_setMimeType(const _mime: string); begin end;
procedure php_setPostFilename(const _postname: string); begin end;
procedure php_callback(const _fd: variant; const _what: integer; const _arg: variant); begin end;
procedure php_callback(const _arg: variant); begin end;
procedure php_callback(const _signum: integer; const _arg: variant); begin end;
function php_addSignal(const _timeout: variant): boolean; begin end;
function php_addTimer(const _timeout: variant): boolean; begin end;
function php_del(): boolean; begin end;
function php_delSignal(): boolean; begin end;
function php_delTimer(): boolean; begin end;
function php_getSupportedMethods(): variant; begin end;
function php_pending(const _flags: integer): boolean; begin end;
function php_set(const _base: variant; const _fd: variant; const _what: integer; const _cb: variant; const _arg: variant): boolean; begin end;
function php_setPriority(const _priority: integer): boolean; begin end;
function php_setTimer(const _base: variant; const _cb: variant; const _arg: variant): boolean; begin end;
procedure php_dispatch(); begin end;
function php_exit(const _timeout: variant): boolean; begin end;
function php_getFeatures(): integer; begin end;
function php_gotExit(): boolean; begin end;
function php_gotStop(): boolean; begin end;
function php_loop(const _flags: integer): boolean; begin end;
function php_priorityInit(const _n_priorities: integer): boolean; begin end;
function php_reInit(): boolean; begin end;
function php_add(const _data: string): boolean; begin end;
function php_addBuffer(const _buf: variant): boolean; begin end;
function php_appendFrom(const _buf: variant; const _len: integer): integer; begin end;
function php_copyout(var _data: string; const _max_bytes: integer): integer; begin end;
function php_drain(const _len: integer): boolean; begin end;
procedure php_enableLocking(); begin end;
function php_expand(const _len: integer): boolean; begin end;
function php_freeze(const _at_front: boolean): boolean; begin end;
function php_prepend(const _data: string): boolean; begin end;
function php_prependBuffer(const _buf: variant): boolean; begin end;
function php_pullup(const _size: integer): string; begin end;
function php_read(const _fd: variant; const _howmuch: integer): integer; begin end;
function php_readLine(const _eol_style: integer): string; begin end;
function php_search(const _what: string; const _start: integer; const _end: integer): variant; begin end;
function php_searchEol(const _start: integer; const _eol_style: integer): variant; begin end;
function php_substr(const _start: integer; const _length: integer): string; begin end;
function php_unfreeze(const _at_front: boolean): boolean; begin end;
function php_write(const _fd: variant; const _howmuch: integer): integer; begin end;
function php_connectHost(const _dns_base: variant; const _hostname: string; const _port: integer; const _family: integer): boolean; begin end;
function php_createPair(const _base: variant; const _options: integer): variant; begin end;
function php_disable(const _events: integer): boolean; begin end;
function php_enable(const _events: integer): boolean; begin end;
function php_getDnsErrorString(): string; begin end;
function php_getEnabled(): integer; begin end;
function php_readBuffer(const _buf: variant): boolean; begin end;
procedure php_setCallbacks(const _readcb: variant; const _writecb: variant; const _eventcb: variant; const _arg: string); begin end;
function php_setTimeouts(const _timeout_read: extended; const _timeout_write: extended): boolean; begin end;
procedure php_setWatermark(const _events: integer; const _lowmark: integer; const _highmark: integer); begin end;
function php_sslError(): string; begin end;
function php_sslGetCipherInfo(): string; begin end;
function php_sslGetCipherName(): string; begin end;
function php_sslGetCipherVersion(): string; begin end;
function php_sslGetProtocol(): string; begin end;
procedure php_sslRenegotiate(); begin end;
function php_writeBuffer(const _buf: variant): boolean; begin end;
function php_avoidMethod(const _method: string): boolean; begin end;
function php_requireFeatures(const _feature: integer): boolean; begin end;
procedure php_setMaxDispatchInterval(const _max_interval: integer; const _max_callbacks: integer; const _min_priority: integer); begin end;
function php_addNameserverIp(const _ip: string): boolean; begin end;
procedure php_addSearch(const _domain: string); begin end;
procedure php_clearSearch(); begin end;
function php_countNameservers(): integer; begin end;
function php_loadHosts(const _hosts: string): boolean; begin end;
function php_parseResolvConf(const _flags: integer; const _filename: string): boolean; begin end;
function php_setSearchNdots(const _ndots: integer): boolean; begin end;
function php_accept(const _socket: variant): boolean; begin end;
function php_addServerAlias(const _alias: string): boolean; begin end;
procedure php_bind(const _address: string; const _port: integer); begin end;
function php_removeServerAlias(const _alias: string): boolean; begin end;
procedure php_setAllowedMethods(const _methods: integer); begin end;
procedure php_setCallback(const _path: string; const _cb: string; const _arg: string); begin end;
procedure php_setDefaultCallback(const _cb: string; const _arg: string); begin end;
procedure php_setMaxBodySize(const _value: integer); begin end;
procedure php_setMaxHeadersSize(const _value: integer); begin end;
procedure php_setTimeout(const _value: integer); begin end;
procedure php_getPeer(var _address: string; var _port: integer); begin end;
function php_makeRequest(const _req: variant; const _type: integer; const _uri: string): boolean; begin end;
procedure php_setCloseCallback(const _callback: variant; const _data: variant); begin end;
procedure php_setLocalAddress(const _address: string); begin end;
procedure php_setLocalPort(const _port: integer); begin end;
procedure php_setMaxBodySize(const _max_size: string); begin end;
procedure php_setMaxHeadersSize(const _max_size: string); begin end;
procedure php_setRetries(const _retries: integer); begin end;
function php_addHeader(const _key: string; const _value: string; const _type: integer): boolean; begin end;
procedure php_cancel(); begin end;
procedure php_closeConnection(); begin end;
procedure php_findHeader(const _key: string; const _type: string); begin end;
procedure php_getCommand(); begin end;
function php_getInputHeaders(): variant; begin end;
procedure php_getOutputHeaders(); begin end;
function php_getResponseCode(): integer; begin end;
function php_getUri(): string; begin end;
procedure php_removeHeader(const _key: string; const _type: string); begin end;
procedure php_sendError(const _error: integer; const _reason: string); begin end;
procedure php_sendReply(const _code: integer; const _reason: string; const _buf: variant); begin end;
procedure php_sendReplyChunk(const _buf: variant); begin end;
procedure php_sendReplyEnd(); begin end;
procedure php_sendReplyStart(const _code: integer; const _reason: string); begin end;
function php_disable(): boolean; begin end;
function php_enable(): boolean; begin end;
procedure php_getBase(); begin end;
function php_getSocketName(var _address: string; var _port: variant): boolean; begin end;
procedure php_setCallback(const _cb: variant; const _arg: variant); begin end;
procedure php_setErrorCallback(const _cb: string); begin end;
procedure php_callback(const _listener: variant; const _fd: variant; const _address: variant; const _arg: variant); begin end;
function php_getLastSocketErrno(const _socket: variant): integer; begin end;
function php_getLastSocketError(const _socket: variant): string; begin end;
function php_getSocketFd(const _socket: variant): integer; begin end;
function php_getSocketName(const _socket: variant; var _address: string; var _port: variant): boolean; begin end;
function php_setSocketOption(const _socket: variant; const _level: integer; const _optname: integer; const _optval: variant): boolean; begin end;
procedure php_sslRandPoll(); begin end;
function php_fam_cancel_monitor(const _fam: variant; const _fam_monitor: variant): boolean; begin end;
procedure php_fam_close(const _fam: variant); begin end;
function php_fam_monitor_collection(const _fam: variant; const _dirname: string; const _depth: integer; const _mask: string): variant; begin end;
function php_fam_monitor_directory(const _fam: variant; const _dirname: string): variant; begin end;
function php_fam_monitor_file(const _fam: variant; const _filename: string): variant; begin end;
function php_fam_next_event(const _fam: variant): variant; begin end;
function php_fam_open(const _appname: string): variant; begin end;
function php_fam_pending(const _fam: variant): integer; begin end;
function php_fam_resume_monitor(const _fam: variant; const _fam_monitor: variant): boolean; begin end;
function php_fam_suspend_monitor(const _fam: variant; const _fam_monitor: variant): boolean; begin end;
function php_ftp_alloc(const _ftp_stream: variant; const _filesize: integer; var _result: string): boolean; begin end;
function php_ftp_cdup(const _ftp_stream: variant): boolean; begin end;
function php_ftp_chdir(const _ftp_stream: variant; const _directory: string): boolean; begin end;
function php_ftp_chmod(const _ftp_stream: variant; const _mode: integer; const _filename: string): integer; begin end;
function php_ftp_close(const _ftp_stream: variant): boolean; begin end;
function php_ftp_connect(const _host: string; const _port: integer; const _timeout: integer): variant; begin end;
function php_ftp_delete(const _ftp_stream: variant; const _path: string): boolean; begin end;
function php_ftp_exec(const _ftp_stream: variant; const _command: string): boolean; begin end;
function php_ftp_fget(const _ftp_stream: variant; const _handle: variant; const _remote_file: string; const _mode: integer; const _resumepos: integer): boolean; begin end;
function php_ftp_fput(const _ftp_stream: variant; const _remote_file: string; const _handle: variant; const _mode: integer; const _startpos: integer): boolean; begin end;
function php_ftp_get_option(const _ftp_stream: variant; const _option: integer): variant; begin end;
function php_ftp_get(const _ftp_stream: variant; const _local_file: string; const _remote_file: string; const _mode: integer; const _resumepos: integer): boolean; begin end;
function php_ftp_login(const _ftp_stream: variant; const _username: string; const _password: string): boolean; begin end;
function php_ftp_mdtm(const _ftp_stream: variant; const _remote_file: string): integer; begin end;
function php_ftp_mkdir(const _ftp_stream: variant; const _directory: string): string; begin end;
function php_ftp_nb_continue(const _ftp_stream: variant): integer; begin end;
function php_ftp_nb_fget(const _ftp_stream: variant; const _handle: variant; const _remote_file: string; const _mode: integer; const _resumepos: integer): integer; begin end;
function php_ftp_nb_fput(const _ftp_stream: variant; const _remote_file: string; const _handle: variant; const _mode: integer; const _startpos: integer): integer; begin end;
function php_ftp_nb_get(const _ftp_stream: variant; const _local_file: string; const _remote_file: string; const _mode: integer; const _resumepos: integer): integer; begin end;
function php_ftp_nb_put(const _ftp_stream: variant; const _remote_file: string; const _local_file: string; const _mode: integer; const _startpos: integer): integer; begin end;
function php_ftp_nlist(const _ftp_stream: variant; const _directory: string): variant; begin end;
function php_ftp_pasv(const _ftp_stream: variant; const _pasv: boolean): boolean; begin end;
function php_ftp_put(const _ftp_stream: variant; const _remote_file: string; const _local_file: string; const _mode: integer; const _startpos: integer): boolean; begin end;
function php_ftp_pwd(const _ftp_stream: variant): string; begin end;
function php_ftp_raw(const _ftp_stream: variant; const _command: string): variant; begin end;
function php_ftp_rawlist(const _ftp_stream: variant; const _directory: string; const _recursive: boolean): variant; begin end;
function php_ftp_rename(const _ftp_stream: variant; const _oldname: string; const _newname: string): boolean; begin end;
function php_ftp_rmdir(const _ftp_stream: variant; const _directory: string): boolean; begin end;
function php_ftp_set_option(const _ftp_stream: variant; const _option: integer; const _value: variant): boolean; begin end;
function php_ftp_site(const _ftp_stream: variant; const _command: string): boolean; begin end;
function php_ftp_size(const _ftp_stream: variant; const _remote_file: string): integer; begin end;
function php_ftp_ssl_connect(const _host: string; const _port: integer; const _timeout: integer): variant; begin end;
function php_ftp_systype(const _ftp_stream: variant): string; begin end;
function php_addOptions(const _options: integer): boolean; begin end;
function php_addServer(const _host: string; const _port: integer): boolean; begin end;
function php_addServers(const _servers: string): boolean; begin end;
function php_clearCallbacks(): boolean; begin end;
function php_context(): string; begin end;
function php_data(): string; begin end;
function php_do(const _function_name: string; const _workload: string; const _unique: string): string; begin end;
function php_doBackground(const _function_name: string; const _workload: string; const _unique: string): string; begin end;
function php_doHigh(const _function_name: string; const _workload: string; const _unique: string): string; begin end;
function php_doHighBackground(const _function_name: string; const _workload: string; const _unique: string): string; begin end;
function php_doJobHandle(): string; begin end;
function php_doLow(const _function_name: string; const _workload: string; const _unique: string): string; begin end;
function php_doLowBackground(const _function_name: string; const _workload: string; const _unique: string): string; begin end;
function php_doNormal(const _function_name: string; const _workload: string; const _unique: string): string; begin end;
function php_doStatus(): variant; begin end;
function php_echo(const _workload: string): boolean; begin end;
function php_error(): string; begin end;
function php_getErrno(): integer; begin end;
function php_jobStatus(const _job_handle: string): variant; begin end;
function php_ping(const _workload: string): boolean; begin end;
function php_removeOptions(const _options: integer): boolean; begin end;
function php_returnCode(): integer; begin end;
function php_runTasks(): boolean; begin end;
procedure php_setClientCallback(const _callback: variant); begin end;
function php_setCompleteCallback(const _callback: variant): boolean; begin end;
function php_setContext(const _context: string): boolean; begin end;
function php_setCreatedCallback(const _callback: string): boolean; begin end;
function php_setData(const _data: string): boolean; begin end;
function php_setDataCallback(const _callback: variant): boolean; begin end;
function php_setExceptionCallback(const _callback: variant): boolean; begin end;
function php_setFailCallback(const _callback: variant): boolean; begin end;
function php_setOptions(const _options: integer): boolean; begin end;
function php_setStatusCallback(const _callback: variant): boolean; begin end;
function php_setWarningCallback(const _callback: variant): boolean; begin end;
function php_setWorkloadCallback(const _callback: variant): boolean; begin end;
function php_timeout(): integer; begin end;
function php_complete(const _result: string): boolean; begin end;
function php_data(const _data: string): boolean; begin end;
function php_exception(const _exception: string): boolean; begin end;
function php_fail(): boolean; begin end;
function php_functionName(): string; begin end;
function php_handle(): string; begin end;
function php_sendComplete(const _result: string): boolean; begin end;
function php_sendData(const _data: string): boolean; begin end;
function php_sendException(const _exception: string): boolean; begin end;
function php_sendFail(): boolean; begin end;
function php_sendStatus(const _numerator: integer; const _denominator: integer): boolean; begin end;
function php_sendWarning(const _warning: string): boolean; begin end;
function php_setReturn(const _gearman_return_t: integer): boolean; begin end;
function php_status(const _numerator: integer; const _denominator: integer): boolean; begin end;
function php_unique(): string; begin end;
function php_warning(const _warning: string): boolean; begin end;
function php_workload(): string; begin end;
function php_workloadSize(): integer; begin end;
function php_dataSize(): integer; begin end;
function php_function(): string; begin end;
function php_isKnown(): boolean; begin end;
function php_jobHandle(): string; begin end;
function php_recvData(const _data_len: integer): variant; begin end;
function php_sendWorkload(const _data: string): integer; begin end;
function php_taskDenominator(): integer; begin end;
function php_taskNumerator(): integer; begin end;
function php_uuid(): string; begin end;
function php_addFunction(const _function_name: string; const _function: variant; var _context: variant; const _timeout: integer): boolean; begin end;
procedure php_clone(); begin end;
function php_options(): integer; begin end;
function php_register(const _function_name: string; const _timeout: integer): boolean; begin end;
function php_setId(const _id: string): boolean; begin end;
function php_unregister(const _function_name: string): boolean; begin end;
function php_unregisterAll(): boolean; begin end;
function php_wait(): boolean; begin end;
function php_work(): boolean; begin end;
function php_gopher_parsedir(const _dirent: string): variant; begin end;
function php_gupnp_context_get_host_ip(const _context: variant): string; begin end;
function php_gupnp_context_get_port(const _context: variant): integer; begin end;
function php_gupnp_context_get_subscription_timeout(const _context: variant): integer; begin end;
function php_gupnp_context_host_path(const _context: variant; const _local_path: string; const _server_path: string): boolean; begin end;
function php_gupnp_context_new(const _host_ip: string; const _port: integer): variant; begin end;
procedure php_gupnp_context_set_subscription_timeout(const _context: variant; const _timeout: integer); begin end;
function php_gupnp_context_timeout_add(const _context: variant; const _timeout: integer; const _callback: variant; const _arg: variant): boolean; begin end;
function php_gupnp_context_unhost_path(const _context: variant; const _server_path: string): boolean; begin end;
function php_gupnp_control_point_browse_start(const _cpoint: variant): boolean; begin end;
function php_gupnp_control_point_browse_stop(const _cpoint: variant): boolean; begin end;
function php_gupnp_control_point_callback_set(const _cpoint: variant; const _signal: integer; const _callback: variant; const _arg: variant): boolean; begin end;
function php_gupnp_control_point_new(const _context: variant; const _target: string): variant; begin end;
function php_gupnp_device_action_callback_set(const _root_device: variant; const _signal: integer; const _action_name: string; const _callback: variant; const _arg: variant): boolean; begin end;
function php_gupnp_device_info_get_service(const _root_device: variant; const _type: string): variant; begin end;
function php_gupnp_device_info_get(const _root_device: variant): variant; begin end;
function php_gupnp_root_device_get_available(const _root_device: variant): boolean; begin end;
function php_gupnp_root_device_get_relative_location(const _root_device: variant): string; begin end;
function php_gupnp_root_device_new(const _context: variant; const _location: string; const _description_dir: string): variant; begin end;
function php_gupnp_root_device_set_available(const _root_device: variant; const _available: boolean): boolean; begin end;
function php_gupnp_root_device_start(const _root_device: variant): boolean; begin end;
function php_gupnp_root_device_stop(const _root_device: variant): boolean; begin end;
function php_gupnp_service_action_get(const _action: variant; const _name: string; const _type: integer): variant; begin end;
function php_gupnp_service_action_return_error(const _action: variant; const _error_code: integer; const _error_description: string): boolean; begin end;
function php_gupnp_service_action_return(const _action: variant): boolean; begin end;
function php_gupnp_service_action_set(const _action: variant; const _name: string; const _type: integer; const _value: variant): boolean; begin end;
function php_gupnp_service_freeze_notify(const _service: variant): boolean; begin end;
function php_gupnp_service_info_get_introspection(const _proxy: variant; const _callback: variant; const _arg: variant): variant; begin end;
function php_gupnp_service_info_get(const _proxy: variant): variant; begin end;
function php_gupnp_service_introspection_get_state_variable(const _introspection: variant; const _variable_name: string): variant; begin end;
function php_gupnp_service_notify(const _service: variant; const _name: string; const _type: integer; const _value: variant): boolean; begin end;
function php_gupnp_service_proxy_action_get(const _proxy: variant; const _action: string; const _name: string; const _type: integer): variant; begin end;
function php_gupnp_service_proxy_action_set(const _proxy: variant; const _action: string; const _name: string; const _value: variant; const _type: integer): boolean; begin end;
function php_gupnp_service_proxy_add_notify(const _proxy: variant; const _value: string; const _type: integer; const _callback: variant; const _arg: variant): boolean; begin end;
function php_gupnp_service_proxy_callback_set(const _proxy: variant; const _signal: integer; const _callback: variant; const _arg: variant): boolean; begin end;
function php_gupnp_service_proxy_get_subscribed(const _proxy: variant): boolean; begin end;
function php_gupnp_service_proxy_remove_notify(const _proxy: variant; const _value: string): boolean; begin end;
function php_gupnp_service_proxy_send_action(const _proxy: variant; const _action: string; const _in_params: variant; const _out_params: variant): variant; begin end;
function php_gupnp_service_proxy_set_subscribed(const _proxy: variant; const _subscribed: boolean): boolean; begin end;
function php_gupnp_service_thaw_notify(const _service: variant): boolean; begin end;
function php_ldap_8859_to_t61(const _value: string): string; begin end;
function php_ldap_add(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean; begin end;
function php_ldap_bind(const _link_identifier: variant; const _bind_rdn: string; const _bind_password: string): boolean; begin end;
function php_ldap_compare(const _link_identifier: variant; const _dn: string; const _attribute: string; const _value: string): variant; begin end;
function php_ldap_connect(const _host: string; const _port: integer): variant; begin end;
function php_ldap_control_paged_result_response(const _link: variant; const _result: variant; var _cookie: string; var _estimated: integer): boolean; begin end;
function php_ldap_control_paged_result(const _link: variant; const _pagesize: integer; const _iscritical: boolean; const _cookie: string): boolean; begin end;
function php_ldap_count_entries(const _link_identifier: variant; const _result_identifier: variant): integer; begin end;
function php_ldap_delete(const _link_identifier: variant; const _dn: string): boolean; begin end;
function php_ldap_dn2ufn(const _dn: string): string; begin end;
function php_ldap_err2str(const _errno: integer): string; begin end;
function php_ldap_errno(const _link_identifier: variant): integer; begin end;
function php_ldap_error(const _link_identifier: variant): string; begin end;
function php_ldap_escape(const _value: string; const _ignore: string; const _flags: integer): string; begin end;
function php_ldap_explode_dn(const _dn: string; const _with_attrib: integer): variant; begin end;
function php_ldap_first_attribute(const _link_identifier: variant; const _result_entry_identifier: variant): string; begin end;
function php_ldap_first_entry(const _link_identifier: variant; const _result_identifier: variant): variant; begin end;
function php_ldap_first_reference(const _link: variant; const _result: variant): variant; begin end;
function php_ldap_free_result(const _result_identifier: variant): boolean; begin end;
function php_ldap_get_attributes(const _link_identifier: variant; const _result_entry_identifier: variant): variant; begin end;
function php_ldap_get_dn(const _link_identifier: variant; const _result_entry_identifier: variant): string; begin end;
function php_ldap_get_entries(const _link_identifier: variant; const _result_identifier: variant): variant; begin end;
function php_ldap_get_option(const _link_identifier: variant; const _option: integer; var _retval: variant): boolean; begin end;
function php_ldap_get_values_len(const _link_identifier: variant; const _result_entry_identifier: variant; const _attribute: string): variant; begin end;
function php_ldap_get_values(const _link_identifier: variant; const _result_entry_identifier: variant; const _attribute: string): variant; begin end;
function php_ldap_list(const _link_identifier: variant; const _base_dn: string; const _filter: string; const _attributes: variant; const _attrsonly: integer; const _sizelimit: integer; const _timelimit: integer; const _deref: integer): variant; begin end;
function php_ldap_mod_add(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean; begin end;
function php_ldap_mod_del(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean; begin end;
function php_ldap_mod_replace(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean; begin end;
function php_ldap_modify_batch(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean; begin end;
function php_ldap_modify(const _link_identifier: variant; const _dn: string; const _entry: variant): boolean; begin end;
function php_ldap_next_attribute(const _link_identifier: variant; const _result_entry_identifier: variant): string; begin end;
function php_ldap_next_entry(const _link_identifier: variant; const _result_entry_identifier: variant): variant; begin end;
function php_ldap_next_reference(const _link: variant; const _entry: variant): variant; begin end;
function php_ldap_parse_reference(const _link: variant; const _entry: variant; var _referrals: variant): boolean; begin end;
function php_ldap_parse_result(const _link: variant; const _result: variant; var _errcode: integer; var _matcheddn: string; var _errmsg: string; var _referrals: variant): boolean; begin end;
function php_ldap_read(const _link_identifier: variant; const _base_dn: string; const _filter: string; const _attributes: variant; const _attrsonly: integer; const _sizelimit: integer; const _timelimit: integer; const _deref: integer): variant; begin end;
function php_ldap_rename(const _link_identifier: variant; const _dn: string; const _newrdn: string; const _newparent: string; const _deleteoldrdn: boolean): boolean; begin end;
function php_ldap_sasl_bind(const _link: variant; const _binddn: string; const _password: string; const _sasl_mech: string; const _sasl_realm: string; const _sasl_authc_id: string; const _sasl_authz_id: string; const _props: string): boolean; begin end;
function php_ldap_search(const _link_identifier: variant; const _base_dn: string; const _filter: string; const _attributes: variant; const _attrsonly: integer; const _sizelimit: integer; const _timelimit: integer; const _deref: integer): variant; begin end;
function php_ldap_set_option(const _link_identifier: variant; const _option: integer; const _newval: variant): boolean; begin end;
function php_ldap_set_rebind_proc(const _link: variant; const _callback: variant): boolean; begin end;
function php_ldap_sort(const _link: variant; const _result: variant; const _sortfilter: string): boolean; begin end;
function php_ldap_start_tls(const _link: variant): boolean; begin end;
function php_ldap_t61_to_8859(const _value: string): string; begin end;
function php_ldap_unbind(const _link_identifier: variant): boolean; begin end;
function php_add(const _key: string; const _var: variant; const _flag: integer; const _expire: integer): boolean; begin end;
function php_addServer(const _host: string; const _port: integer; const _persistent: boolean; const _weight: integer; const _timeout: integer; const _retry_interval: integer; const _status: boolean; const _failure_callback: variant; const _timeoutms: integer): boolean; begin end;
function php_connect(const _host: string; const _port: integer; const _timeout: integer): boolean; begin end;
function php_decrement(const _key: string; const _value: integer): integer; begin end;
function php_delete(const _key: string; const _timeout: integer): boolean; begin end;
function php_getExtendedStats(const _type: string; const _slabid: integer; const _limit: integer): variant; begin end;
function php_getServerStatus(const _host: string; const _port: integer): integer; begin end;
function php_getStats(const _type: string; const _slabid: integer; const _limit: integer): variant; begin end;
function php_increment(const _key: string; const _value: integer): integer; begin end;
function php_pconnect(const _host: string; const _port: integer; const _timeout: integer): variant; begin end;
function php_replace(const _key: string; const _var: variant; const _flag: integer; const _expire: integer): boolean; begin end;
function php_set(const _key: string; const _var: variant; const _flag: integer; const _expire: integer): boolean; begin end;
function php_setCompressThreshold(const _threshold: integer; const _min_savings: extended): boolean; begin end;
function php_setServerParams(const _host: string; const _port: integer; const _timeout: integer; const _retry_interval: integer; const _status: boolean; const _failure_callback: variant): boolean; begin end;
function php_memcache_debug(const _on_off: boolean): boolean; begin end;
function php_addByKey(const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean; begin end;
function php_addServer(const _host: string; const _port: integer; const _weight: integer): boolean; begin end;
function php_addServers(const _servers: variant): boolean; begin end;
function php_append(const _key: string; const _value: string): boolean; begin end;
function php_appendByKey(const _server_key: string; const _key: string; const _value: string): boolean; begin end;
function php_cas(const _cas_token: extended; const _key: string; const _value: variant; const _expiration: integer): boolean; begin end;
function php_casByKey(const _cas_token: extended; const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean; begin end;
function php_decrement(const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer; begin end;
function php_decrementByKey(const _server_key: string; const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer; begin end;
function php_deleteByKey(const _server_key: string; const _key: string; const _time: integer): boolean; begin end;
function php_deleteMulti(const _keys: variant; const _time: integer): boolean; begin end;
function php_deleteMultiByKey(const _server_key: string; const _keys: variant; const _time: integer): boolean; begin end;
function php_fetchAll(): variant; begin end;
function php_get(const _key: string; const _cache_cb: variant; var _cas_token: extended): variant; begin end;
function php_getAllKeys(): variant; begin end;
function php_getByKey(const _server_key: string; const _key: string; const _cache_cb: variant; var _cas_token: extended): variant; begin end;
function php_getDelayed(const _keys: variant; const _with_cas: boolean; const _value_cb: variant): boolean; begin end;
function php_getDelayedByKey(const _server_key: string; const _keys: variant; const _with_cas: boolean; const _value_cb: variant): boolean; begin end;
function php_getMulti(const _keys: variant; var _cas_tokens: variant; const _flags: integer): variant; begin end;
function php_getMultiByKey(const _server_key: string; const _keys: variant; var _cas_tokens: string; const _flags: integer): variant; begin end;
function php_getOption(const _option: integer): variant; begin end;
function php_getResultCode(): integer; begin end;
function php_getResultMessage(): string; begin end;
function php_getServerByKey(const _server_key: string): variant; begin end;
function php_getServerList(): variant; begin end;
function php_getStats(): variant; begin end;
function php_increment(const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer; begin end;
function php_incrementByKey(const _server_key: string; const _key: string; const _offset: integer; const _initial_value: integer; const _expiry: integer): integer; begin end;
function php_isPersistent(): boolean; begin end;
function php_isPristine(): boolean; begin end;
function php_prepend(const _key: string; const _value: string): boolean; begin end;
function php_prependByKey(const _server_key: string; const _key: string; const _value: string): boolean; begin end;
function php_quit(): boolean; begin end;
function php_replace(const _key: string; const _value: variant; const _expiration: integer): boolean; begin end;
function php_replaceByKey(const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean; begin end;
function php_resetServerList(): boolean; begin end;
function php_set(const _key: string; const _value: variant; const _expiration: integer): boolean; begin end;
function php_setByKey(const _server_key: string; const _key: string; const _value: variant; const _expiration: integer): boolean; begin end;
function php_setMulti(const _items: variant; const _expiration: integer): boolean; begin end;
function php_setMultiByKey(const _server_key: string; const _items: variant; const _expiration: integer): boolean; begin end;
function php_setOption(const _option: integer; const _value: variant): boolean; begin end;
function php_setOptions(const _options: variant): boolean; begin end;
procedure php_setSaslAuthData(const _username: string; const _password: string); begin end;
function php_touchByKey(const _server_key: string; const _key: string; const _expiration: integer): boolean; begin end;
procedure php_mqseries_back(const _hconn: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_begin(const _hconn: variant; const _beginOptions: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_close(const _hconn: variant; const _hobj: variant; const _options: integer; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_cmit(const _hconn: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_conn(const _qManagerName: string; var _hconn: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_connx(const _qManagerName: string; var _connOptions: variant; var _hconn: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_disc(const _hconn: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_get(const _hConn: variant; const _hObj: variant; var _md: variant; var _gmo: variant; var _bufferLength: integer; var _msg: string; var _data_length: integer; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_inq(const _hconn: variant; const _hobj: variant; const _selectorCount: integer; const _selectors: variant; const _intAttrCount: integer; var _intAttr: variant; const _charAttrLength: integer; var _charAttr: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_open(const _hconn: variant; var _objDesc: variant; const _option: integer; var _hobj: variant; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_put1(const _hconn: variant; var _objDesc: variant; var _msgDesc: variant; var _pmo: variant; const _buffer: string; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_put(const _hConn: variant; const _hObj: variant; var _md: variant; var _pmo: variant; const _message: string; var _compCode: variant; var _reason: variant); begin end;
procedure php_mqseries_set(const _hconn: variant; const _hobj: variant; const _selectorcount: integer; const _selectors: variant; const _intattrcount: integer; const _intattrs: variant; const _charattrlength: integer; const _charattrs: variant; var _compCode: variant; var _reason: variant); begin end;
function php_mqseries_strerror(const _reason: integer): string; begin end;
function php_checkdnsrr(const _host: string; const _type: string): boolean; begin end;
function php_closelog(): boolean; begin end;
procedure php_define_syslog_variables(); begin end;
function php_dns_get_record(const _hostname: string; const _type: integer; var _authns: variant; var _addtl: variant; var _raw: boolean): variant; begin end;
function php_fsockopen(const _hostname: string; const _port: integer; var _errno: integer; var _errstr: string; const _timeout: extended): variant; begin end;
function php_gethostbyaddr(const _ip_address: string): string; begin end;
function php_gethostbyname(const _hostname: string): string; begin end;
function php_gethostbynamel(const _hostname: string): variant; begin end;
function php_getmxrr(const _hostname: string; var _mxhosts: variant; var _weight: variant): boolean; begin end;
function php_getprotobyname(const _name: string): integer; begin end;
function php_getprotobynumber(const _number: integer): string; begin end;
function php_getservbyname(const _service: string; const _protocol: string): integer; begin end;
function php_getservbyport(const _port: integer; const _protocol: string): string; begin end;
function php_header_register_callback(const _callback: variant): boolean; begin end;
procedure php_header_remove(const _name: string); begin end;
procedure php_header(const _string: string; const _replace: boolean; const _http_response_code: integer); begin end;
function php_headers_list(): variant; begin end;
function php_headers_sent(var _file: string; var _line: integer): boolean; begin end;
function php_http_response_code(const _response_code: integer): variant; begin end;
function php_inet_ntop(const _in_addr: string): string; begin end;
function php_inet_pton(const _address: string): string; begin end;
function php_ip2long(const _ip_address: string): integer; begin end;
function php_long2ip(const _proper_address: string): string; begin end;
function php_openlog(const _ident: string; const _option: integer; const _facility: integer): boolean; begin end;
function php_pfsockopen(const _hostname: string; const _port: integer; var _errno: integer; var _errstr: string; const _timeout: extended): variant; begin end;
function php_setcookie(const _name: string; const _value: string; const _expire: integer; const _path: string; const _domain: string; const _secure: boolean; const _httponly: boolean): boolean; begin end;
function php_setrawcookie(const _name: string; const _value: string; const _expire: integer; const _path: string; const _domain: string; const _secure: boolean; const _httponly: boolean): boolean; begin end;
function php_syslog(const _priority: integer; const _message: string): boolean; begin end;
function php_rrd_create(const _filename: string; const _options: variant): boolean; begin end;
function php_rrd_error(): string; begin end;
function php_rrd_fetch(const _filename: string; const _options: variant): variant; begin end;
function php_rrd_first(const _file: string; const _raaindex: integer): integer; begin end;
function php_rrd_graph(const _filename: string; const _options: variant): variant; begin end;
function php_rrd_info(const _filename: string): variant; begin end;
function php_rrd_last(const _filename: string): integer; begin end;
function php_rrd_lastupdate(const _filename: string): variant; begin end;
function php_rrd_restore(const _xml_file: string; const _rrd_file: string; const _options: variant): boolean; begin end;
function php_rrd_tune(const _filename: string; const _options: variant): boolean; begin end;
function php_rrd_update(const _filename: string; const _options: variant): boolean; begin end;
function php_rrd_version(): string; begin end;
function php_rrd_xport(const _options: variant): variant; begin end;
procedure php_rrdc_disconnect(); begin end;
procedure php_addArchive(const _description: string); begin end;
procedure php_addDataSource(const _description: string); begin end;
function php_saveVerbose(): variant; begin end;
function php_update(const _values: variant; const _time: string): boolean; begin end;
function php_snmp_get_quick_print(): boolean; begin end;
function php_snmp_get_valueretrieval(): integer; begin end;
function php_snmp_read_mib(const _filename: string): boolean; begin end;
function php_snmp_set_enum_print(const _enum_print: integer): boolean; begin end;
procedure php_snmp_set_oid_numeric_print(const _oid_format: integer); begin end;
function php_snmp_set_oid_output_format(const _oid_format: integer): boolean; begin end;
function php_snmp_set_quick_print(const _quick_print: boolean): boolean; begin end;
function php_snmp_set_valueretrieval(const _method: integer): boolean; begin end;
function php_snmp2_get(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): string; begin end;
function php_snmp2_getnext(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): string; begin end;
function php_snmp2_real_walk(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): variant; begin end;
function php_snmp2_set(const _host: string; const _community: string; const _object_id: string; const _type: string; const _value: string; const _timeout: string; const _retries: string): boolean; begin end;
function php_snmp2_walk(const _host: string; const _community: string; const _object_id: string; const _timeout: string; const _retries: string): variant; begin end;
function php_snmp3_get(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): string; begin end;
function php_snmp3_getnext(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): string; begin end;
function php_snmp3_real_walk(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): variant; begin end;
function php_snmp3_set(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _type: string; const _value: string; const _timeout: integer; const _retries: integer): boolean; begin end;
function php_snmp3_walk(const _host: string; const _sec_name: string; const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _object_id: string; const _timeout: string; const _retries: string): variant; begin end;
function php_snmpget(const _hostname: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): string; begin end;
function php_snmpgetnext(const _host: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): string; begin end;
function php_snmprealwalk(const _host: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): variant; begin end;
function php_snmpset(const _host: string; const _community: string; const _object_id: string; const _type: string; const _value: variant; const _timeout: integer; const _retries: integer): boolean; begin end;
function php_snmpwalk(const _hostname: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): variant; begin end;
function php_snmpwalkoid(const _hostname: string; const _community: string; const _object_id: string; const _timeout: integer; const _retries: integer): variant; begin end;
function php_get(const _object_id: variant; const _preserve_keys: boolean): variant; begin end;
function php_getError(): string; begin end;
function php_getnext(const _object_id: variant): variant; begin end;
function php_set(const _object_id: variant; const _type: variant; const _value: variant): boolean; begin end;
function php_setSecurity(const _sec_level: string; const _auth_protocol: string; const _auth_passphrase: string; const _priv_protocol: string; const _priv_passphrase: string; const _contextName: string; const _contextEngineID: string): boolean; begin end;
function php_walk(const _object_id: string; const _suffix_as_key: boolean; const _max_repetitions: integer; const _non_repeaters: integer): variant; begin end;
function php_socket_accept(const _socket: variant): variant; begin end;
function php_socket_bind(const _socket: variant; const _address: string; const _port: integer): boolean; begin end;
procedure php_socket_clear_error(const _socket: variant); begin end;
procedure php_socket_close(const _socket: variant); begin end;
function php_socket_cmsg_space(const _level: integer; const _type: integer): integer; begin end;
function php_socket_connect(const _socket: variant; const _address: string; const _port: integer): boolean; begin end;
function php_socket_create_listen(const _port: integer; const _backlog: integer): variant; begin end;
function php_socket_create_pair(const _domain: integer; const _type: integer; const _protocol: integer; var _fd: variant): boolean; begin end;
function php_socket_create(const _domain: integer; const _type: integer; const _protocol: integer): variant; begin end;
function php_socket_get_option(const _socket: variant; const _level: integer; const _optname: integer): variant; begin end;
function php_socket_getpeername(const _socket: variant; var _address: string; var _port: integer): boolean; begin end;
function php_socket_getsockname(const _socket: variant; var _addr: string; var _port: integer): boolean; begin end;
function php_socket_import_stream(const _stream: variant): variant; begin end;
function php_socket_last_error(const _socket: variant): integer; begin end;
function php_socket_listen(const _socket: variant; const _backlog: integer): boolean; begin end;
function php_socket_read(const _socket: variant; const _length: integer; const _type: integer): string; begin end;
function php_socket_recv(const _socket: variant; var _buf: string; const _len: integer; const _flags: integer): integer; begin end;
function php_socket_recvfrom(const _socket: variant; var _buf: string; const _len: integer; const _flags: integer; var _name: string; var _port: integer): integer; begin end;
function php_socket_recvmsg(const _socket: variant; const _message: string; const _flags: integer): integer; begin end;
function php_socket_select(var _read: variant; var _write: variant; var _except: variant; const _tv_sec: integer; const _tv_usec: integer): integer; begin end;
function php_socket_send(const _socket: variant; const _buf: string; const _len: integer; const _flags: integer): integer; begin end;
function php_socket_sendmsg(const _socket: variant; const _message: variant; const _flags: integer): integer; begin end;
function php_socket_sendto(const _socket: variant; const _buf: string; const _len: integer; const _flags: integer; const _addr: string; const _port: integer): integer; begin end;
function php_socket_set_block(const _socket: variant): boolean; begin end;
function php_socket_set_nonblock(const _socket: variant): boolean; begin end;
function php_socket_set_option(const _socket: variant; const _level: integer; const _optname: integer; const _optval: variant): boolean; begin end;
function php_socket_shutdown(const _socket: variant; const _how: integer): boolean; begin end;
function php_socket_strerror(const _errno: integer): string; begin end;
function php_socket_write(const _socket: variant; const _buffer: string; const _length: integer): integer; begin end;
function php_ssh2_auth_agent(const _session: variant; const _username: string): boolean; begin end;
function php_ssh2_auth_hostbased_file(const _session: variant; const _username: string; const _hostname: string; const _pubkeyfile: string; const _privkeyfile: string; const _passphrase: string; const _local_username: string): boolean; begin end;
function php_ssh2_auth_none(const _session: variant; const _username: string): variant; begin end;
function php_ssh2_auth_password(const _session: variant; const _username: string; const _password: string): boolean; begin end;
function php_ssh2_auth_pubkey_file(const _session: variant; const _username: string; const _pubkeyfile: string; const _privkeyfile: string; const _passphrase: string): boolean; begin end;
function php_ssh2_connect(const _host: string; const _port: integer; const _methods: variant; const _callbacks: variant): variant; begin end;
function php_ssh2_exec(const _session: variant; const _command: string; const _pty: string; const _env: variant; const _width: integer; const _height: integer; const _width_height_type: integer): variant; begin end;
function php_ssh2_fetch_stream(const _channel: variant; const _streamid: integer): variant; begin end;
function php_ssh2_fingerprint(const _session: variant; const _flags: integer): string; begin end;
function php_ssh2_methods_negotiated(const _session: variant): variant; begin end;
function php_ssh2_publickey_add(const _pkey: variant; const _algoname: string; const _blob: string; const _overwrite: boolean; const _attributes: variant): boolean; begin end;
function php_ssh2_publickey_init(const _session: variant): variant; begin end;
function php_ssh2_publickey_list(const _pkey: variant): variant; begin end;
function php_ssh2_publickey_remove(const _pkey: variant; const _algoname: string; const _blob: string): boolean; begin end;
function php_ssh2_scp_recv(const _session: variant; const _remote_file: string; const _local_file: string): boolean; begin end;
function php_ssh2_scp_send(const _session: variant; const _local_file: string; const _remote_file: string; const _create_mode: integer): boolean; begin end;
function php_ssh2_sftp_chmod(const _sftp: variant; const _filename: string; const _mode: integer): boolean; begin end;
function php_ssh2_sftp_lstat(const _sftp: variant; const _path: string): variant; begin end;
function php_ssh2_sftp_mkdir(const _sftp: variant; const _dirname: string; const _mode: integer; const _recursive: boolean): boolean; begin end;
function php_ssh2_sftp_readlink(const _sftp: variant; const _link: string): string; begin end;
function php_ssh2_sftp_realpath(const _sftp: variant; const _filename: string): string; begin end;
function php_ssh2_sftp_rename(const _sftp: variant; const _from: string; const _to: string): boolean; begin end;
function php_ssh2_sftp_rmdir(const _sftp: variant; const _dirname: string): boolean; begin end;
function php_ssh2_sftp_stat(const _sftp: variant; const _path: string): variant; begin end;
function php_ssh2_sftp_symlink(const _sftp: variant; const _target: string; const _link: string): boolean; begin end;
function php_ssh2_sftp_unlink(const _sftp: variant; const _filename: string): boolean; begin end;
function php_ssh2_sftp(const _session: variant): variant; begin end;
function php_ssh2_shell(const _session: variant; const _term_type: string; const _env: variant; const _width: integer; const _height: integer; const _width_height_type: integer): variant; begin end;
function php_ssh2_tunnel(const _session: variant; const _host: string; const _port: integer): variant; begin end;
function php_stomp_connect_error(): string; begin end;
function php_stomp_version(): string; begin end;
function php_abort(const _transaction_id: string; const _headers: variant): boolean; begin end;
function php_ack(const _msg: variant; const _headers: variant): boolean; begin end;
function php_begin(const _transaction_id: string; const _headers: variant): boolean; begin end;
function php_commit(const _transaction_id: string; const _headers: variant): boolean; begin end;
function php_getReadTimeout(): variant; begin end;
function php_getSessionId(): string; begin end;
function php_hasFrame(): boolean; begin end;
function php_send(const _destination: string; const _msg: variant; const _headers: variant): boolean; begin end;
procedure php_setReadTimeout(const _seconds: integer; const _microseconds: integer); begin end;
function php_subscribe(const _destination: string; const _headers: variant): boolean; begin end;
function php_unsubscribe(const _destination: string; const _headers: variant): boolean; begin end;
function php_stomp_abort(const _link: variant; const _transaction_id: string; const _headers: variant): boolean; begin end;
function php_stomp_ack(const _link: variant; const _msg: variant; const _headers: variant): boolean; begin end;
function php_stomp_begin(const _link: variant; const _transaction_id: string; const _headers: variant): boolean; begin end;
function php_stomp_commit(const _link: variant; const _transaction_id: string; const _headers: variant): boolean; begin end;
function php_stomp_connect(const _broker: string): variant; begin end;
function php_stomp_close(const _link: variant): boolean; begin end;
function php_stomp_error(const _link: variant): string; begin end;
function php_stomp_get_read_timeout(const _link: variant): variant; begin end;
function php_stomp_get_session_id(const _link: variant): string; begin end;
function php_stomp_has_frame(const _link: variant): boolean; begin end;
function php_stomp_read_frame(const _link: variant): variant; begin end;
function php_stomp_send(const _link: variant; const _destination: string; const _msg: variant; const _headers: variant): boolean; begin end;
procedure php_stomp_set_read_timeout(const _link: variant; const _seconds: integer; const _microseconds: integer); begin end;
function php_stomp_subscribe(const _link: variant; const _destination: string; const _headers: variant): boolean; begin end;
function php_stomp_unsubscribe(const _link: variant; const _destination: string; const _headers: variant): boolean; begin end;
function php_getDetails(): string; begin end;
function php_getOptions(): variant; begin end;
function php_checkProbabilityModel(): boolean; begin end;
function php_getLabels(): variant; begin end;
function php_getNrClass(): integer; begin end;
function php_getSvmType(): integer; begin end;
function php_getSvrProbability(): extended; begin end;
function php_load(const _filename: string): boolean; begin end;
function php_predict_probability(const _data: variant): extended; begin end;
function php_predict(const _data: variant): extended; begin end;
function php_svn_add(const _path: string; const _recursive: boolean; const _force: boolean): boolean; begin end;
function php_svn_auth_get_parameter(const _key: string): string; begin end;
procedure php_svn_auth_set_parameter(const _key: string; const _value: string); begin end;
function php_svn_blame(const _repository_url: string; const _revision_no: integer): variant; begin end;
function php_svn_cat(const _repos_url: string; const _revision_no: integer): string; begin end;
function php_svn_checkout(const _repos: string; const _targetpath: string; const _revision: integer; const _flags: integer): boolean; begin end;
function php_svn_cleanup(const _workingdir: string): boolean; begin end;
function php_svn_client_version(): string; begin end;
function php_svn_commit(const _log: string; const _targets: variant; const _recursive: boolean): variant; begin end;
function php_svn_delete(const _path: string; const _force: boolean): boolean; begin end;
function php_svn_diff(const _path1: string; const _rev1: integer; const _path2: string; const _rev2: integer): variant; begin end;
function php_svn_export(const _frompath: string; const _topath: string; const _working_copy: boolean; const _revision_no: integer): boolean; begin end;
function php_svn_fs_abort_txn(const _txn: variant): boolean; begin end;
function php_svn_fs_apply_text(const _root: variant; const _path: string): variant; begin end;
function php_svn_fs_begin_txn2(const _repos: variant; const _rev: integer): variant; begin end;
function php_svn_fs_change_node_prop(const _root: variant; const _path: string; const _name: string; const _value: string): boolean; begin end;
function php_svn_fs_check_path(const _fsroot: variant; const _path: string): integer; begin end;
function php_svn_fs_contents_changed(const _root1: variant; const _path1: string; const _root2: variant; const _path2: string): boolean; begin end;
function php_svn_fs_copy(const _from_root: variant; const _from_path: string; const _to_root: variant; const _to_path: string): boolean; begin end;
function php_svn_fs_delete(const _root: variant; const _path: string): boolean; begin end;
function php_svn_fs_dir_entries(const _fsroot: variant; const _path: string): variant; begin end;
function php_svn_fs_file_contents(const _fsroot: variant; const _path: string): variant; begin end;
function php_svn_fs_file_length(const _fsroot: variant; const _path: string): integer; begin end;
function php_svn_fs_is_dir(const _root: variant; const _path: string): boolean; begin end;
function php_svn_fs_is_file(const _root: variant; const _path: string): boolean; begin end;
function php_svn_fs_make_dir(const _root: variant; const _path: string): boolean; begin end;
function php_svn_fs_make_file(const _root: variant; const _path: string): boolean; begin end;
function php_svn_fs_node_created_rev(const _fsroot: variant; const _path: string): integer; begin end;
function php_svn_fs_node_prop(const _fsroot: variant; const _path: string; const _propname: string): string; begin end;
function php_svn_fs_props_changed(const _root1: variant; const _path1: string; const _root2: variant; const _path2: string): boolean; begin end;
function php_svn_fs_revision_prop(const _fs: variant; const _revnum: integer; const _propname: string): string; begin end;
function php_svn_fs_revision_root(const _fs: variant; const _revnum: integer): variant; begin end;
function php_svn_fs_txn_root(const _txn: variant): variant; begin end;
function php_svn_fs_youngest_rev(const _fs: variant): integer; begin end;
function php_svn_import(const _path: string; const _url: string; const _nonrecursive: boolean): boolean; begin end;
function php_svn_log(const _repos_url: string; const _start_revision: integer; const _end_revision: integer; const _limit: integer; const _flags: integer): variant; begin end;
function php_svn_ls(const _repos_url: string; const _revision_no: integer; const _recurse: boolean; const _peg: boolean): variant; begin end;
function php_svn_mkdir(const _path: string; const _log_message: string): boolean; begin end;
function php_svn_repos_create(const _path: string; const _config: variant; const _fsconfig: variant): variant; begin end;
function php_svn_repos_fs_begin_txn_for_commit(const _repos: variant; const _rev: integer; const _author: string; const _log_msg: string): variant; begin end;
function php_svn_repos_fs_commit_txn(const _txn: variant): integer; begin end;
function php_svn_repos_fs(const _repos: variant): variant; begin end;
function php_svn_repos_hotcopy(const _repospath: string; const _destpath: string; const _cleanlogs: boolean): boolean; begin end;
function php_svn_repos_open(const _path: string): variant; begin end;
function php_svn_repos_recover(const _path: string): boolean; begin end;
function php_svn_revert(const _path: string; const _recursive: boolean): boolean; begin end;
function php_svn_status(const _path: string; const _flags: integer): variant; begin end;
function php_svn_update(const _path: string; const _revno: integer; const _recurse: boolean): integer; begin end;
function php_tcpwrap_check(const _daemon: string; const _address: string; const _user: string; const _nodns: boolean): boolean; begin end;
function php_auth(): boolean; begin end;
function php_ban(const _vcl_regex: string): integer; begin end;
function php_banUrl(const _vcl_regex: string): integer; begin end;
function php_clearPanic(): integer; begin end;
function php_disconnect(): boolean; begin end;
function php_getPanic(): string; begin end;
procedure php_setCompat(const _compat: integer); begin end;
procedure php_setHost(const _host: string); begin end;
procedure php_setIdent(const _ident: string); begin end;
function php_setParam(const _name: string; const _value: variant): integer; begin end;
procedure php_setPort(const _port: integer); begin end;
procedure php_setSecret(const _secret: string); begin end;
function php_getSnapshot(): variant; begin end;
function php_getTagName(const _index: integer): string; begin end;
function php_yaz_addinfo(const _id: variant): string; begin end;
procedure php_yaz_ccl_conf(const _id: variant; const _config: variant); begin end;
function php_yaz_ccl_parse(const _id: variant; const _query: string; var _result: variant): boolean; begin end;
function php_yaz_close(const _id: variant): boolean; begin end;
function php_yaz_connect(const _zurl: string; const _options: variant): variant; begin end;
function php_yaz_database(const _id: variant; const _databases: string): boolean; begin end;
function php_yaz_element(const _id: variant; const _elementset: string): boolean; begin end;
function php_yaz_errno(const _id: variant): integer; begin end;
function php_yaz_error(const _id: variant): string; begin end;
function php_yaz_es_result(const _id: variant): variant; begin end;
procedure php_yaz_es(const _id: variant; const _type: string; const _args: variant); begin end;
function php_yaz_get_option(const _id: variant; const _name: string): string; begin end;
function php_yaz_hits(const _id: variant; var _searchresult: variant): integer; begin end;
procedure php_yaz_itemorder(const _id: variant; const _args: variant); begin end;
function php_yaz_present(const _id: variant): boolean; begin end;
procedure php_yaz_range(const _id: variant; const _start: integer; const _number: integer); begin end;
function php_yaz_record(const _id: variant; const _pos: integer; const _type: string): string; begin end;
function php_yaz_scan_result(const _id: variant; var _result: variant): variant; begin end;
procedure php_yaz_scan(const _id: variant; const _type: string; const _startterm: string; const _flags: variant); begin end;
procedure php_yaz_schema(const _id: variant; const _schema: string); begin end;
function php_yaz_search(const _id: variant; const _type: string; const _query: string): boolean; begin end;
procedure php_yaz_set_option(const _id: variant; const _name: string; const _value: string); begin end;
procedure php_yaz_set_option(const _id: variant; const _options: variant); begin end;
procedure php_yaz_sort(const _id: variant; const _criteria: string); begin end;
procedure php_yaz_syntax(const _id: variant; const _syntax: string); begin end;
function php_yaz_wait(var _options: variant): variant; begin end;
procedure php_yp_all(const _domain: string; const _map: string; const _callback: string); begin end;
function php_yp_cat(const _domain: string; const _map: string): variant; begin end;
function php_yp_err_string(const _errorcode: integer): string; begin end;
function php_yp_errno(): integer; begin end;
function php_yp_first(const _domain: string; const _map: string): variant; begin end;
function php_yp_get_default_domain(): string; begin end;
function php_yp_master(const _domain: string; const _map: string): string; begin end;
function php_yp_match(const _domain: string; const _map: string; const _key: string): string; begin end;
function php_yp_next(const _domain: string; const _map: string; const _key: string): variant; begin end;
function php_yp_order(const _domain: string; const _map: string): integer; begin end;
function php_getEndpoints(): variant; begin end;
function php_getPersistentId(): string; begin end;
function php_getSocketType(): integer; begin end;
function php_getSockOpt(const _key: string): variant; begin end;
function php_recv(const _mode: integer): string; begin end;
function php_recvMulti(const _mode: integer): string; begin end;
function php_add(const _entry: variant; const _type: integer): string; begin end;
function php_poll(var _readable: variant; var _writable: variant; const _timeout: integer): integer; begin end;
function php_udm_add_search_limit(const _agent: variant; const _var: integer; const _val: string): boolean; begin end;
function php_udm_alloc_agent_array(const _databases: variant): variant; begin end;
function php_udm_alloc_agent(const _dbaddr: string; const _dbmode: string): variant; begin end;
function php_udm_api_version(): integer; begin end;
function php_udm_cat_list(const _agent: variant; const _category: string): variant; begin end;
function php_udm_cat_path(const _agent: variant; const _category: string): variant; begin end;
function php_udm_check_charset(const _agent: variant; const _charset: string): boolean; begin end;
function php_udm_clear_search_limits(const _agent: variant): boolean; begin end;
function php_udm_crc32(const _agent: variant; const _str: string): integer; begin end;
function php_udm_errno(const _agent: variant): integer; begin end;
function php_udm_error(const _agent: variant): string; begin end;
function php_udm_find(const _agent: variant; const _query: string): variant; begin end;
function php_udm_free_agent(const _agent: variant): integer; begin end;
function php_udm_free_ispell_data(const _agent: integer): boolean; begin end;
function php_udm_free_res(const _res: variant): boolean; begin end;
function php_udm_get_doc_count(const _agent: variant): integer; begin end;
function php_udm_get_res_field(const _res: variant; const _row: integer; const _field: integer): string; begin end;
function php_udm_get_res_param(const _res: variant; const _param: integer): string; begin end;
function php_udm_hash32(const _agent: variant; const _str: string): integer; begin end;
function php_udm_load_ispell_data(const _agent: variant; const _var: integer; const _val1: string; const _val2: string; const _flag: integer): boolean; begin end;
function php_udm_set_agent_param(const _agent: variant; const _var: integer; const _val: string): boolean; begin end;
function php_solr_get_version(): string; begin end;
function php_escapeQueryChars(const _str: string): string; begin end;
function php_getSolrVersion(): string; begin end;
function php_queryPhrase(const _str: string): string; begin end;
function php_addField(const _fieldName: string; const _fieldValue: string; const _fieldBoostValue: extended): boolean; begin end;
function php_deleteField(const _fieldName: string): boolean; begin end;
function php_fieldExists(const _fieldName: string): boolean; begin end;
function php_getBoost(): extended; begin end;
function php_getFieldBoost(const _fieldName: string): extended; begin end;
function php_getFieldCount(): integer; begin end;
function php_getFieldNames(): variant; begin end;
function php_setBoost(const _documentBoostValue: extended): boolean; begin end;
function php_setFieldBoost(const _fieldName: string; const _fieldBoostValue: extended): boolean; begin end;
function php_sort(const _sortOrderBy: integer; const _sortDirection: integer): boolean; begin end;
function php_addField(const _fieldName: string; const _fieldValue: string): boolean; begin end;
function php_getPropertyNames(): variant; begin end;
procedure php_addDocuments(const _docs: variant; const _overwrite: boolean; const _commitWithin: integer); begin end;
function php_getDebug(): string; begin end;
procedure php_setResponseWriter(const _responseWriter: string); begin end;
function php_setServlet(const _type: integer; const _value: string): boolean; begin end;
procedure php_system(); begin end;
procedure php_threads(); begin end;
function php_getDigestedResponse(): string; begin end;
function php_getHttpStatus(): integer; begin end;
function php_getHttpStatusMessage(): string; begin end;
function php_getRawRequest(): string; begin end;
function php_getRawRequestHeaders(): string; begin end;
function php_getRawResponse(): string; begin end;
function php_getRawResponseHeaders(): string; begin end;
function php_getRequestUrl(): string; begin end;
function php_setParseMode(const _parser_mode: integer): boolean; begin end;
function php_success(): boolean; begin end;
function php_getResponse(): string; begin end;
function php_getParam(const _param_name: string): variant; begin end;
function php_getPreparedParams(): variant; begin end;
function php_toString(const _url_encode: boolean): string; begin end;
function php_getExpand(): boolean; begin end;
function php_getExpandFilterQueries(): variant; begin end;
function php_getExpandQuery(): variant; begin end;
function php_getExpandRows(): integer; begin end;
function php_getExpandSortFields(): variant; begin end;
function php_getFacet(): boolean; begin end;
function php_getFacetDateEnd(const _field_override: string): string; begin end;
function php_getFacetDateFields(): variant; begin end;
function php_getFacetDateGap(const _field_override: string): string; begin end;
function php_getFacetDateHardEnd(const _field_override: string): string; begin end;
function php_getFacetDateOther(const _field_override: string): variant; begin end;
function php_getFacetDateStart(const _field_override: string): string; begin end;
function php_getFacetFields(): variant; begin end;
function php_getFacetLimit(const _field_override: string): integer; begin end;
function php_getFacetMethod(const _field_override: string): string; begin end;
function php_getFacetMinCount(const _field_override: string): integer; begin end;
function php_getFacetMissing(const _field_override: string): boolean; begin end;
function php_getFacetOffset(const _field_override: string): integer; begin end;
function php_getFacetPrefix(const _field_override: string): string; begin end;
function php_getFacetQueries(): variant; begin end;
function php_getFacetSort(const _field_override: string): integer; begin end;
function php_getFields(): variant; begin end;
function php_getFilterQueries(): variant; begin end;
function php_getGroupCachePercent(): integer; begin end;
function php_getGroupFacet(): boolean; begin end;
function php_getGroupFields(): variant; begin end;
function php_getGroupFormat(): string; begin end;
function php_getGroupFunctions(): variant; begin end;
function php_getGroupLimit(): integer; begin end;
function php_getGroupMain(): boolean; begin end;
function php_getGroupNGroups(): boolean; begin end;
function php_getGroupOffset(): integer; begin end;
function php_getGroupQueries(): variant; begin end;
function php_getGroupSortFields(): variant; begin end;
function php_getGroupTruncate(): boolean; begin end;
function php_getHighlight(): boolean; begin end;
function php_getHighlightAlternateField(const _field_override: string): string; begin end;
function php_getHighlightFields(): variant; begin end;
function php_getHighlightFormatter(const _field_override: string): string; begin end;
function php_getHighlightFragmenter(const _field_override: string): string; begin end;
function php_getHighlightFragsize(const _field_override: string): integer; begin end;
function php_getHighlightHighlightMultiTerm(): boolean; begin end;
function php_getHighlightMaxAlternateFieldLength(const _field_override: string): integer; begin end;
function php_getHighlightMaxAnalyzedChars(): integer; begin end;
function php_getHighlightMergeContiguous(const _field_override: string): boolean; begin end;
function php_getHighlightRegexMaxAnalyzedChars(): integer; begin end;
function php_getHighlightRegexPattern(): string; begin end;
function php_getHighlightRegexSlop(): extended; begin end;
function php_getHighlightRequireFieldMatch(): boolean; begin end;
function php_getHighlightSimplePost(const _field_override: string): string; begin end;
function php_getHighlightSimplePre(const _field_override: string): string; begin end;
function php_getHighlightSnippets(const _field_override: string): integer; begin end;
function php_getHighlightUsePhraseHighlighter(): boolean; begin end;
function php_getMlt(): boolean; begin end;
function php_getMltBoost(): boolean; begin end;
function php_getMltCount(): integer; begin end;
function php_getMltFields(): variant; begin end;
function php_getMltMaxNumQueryTerms(): integer; begin end;
function php_getMltMaxNumTokens(): integer; begin end;
function php_getMltMaxWordLength(): integer; begin end;
function php_getMltMinDocFrequency(): integer; begin end;
function php_getMltMinTermFrequency(): integer; begin end;
function php_getMltMinWordLength(): integer; begin end;
function php_getMltQueryFields(): variant; begin end;
function php_getRows(): integer; begin end;
function php_getSortFields(): variant; begin end;
function php_getStart(): integer; begin end;
function php_getStatsFacets(): variant; begin end;
function php_getStatsFields(): variant; begin end;
function php_getTerms(): boolean; begin end;
function php_getTermsField(): string; begin end;
function php_getTermsIncludeLowerBound(): boolean; begin end;
function php_getTermsIncludeUpperBound(): boolean; begin end;
function php_getTermsLimit(): integer; begin end;
function php_getTermsLowerBound(): string; begin end;
function php_getTermsMaxCount(): integer; begin end;
function php_getTermsMinCount(): integer; begin end;
function php_getTermsPrefix(): string; begin end;
function php_getTermsReturnRaw(): boolean; begin end;
function php_getTermsSort(): integer; begin end;
function php_getTermsUpperBound(): string; begin end;
function php_getTimeAllowed(): integer; begin end;
function php_getField(): string; begin end;
function php_getHint(): string; begin end;
function php_getMax(): string; begin end;
function php_getMin(): string; begin end;
function php_getNullPolicy(): string; begin end;
function php_getInternalInfo(): variant; begin end;
function php_addQuery(const _query: string; const _index: string; const _comment: string): integer; begin end;
function php_buildExcerpts(const _docs: variant; const _index: string; const _words: string; const _opts: variant): variant; begin end;
function php_buildKeywords(const _query: string; const _index: string; const _hits: boolean): variant; begin end;
function php_getLastError(): string; begin end;
function php_getLastWarning(): string; begin end;
function php_open(): boolean; begin end;
function php_query(const _query: string; const _index: string; const _comment: string): variant; begin end;
procedure php_resetFilters(); begin end;
procedure php_resetGroupBy(); begin end;
function php_runQueries(): variant; begin end;
function php_setArrayResult(const _array_result: boolean): boolean; begin end;
function php_setConnectTimeout(const _timeout: extended): boolean; begin end;
function php_setFieldWeights(const _weights: variant): boolean; begin end;
function php_setFilter(const _attribute: string; const _values: variant; const _exclude: boolean): boolean; begin end;
function php_setFilterFloatRange(const _attribute: string; const _min: extended; const _max: extended; const _exclude: boolean): boolean; begin end;
function php_setFilterRange(const _attribute: string; const _min: integer; const _max: integer; const _exclude: boolean): boolean; begin end;
function php_setGeoAnchor(const _attrlat: string; const _attrlong: string; const _latitude: extended; const _longitude: extended): boolean; begin end;
function php_setGroupBy(const _attribute: string; const _func: integer; const _groupsort: string): boolean; begin end;
function php_setGroupDistinct(const _attribute: string): boolean; begin end;
function php_setIDRange(const _min: integer; const _max: integer): boolean; begin end;
function php_setIndexWeights(const _weights: variant): boolean; begin end;
function php_setLimits(const _offset: integer; const _limit: integer; const _max_matches: integer; const _cutoff: integer): boolean; begin end;
function php_setMatchMode(const _mode: integer): boolean; begin end;
function php_setMaxQueryTime(const _qtime: integer): boolean; begin end;
function php_setOverride(const _attribute: string; const _type: integer; const _values: variant): boolean; begin end;
function php_setRankingMode(const _ranker: integer): boolean; begin end;
function php_setRetries(const _count: integer; const _delay: integer): boolean; begin end;
function php_setSelect(const _clause: string): boolean; begin end;
function php_setServer(const _server: string; const _port: integer): boolean; begin end;
function php_setSortMode(const _mode: integer; const _sortby: string): boolean; begin end;
function php_updateAttributes(const _index: string; const _attributes: variant; const _values: variant; const _mva: boolean): integer; begin end;
function php_apache_child_terminate(): boolean; begin end;
function php_apache_get_modules(): variant; begin end;
function php_apache_get_version(): string; begin end;
function php_apache_getenv(const _variable: string; const _walk_to_top: boolean): string; begin end;
function php_apache_lookup_uri(const _filename: string): variant; begin end;
function php_apache_note(const _note_name: string; const _note_value: string): string; begin end;
function php_apache_request_headers(): variant; begin end;
function php_apache_reset_timeout(): boolean; begin end;
function php_apache_response_headers(): variant; begin end;
function php_apache_setenv(const _variable: string; const _value: string; const _walk_to_top: boolean): boolean; begin end;
function php_getallheaders(): variant; begin end;
function php_virtual(const _filename: string): boolean; begin end;
function php_fastcgi_finish_request(): boolean; begin end;
function php_iis_add_server(const _path: string; const _comment: string; const _server_ip: string; const _port: integer; const _host_name: string; const _rights: integer; const _start_server: integer): integer; begin end;
function php_iis_get_dir_security(const _server_instance: integer; const _virtual_path: string): integer; begin end;
function php_iis_get_script_map(const _server_instance: integer; const _virtual_path: string; const _script_extension: string): string; begin end;
function php_iis_get_server_by_comment(const _comment: string): integer; begin end;
function php_iis_get_server_by_path(const _path: string): integer; begin end;
function php_iis_get_server_rights(const _server_instance: integer; const _virtual_path: string): integer; begin end;
function php_iis_get_service_state(const _service_id: string): integer; begin end;
function php_iis_remove_server(const _server_instance: integer): integer; begin end;
function php_iis_set_app_settings(const _server_instance: integer; const _virtual_path: string; const _application_scope: string): integer; begin end;
function php_iis_set_dir_security(const _server_instance: integer; const _virtual_path: string; const _directory_flags: integer): integer; begin end;
function php_iis_set_script_map(const _server_instance: integer; const _virtual_path: string; const _script_extension: string; const _engine_path: string; const _allow_scripting: integer): integer; begin end;
function php_iis_set_server_rights(const _server_instance: integer; const _virtual_path: string; const _directory_flags: integer): integer; begin end;
function php_iis_start_server(const _server_instance: integer): integer; begin end;
function php_iis_start_service(const _service_id: string): integer; begin end;
function php_iis_stop_server(const _server_instance: integer): integer; begin end;
function php_iis_stop_service(const _service_id: string): integer; begin end;
function php_nsapi_request_headers(): variant; begin end;
function php_nsapi_response_headers(): variant; begin end;
function php_nsapi_virtual(const _uri: string): boolean; begin end;
function php_msession_connect(const _host: string; const _port: string): boolean; begin end;
function php_msession_count(): integer; begin end;
function php_msession_create(const _session: string; const _classname: string; const _data: string): boolean; begin end;
function php_msession_destroy(const _name: string): boolean; begin end;
procedure php_msession_disconnect(); begin end;
function php_msession_find(const _name: string; const _value: string): variant; begin end;
function php_msession_get_array(const _session: string): variant; begin end;
function php_msession_get_data(const _session: string): string; begin end;
function php_msession_get(const _session: string; const _name: string; const _value: string): string; begin end;
function php_msession_inc(const _session: string; const _name: string): string; begin end;
function php_msession_list(): variant; begin end;
function php_msession_listvar(const _name: string): variant; begin end;
function php_msession_lock(const _name: string): integer; begin end;
function php_msession_plugin(const _session: string; const _val: string; const _param: string): string; begin end;
function php_msession_randstr(const _param: integer): string; begin end;
procedure php_msession_set_array(const _session: string; const _tuples: variant); begin end;
function php_msession_set_data(const _session: string; const _value: string): boolean; begin end;
function php_msession_set(const _session: string; const _name: string; const _value: string): boolean; begin end;
function php_msession_timeout(const _session: string; const _param: integer): integer; begin end;
function php_msession_uniq(const _param: integer; const _classname: string; const _data: string): string; begin end;
function php_msession_unlock(const _session: string; const _key: integer): integer; begin end;
procedure php_session_abort(); begin end;
function php_session_cache_expire(const _new_cache_expire: string): integer; begin end;
function php_session_cache_limiter(const _cache_limiter: string): string; begin end;
function php_session_decode(const _data: string): boolean; begin end;
function php_session_destroy(): boolean; begin end;
function php_session_encode(): string; begin end;
function php_session_get_cookie_params(): variant; begin end;
function php_session_id(const _id: string): string; begin end;
function php_session_is_registered(const _name: string): boolean; begin end;
function php_session_module_name(const _module: string): string; begin end;
function php_session_name(const _name: string): string; begin end;
function php_session_regenerate_id(const _delete_old_session: boolean): boolean; begin end;
procedure php_session_register_shutdown(); begin end;
function php_session_register(const _name: variant): boolean; begin end;
procedure php_session_reset(); begin end;
function php_session_save_path(const _path: string): string; begin end;
procedure php_session_set_cookie_params(const _lifetime: integer; const _path: string; const _domain: string; const _secure: boolean; const _httponly: boolean); begin end;
function php_session_set_save_handler(const _open: variant; const _close: variant; const _read: variant; const _write: variant; const _destroy: variant; const _gc: variant; const _create_sid: variant): boolean; begin end;
function php_session_set_save_handler(const _sessionhandler: variant; const _register_shutdown: boolean): boolean; begin end;
function php_session_start(const _options: variant): boolean; begin end;
function php_session_status(): integer; begin end;
function php_session_unregister(const _name: string): boolean; begin end;
procedure php_session_unset(); begin end;
procedure php_session_write_close(); begin end;
function php_create_sid(): string; begin end;
function php_destroy(const _session_id: string): boolean; begin end;
function php_gc(const _maxlifetime: integer): boolean; begin end;
function php_open(const _save_path: string; const _session_name: string): boolean; begin end;
function php_read(const _session_id: string): string; begin end;
function php_write(const _session_id: string; const _session_data: string): boolean; begin end;
function php_session_pgsql_add_error(const _error_level: integer; const _error_message: string): boolean; begin end;
function php_session_pgsql_get_error(const _with_error_message: boolean): variant; begin end;
function php_session_pgsql_get_field(): string; begin end;
function php_session_pgsql_reset(): boolean; begin end;
function php_session_pgsql_set_field(const _value: string): boolean; begin end;
function php_session_pgsql_status(): variant; begin end;
function php_bbcode_add_element(const _bbcode_container: variant; const _tag_name: string; const _tag_rules: variant): boolean; begin end;
function php_bbcode_add_smiley(const _bbcode_container: variant; const _smiley: string; const _replace_by: string): boolean; begin end;
function php_bbcode_create(const _bbcode_initial_tags: variant): variant; begin end;
function php_bbcode_destroy(const _bbcode_container: variant): boolean; begin end;
function php_bbcode_parse(const _bbcode_container: variant; const _to_parse: string): string; begin end;
function php_bbcode_set_arg_parser(const _bbcode_container: variant; const _bbcode_arg_parser: variant): boolean; begin end;
function php_bbcode_set_flags(const _bbcode_container: variant; const _flags: integer; const _mode: integer): boolean; begin end;
function php_preg_filter(const _pattern: variant; const _replacement: variant; const _subject: variant; const _limit: integer; var _count: integer): variant; begin end;
function php_preg_grep(const _pattern: string; const _input: variant; const _flags: integer): variant; begin end;
function php_preg_last_error(): integer; begin end;
function php_preg_match_all(const _pattern: string; const _subject: string; var _matches: variant; const _flags: integer; const _offset: integer): integer; begin end;
function php_preg_match(const _pattern: string; const _subject: string; var _matches: variant; const _flags: integer; const _offset: integer): integer; begin end;
function php_preg_quote(const _str: string; const _delimiter: string): string; begin end;
function php_preg_replace_callback_array(const _patterns_and_callbacks: variant; const _subject: variant; const _limit: integer; var _count: integer): variant; begin end;
function php_preg_replace_callback(const _pattern: variant; const _callback: variant; const _subject: variant; const _limit: integer; var _count: integer): variant; begin end;
function php_preg_replace(const _pattern: variant; const _replacement: variant; const _subject: variant; const _limit: integer; var _count: integer): variant; begin end;
function php_preg_split(const _pattern: string; const _subject: string; const _limit: integer; const _flags: integer): variant; begin end;
function php_ereg_replace(const _pattern: string; const _replacement: string; const _string: string): string; begin end;
function php_ereg(const _pattern: string; const _string: string; var _regs: variant): integer; begin end;
function php_eregi_replace(const _pattern: string; const _replacement: string; const _string: string): string; begin end;
function php_eregi(const _pattern: string; const _string: string; var _regs: variant): integer; begin end;
function php_split(const _pattern: string; const _string: string; const _limit: integer): variant; begin end;
function php_spliti(const _pattern: string; const _string: string; const _limit: integer): variant; begin end;
function php_sql_regcase(const _string: string): string; begin end;
function php_ssdeep_fuzzy_compare(const _signature1: string; const _signature2: string): integer; begin end;
function php_ssdeep_fuzzy_hash_filename(const _file_name: string): string; begin end;
function php_ssdeep_fuzzy_hash(const _to_hash: string): string; begin end;
function php_HTML_SPECIALCHARS(): integer; begin end;
function php_addcslashes(const _str: string; const _charlist: string): string; begin end;
function php_addslashes(const _str: string): string; begin end;
function php_bin2hex(const _str: string): string; begin end;
function php_chr(const _ascii: integer): string; begin end;
function php_chunk_split(const _body: string; const _chunklen: integer; const _end: string): string; begin end;
function php_convert_cyr_string(const _str: string; const _from: string; const _to: string): string; begin end;
function php_convert_uudecode(const _data: string): string; begin end;
function php_convert_uuencode(const _data: string): string; begin end;
function php_count_chars(const _string: string; const _mode: integer): variant; begin end;
function php_crc32(const _str: string): integer; begin end;
function php_crypt(const _str: string; const _salt: string): string; begin end;
function php_explode(const _delimiter: string; const _string: string; const _limit: integer): variant; begin end;
function php_fprintf(const _handle: variant; const _format: string; const _args: variant): integer; begin end;
function php_get_html_translation_table(const _table: integer; const _flags: integer; const _encoding: string): variant; begin end;
function php_hebrev(const _hebrew_text: string; const _max_chars_per_line: integer): string; begin end;
function php_hebrevc(const _hebrew_text: string; const _max_chars_per_line: integer): string; begin end;
function php_hex2bin(const _data: string): string; begin end;
function php_html_entity_decode(const _string: string; const _flags: integer; const _encoding: string): string; begin end;
function php_htmlentities(const _string: string; const _flags: integer; const _encoding: string): string; begin end;
function php_htmlspecialchars_decode(const _string: string; const _flags: integer): string; begin end;
function php_htmlspecialchars(const _string: string; const _flags: integer; const _encoding: string): string; begin end;
function php_implode(const _glue: string; const _pieces: variant): string; begin end;
function php_implode(const _pieces: variant): string; begin end;
function php_lcfirst(const _str: string): string; begin end;
function php_levenshtein(const _str1: string; const _str2: string): integer; begin end;
function php_levenshtein(const _str1: string; const _str2: string; const _cost_ins: integer; const _cost_rep: integer; const _cost_del: integer): integer; begin end;
function php_localeconv(): variant; begin end;
function php_ltrim(const _str: string; const _character_mask: string): string; begin end;
function php_md5_file(const _filename: string; const _raw_output: boolean): string; begin end;
function php_md5(const _str: string; const _raw_output: boolean): string; begin end;
function php_metaphone(const _str: string; const _phonemes: integer): string; begin end;
function php_money_format(const _format: string; const _number: extended): string; begin end;
function php_nl_langinfo(const _item: integer): string; begin end;
function php_nl2br(const _string: string; const _is_xhtml: boolean): string; begin end;
function php_number_format(const _number: extended; const _decimals: integer): string; begin end;
function php_number_format(const _number: extended; const _decimals: integer; const _dec_point: string; const _thousands_sep: string): string; begin end;
function php_ord(const _string: string): integer; begin end;
procedure php_parse_str(const _str: string; var _arr: variant); begin end;
function php_print(const _arg: string): integer; begin end;
function php_printf(const _format: string; const _args: variant): integer; begin end;
function php_quoted_printable_decode(const _str: string): string; begin end;
function php_quoted_printable_encode(const _str: string): string; begin end;
function php_quotemeta(const _str: string): string; begin end;
function php_rtrim(const _str: string; const _character_mask: string): string; begin end;
function php_setlocale(const _category: integer; const _locale: string): string; begin end;
function php_setlocale(const _category: integer; const _locale: variant): string; begin end;
function php_sha1_file(const _filename: string; const _raw_output: boolean): string; begin end;
function php_sha1(const _str: string; const _raw_output: boolean): string; begin end;
function php_similar_text(const _first: string; const _second: string; var _percent: extended): integer; begin end;
function php_soundex(const _str: string): string; begin end;
function php_sprintf(const _format: string; const _args: variant): string; begin end;
function php_sscanf(const _str: string; const _format: string): variant; begin end;
function php_str_getcsv(const _input: string; const _delimiter: string; const _enclosure: string; const _escape: string): variant; begin end;
function php_str_ireplace(const _search: variant; const _replace: variant; const _subject: variant; var _count: integer): variant; begin end;
function php_str_pad(const _input: string; const _pad_length: integer; const _pad_string: string; const _pad_type: integer): string; begin end;
function php_str_repeat(const _input: string; const _multiplier: integer): string; begin end;
function php_str_replace(const _search: variant; const _replace: variant; const _subject: variant; var _count: integer): variant; begin end;
function php_str_rot13(const _str: string): string; begin end;
function php_str_shuffle(const _str: string): string; begin end;
function php_str_split(const _string: string; const _split_length: integer): variant; begin end;
function php_str_word_count(const _string: string; const _format: integer; const _charlist: string): variant; begin end;
function php_strcasecmp(const _str1: string; const _str2: string): integer; begin end;
function php_strcmp(const _str1: string; const _str2: string): integer; begin end;
function php_strcoll(const _str1: string; const _str2: string): integer; begin end;
function php_strcspn(const _subject: string; const _mask: string; const _start: integer; const _length: integer): integer; begin end;
function php_strip_tags(const _str: string; const _allowable_tags: string): string; begin end;
function php_stripcslashes(const _str: string): string; begin end;
function php_stripos(const _haystack: string; const _needle: string; const _offset: integer): variant; begin end;
function php_stripslashes(const _str: string): string; begin end;
function php_stristr(const _haystack: string; const _needle: variant; const _before_needle: boolean): string; begin end;
function php_strlen(const _string: string): integer; begin end;
function php_strnatcasecmp(const _str1: string; const _str2: string): integer; begin end;
function php_strnatcmp(const _str1: string; const _str2: string): integer; begin end;
function php_strncasecmp(const _str1: string; const _str2: string; const _len: integer): integer; begin end;
function php_strncmp(const _str1: string; const _str2: string; const _len: integer): integer; begin end;
function php_strpbrk(const _haystack: string; const _char_list: string): string; begin end;
function php_strpos(const _haystack: string; const _needle: variant; const _offset: integer): variant; begin end;
function php_strrchr(const _haystack: string; const _needle: variant): string; begin end;
function php_strrev(const _string: string): string; begin end;
function php_strripos(const _haystack: string; const _needle: string; const _offset: integer): integer; begin end;
function php_strrpos(const _haystack: string; const _needle: string; const _offset: integer): integer; begin end;
function php_strspn(const _subject: string; const _mask: string; const _start: integer; const _length: integer): integer; begin end;
function php_strstr(const _haystack: string; const _needle: variant; const _before_needle: boolean): string; begin end;
function php_strtok(const _str: string; const _token: string): string; begin end;
function php_strtok(const _token: string): string; begin end;
function php_strtolower(const _string: string): string; begin end;
function php_strtoupper(const _string: string): string; begin end;
function php_strtr(const _str: string; const _from: string; const _to: string): string; begin end;
function php_strtr(const _str: string; const _replace_pairs: variant): string; begin end;
function php_substr_compare(const _main_str: string; const _str: string; const _offset: integer; const _length: integer; const _case_insensitivity: boolean): integer; begin end;
function php_substr_count(const _haystack: string; const _needle: string; const _offset: integer; const _length: integer): integer; begin end;
function php_substr_replace(const _string: variant; const _replacement: variant; const _start: variant; const _length: variant): variant; begin end;
function php_substr(const _string: string; const _start: integer; const _length: integer): string; begin end;
function php_trim(const _str: string; const _character_mask: string): string; begin end;
function php_ucfirst(const _str: string): string; begin end;
function php_ucwords(const _str: string; const _delimiters: string): string; begin end;
function php_vfprintf(const _handle: variant; const _format: string; const _args: variant): integer; begin end;
function php_vprintf(const _format: string; const _args: variant): integer; begin end;
function php_vsprintf(const _format: string; const _args: variant): string; begin end;
function php_wordwrap(const _str: string; const _width: integer; const _break: string; const _cut: boolean): string; begin end;
function php_array_change_key_case(const _array: variant; const _case: integer): variant; begin end;
function php_array_chunk(const _array: variant; const _size: integer; const _preserve_keys: boolean): variant; begin end;
function php_array_column(const _input: variant; const _column_key: variant; const _index_key: variant): variant; begin end;
function php_array_combine(const _keys: variant; const _values: variant): variant; begin end;
function php_array_count_values(const _array: variant): variant; begin end;
function php_array_diff_assoc(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_diff_key(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_diff_uassoc(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant; begin end;
function php_array_diff_ukey(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant; begin end;
function php_array_diff(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_fill_keys(const _keys: variant; const _value: variant): variant; begin end;
function php_array_fill(const _start_index: integer; const _num: integer; const _value: variant): variant; begin end;
function php_array_filter(const _array: variant; const _callback: variant; const _flag: integer): variant; begin end;
function php_array_flip(const _array: variant): variant; begin end;
function php_array_intersect_assoc(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_intersect_key(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_intersect_uassoc(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant; begin end;
function php_array_intersect_ukey(const _array1: variant; const _array2: variant; const _key_compare_func: variant): variant; begin end;
function php_array_intersect(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_key_exists(const _key: variant; const _array: variant): boolean; begin end;
function php_array_keys(const _array: variant; const _search_value: variant; const _strict: boolean): variant; begin end;
function php_array_map(const _callback: variant; const _array1: variant): variant; begin end;
function php_array_merge_recursive(const _array1: variant): variant; begin end;
function php_array_merge(const _array1: variant): variant; begin end;
function php_array_multisort(var _array1: variant; const _array1_sort_order: variant; const _array1_sort_flags: variant): boolean; begin end;
function php_array_pad(const _array: variant; const _size: integer; const _value: variant): variant; begin end;
function php_array_pop(var _array: variant): variant; begin end;
function php_array_product(const _array: variant): variant; begin end;
function php_array_push(var _array: variant; const _value1: variant): integer; begin end;
function php_array_rand(const _array: variant; const _num: integer): variant; begin end;
function php_array_reduce(const _array: variant; const _callback: variant; const _initial: variant): variant; begin end;
function php_array_replace_recursive(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_replace(const _array1: variant; const _array2: variant): variant; begin end;
function php_array_reverse(const _array: variant; const _preserve_keys: boolean): variant; begin end;
function php_array_search(const _needle: variant; const _haystack: variant; const _strict: boolean): variant; begin end;
function php_array_shift(var _array: variant): variant; begin end;
function php_array_slice(const _array: variant; const _offset: integer; const _length: integer; const _preserve_keys: boolean): variant; begin end;
function php_array_splice(var _input: variant; const _offset: integer; const _length: integer; const _replacement: variant): variant; begin end;
function php_array_sum(const _array: variant): variant; begin end;
function php_array_udiff_assoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant; begin end;
function php_array_udiff_uassoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant; const _key_compare_func: variant): variant; begin end;
function php_array_udiff(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant; begin end;
function php_array_uintersect_assoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant; begin end;
function php_array_uintersect_uassoc(const _array1: variant; const _array2: variant; const _value_compare_func: variant; const _key_compare_func: variant): variant; begin end;
function php_array_uintersect(const _array1: variant; const _array2: variant; const _value_compare_func: variant): variant; begin end;
function php_array_unique(const _array: variant; const _sort_flags: integer): variant; begin end;
function php_array_unshift(var _array: variant; const _value1: variant): integer; begin end;
function php_array_values(const _array: variant): variant; begin end;
function php_array_walk_recursive(var _array: variant; const _callback: variant; const _userdata: variant): boolean; begin end;
function php_array_walk(var _array: variant; const _callback: variant; const _userdata: variant): boolean; begin end;
function php_array(): variant; begin end;
function php_arsort(var _array: variant; const _sort_flags: integer): boolean; begin end;
function php_compact(const _varname1: variant): variant; begin end;
function php_count(const _array_or_countable: variant; const _mode: integer): integer; begin end;
function php_current(var _array: variant): variant; begin end;
function php_each(var _array: variant): variant; begin end;
function php_end(var _array: variant): variant; begin end;
function php_extract(var _array: variant; const _flags: integer; const _prefix: string): integer; begin end;
function php_in_array(const _needle: variant; const _haystack: variant; const _strict: boolean): boolean; begin end;
function php_key(var _array: variant): variant; begin end;
function php_krsort(var _array: variant; const _sort_flags: integer): boolean; begin end;
function php_ksort(var _array: variant; const _sort_flags: integer): boolean; begin end;
function php_list(const _var1: variant): variant; begin end;
function php_natcasesort(var _array: variant): boolean; begin end;
function php_natsort(var _array: variant): boolean; begin end;
function php_range(const _start: variant; const _end: variant; const _step: variant): variant; begin end;
function php_reset(var _array: variant): variant; begin end;
function php_rsort(var _array: variant; const _sort_flags: integer): boolean; begin end;
function php_shuffle(var _array: variant): boolean; begin end;
function php_uasort(var _array: variant; const _value_compare_func: variant): boolean; begin end;
function php_uksort(var _array: variant; const _key_compare_func: variant): boolean; begin end;
function php_usort(var _array: variant; const _value_compare_func: variant): boolean; begin end;
function php_call_user_method_array(const _method_name: string; var _obj: variant; const _params: variant): variant; begin end;
function php_call_user_method(const _method_name: string; var _obj: variant; const _parameter: variant): variant; begin end;
function php_class_alias(const _original: string; const _alias: string; const _autoload: boolean): boolean; begin end;
function php_class_exists(const _class_name: string; const _autoload: boolean): boolean; begin end;
function php_get_called_class(): string; begin end;
function php_get_class_methods(const _class_name: variant): variant; begin end;
function php_get_class_vars(const _class_name: string): variant; begin end;
function php_get_class(const _object: variant): string; begin end;
function php_get_declared_classes(): variant; begin end;
function php_get_declared_interfaces(): variant; begin end;
function php_get_declared_traits(): variant; begin end;
function php_get_object_vars(const _object: variant): variant; begin end;
function php_get_parent_class(const _object: variant): string; begin end;
function php_interface_exists(const _interface_name: string; const _autoload: boolean): boolean; begin end;
function php_is_a(const _object: variant; const _class_name: string; const _allow_string: boolean): boolean; begin end;
function php_is_subclass_of(const _object: variant; const _class_name: string; const _allow_string: boolean): boolean; begin end;
function php_method_exists(const _object: variant; const _method_name: string): boolean; begin end;
function php_property_exists(const _class: variant; const _property: string): boolean; begin end;
function php_trait_exists(const _traitname: string; const _autoload: boolean): boolean; begin end;
function php_classkit_import(const _filename: string): variant; begin end;
function php_classkit_method_add(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean; begin end;
function php_classkit_method_copy(const _dClass: string; const _dMethod: string; const _sClass: string; const _sMethod: string): boolean; begin end;
function php_classkit_method_redefine(const _classname: string; const _methodname: string; const _args: string; const _code: string; const _flags: integer): boolean; begin end;
function php_classkit_method_remove(const _classname: string; const _methodname: string): boolean; begin end;
function php_classkit_method_rename(const _classname: string; const _methodname: string; const _newname: string): boolean; begin end;
function php_ctype_alnum(const _text: string): boolean; begin end;
function php_ctype_alpha(const _text: string): boolean; begin end;
function php_ctype_cntrl(const _text: string): boolean; begin end;
function php_ctype_digit(const _text: string): boolean; begin end;
function php_ctype_graph(const _text: string): boolean; begin end;
function php_ctype_lower(const _text: string): boolean; begin end;
function php_ctype_print(const _text: string): boolean; begin end;
function php_ctype_punct(const _text: string): boolean; begin end;
function php_ctype_space(const _text: string): boolean; begin end;
function php_ctype_upper(const _text: string): boolean; begin end;
function php_ctype_xdigit(const _text: string): boolean; begin end;
function php_filter_has_var(const _type: integer; const _variable_name: string): boolean; begin end;
function php_filter_id(const _filtername: string): integer; begin end;
function php_filter_input_array(const _type: integer; const _definition: variant; const _add_empty: boolean): variant; begin end;
function php_filter_input(const _type: integer; const _variable_name: string; const _filter: integer; const _options: variant): variant; begin end;
function php_filter_list(): variant; begin end;
function php_filter_var_array(const _data: variant; const _definition: variant; const _add_empty: boolean): variant; begin end;
function php_filter_var(const _variable: variant; const _filter: integer; const _options: variant): variant; begin end;
function php_call_user_func_array(const _callback: variant; const _param_arr: variant): variant; begin end;
function php_call_user_func(const _callback: variant; const _parameter: variant): variant; begin end;
function php_create_function(const _args: string; const _code: string): string; begin end;
function php_forward_static_call_array(const _function: variant; const _parameters: variant): variant; begin end;
function php_forward_static_call(const _function: variant; const _parameter: variant): variant; begin end;
function php_func_get_arg(const _arg_num: integer): variant; begin end;
function php_func_get_args(): variant; begin end;
function php_func_num_args(): integer; begin end;
function php_function_exists(const _function_name: string): boolean; begin end;
function php_get_defined_functions(): variant; begin end;
procedure php_register_shutdown_function(const _callback: variant; const _parameter: variant); begin end;
function php_register_tick_function(const _function: variant; const _arg: variant): boolean; begin end;
procedure php_unregister_tick_function(const _function_name: string); begin end;
function php_add(const _key: integer): boolean; begin end;
function php_delete(const _key: integer): boolean; begin end;
function php_exists(const _key: integer): boolean; begin end;
procedure php_saveToFile(const _filename: string); begin end;
function php_saveToString(): string; begin end;
function php_update(const _key: integer; const _value: integer): boolean; begin end;
function php_add(const _key: string; const _value: integer): boolean; begin end;
function php_exists(const _key: string): boolean; begin end;
function php_set(const _key: string; const _value: integer): integer; begin end;
function php_update(const _key: string; const _value: integer): boolean; begin end;
function php_add(const _key: integer; const _value: string): boolean; begin end;
function php_set(const _key: integer; const _value: string): integer; begin end;
function php_update(const _key: integer; const _value: string): boolean; begin end;
function php_export(const _reflector: variant; const _return: boolean): string; begin end;
function php_getModifierNames(const _modifiers: integer): variant; begin end;
function php_getConstant(const _name: string): variant; begin end;
function php_getConstants(): variant; begin end;
function php_getDefaultProperties(): variant; begin end;
function php_getDocComment(): string; begin end;
function php_getEndLine(): integer; begin end;
function php_getExtensionName(): string; begin end;
function php_getInterfaceNames(): variant; begin end;
function php_getInterfaces(): variant; begin end;
function php_getMethods(const _filter: integer): variant; begin end;
function php_getModifiers(): integer; begin end;
function php_getNamespaceName(): string; begin end;
function php_getParentClass(): variant; begin end;
function php_getProperties(const _filter: integer): variant; begin end;
function php_getShortName(): string; begin end;
function php_getStartLine(): integer; begin end;
function php_getStaticProperties(): variant; begin end;
function php_getStaticPropertyValue(const _name: string; var _def_value: variant): variant; begin end;
function php_getTraitAliases(): variant; begin end;
function php_getTraitNames(): variant; begin end;
function php_getTraits(): variant; begin end;
function php_hasConstant(const _name: string): boolean; begin end;
function php_hasMethod(const _name: string): boolean; begin end;
function php_hasProperty(const _name: string): boolean; begin end;
function php_implementsInterface(const _interface: string): boolean; begin end;
function php_inNamespace(): boolean; begin end;
function php_isAbstract(): boolean; begin end;
function php_isAnonymous(): boolean; begin end;
function php_isCloneable(): boolean; begin end;
function php_isFinal(): boolean; begin end;
function php_isInstance(const _object: variant): boolean; begin end;
function php_isInstantiable(): boolean; begin end;
function php_isInterface(): boolean; begin end;
function php_isInternal(): boolean; begin end;
function php_isIterateable(): boolean; begin end;
function php_isSubclassOf(const _class: string): boolean; begin end;
function php_isTrait(): boolean; begin end;
function php_isUserDefined(): boolean; begin end;
function php_newInstance(const _args: variant): variant; begin end;
function php_newInstanceArgs(const _args: variant): variant; begin end;
function php_newInstanceWithoutConstructor(): variant; begin end;
procedure php_setStaticPropertyValue(const _name: string; const _value: string); begin end;
function php_export(const _name: string; const _return: string): string; begin end;
function php_getAuthor(): string; begin end;
function php_getURL(): string; begin end;
function php_getClasses(): variant; begin end;
function php_getClassNames(): variant; begin end;
function php_getDependencies(): variant; begin end;
function php_getFunctions(): variant; begin end;
function php_getINIEntries(): variant; begin end;
procedure php_isTemporary(); begin end;
function php_invoke(const _parameter: variant): variant; begin end;
function php_invokeArgs(const _args: variant): variant; begin end;
function php_isDisabled(): boolean; begin end;
function php_getClosureThis(): variant; begin end;
function php_getNumberOfParameters(): integer; begin end;
function php_getNumberOfRequiredParameters(): integer; begin end;
function php_getParameters(): variant; begin end;
function php_getStaticVariables(): variant; begin end;
function php_hasReturnType(): boolean; begin end;
function php_isClosure(): boolean; begin end;
function php_isDeprecated(): boolean; begin end;
function php_isGenerator(): boolean; begin end;
function php_isVariadic(): boolean; begin end;
function php_returnsReference(): boolean; begin end;
function php_export(const _class: string; const _name: string; const _return: boolean): string; begin end;
function php_invoke(const _object: variant; const _parameter: variant): variant; begin end;
function php_invokeArgs(const _object: variant; const _args: variant): variant; begin end;
function php_isConstructor(): boolean; begin end;
function php_isDestructor(): boolean; begin end;
function php_isPrivate(): boolean; begin end;
function php_isProtected(): boolean; begin end;
function php_isPublic(): boolean; begin end;
function php_isStatic(): boolean; begin end;
procedure php_setAccessible(const _accessible: boolean); begin end;
function php_export(const _argument: string; const _return: boolean): string; begin end;
function php_allowsNull(): boolean; begin end;
function php_canBePassedByValue(): boolean; begin end;
function php_getDefaultValue(): variant; begin end;
function php_getDefaultValueConstantName(): string; begin end;
function php_hasType(): boolean; begin end;
function php_isArray(): boolean; begin end;
function php_isCallable(): boolean; begin end;
function php_isDefaultValueAvailable(): boolean; begin end;
function php_isDefaultValueConstant(): boolean; begin end;
function php_isOptional(): boolean; begin end;
function php_isPassedByReference(): boolean; begin end;
function php_export(const _class: variant; const _name: string; const _return: boolean): string; begin end;
function php_getValue(const _object: variant): variant; begin end;
function php_isDefault(): boolean; begin end;
procedure php_setValue(const _object: variant; const _value: variant); begin end;
function php_isBuiltin(): boolean; begin end;
function php_getExecutingFile(): string; begin end;
function php_getExecutingLine(): integer; begin end;
function php_getThis(): variant; begin end;
function php_getTrace(const _options: integer): variant; begin end;
function php_export(): string; begin end;
function php_boolval(const _var: variant): boolean; begin end;
procedure php_debug_zval_dump(const _variable: variant); begin end;
function php_empty(const _var: variant): boolean; begin end;
function php_floatval(const _var: variant): extended; begin end;
function php_get_defined_vars(): variant; begin end;
function php_get_resource_type(const _handle: variant): string; begin end;
function php_gettype(const _var: variant): string; begin end;
function php_import_request_variables(const _types: string; const _prefix: string): boolean; begin end;
function php_intval(const _var: variant; const _base: integer): integer; begin end;
function php_is_array(const _var: variant): boolean; begin end;
function php_is_bool(const _var: variant): boolean; begin end;
function php_is_callable(const _var: variant; const _syntax_only: boolean; var _callable_name: string): boolean; begin end;
function php_is_float(const _var: variant): boolean; begin end;
function php_is_int(const _var: variant): boolean; begin end;
function php_is_null(const _var: variant): boolean; begin end;
function php_is_numeric(const _var: variant): boolean; begin end;
function php_is_object(const _var: variant): boolean; begin end;
function php_is_resource(const _var: variant): boolean; begin end;
function php_is_scalar(const _var: variant): boolean; begin end;
function php_is_string(const _var: variant): boolean; begin end;
function php_isset(const _var: variant): boolean; begin end;
function php_print_r(const _expression: variant; const _return: boolean): variant; begin end;
function php_serialize(const _value: variant): string; begin end;
function php_settype(var _var: variant; const _type: string): boolean; begin end;
function php_strval(const _var: variant): string; begin end;
function php_unserialize(const _str: string; const _options: variant): variant; begin end;
procedure php_unset(const _var: variant); begin end;
procedure php_var_dump(const _expression: variant); begin end;
function php_var_export(const _expression: variant; const _return: boolean): variant; begin end;
function php_oauth_get_sbs(const _http_method: string; const _uri: string; const _request_parameters: variant): string; begin end;
function php_oauth_urlencode(const _uri: string): string; begin end;
function php_disableDebug(): boolean; begin end;
function php_disableRedirects(): boolean; begin end;
function php_disableSSLChecks(): boolean; begin end;
function php_enableDebug(): boolean; begin end;
function php_enableRedirects(): boolean; begin end;
function php_enableSSLChecks(): boolean; begin end;
function php_fetch(const _protected_resource_url: string; const _extra_parameters: variant; const _http_method: string; const _http_headers: variant): variant; begin end;
function php_generateSignature(const _http_method: string; const _url: string; const _extra_parameters: variant): string; begin end;
function php_getAccessToken(const _access_token_url: string; const _auth_session_handle: string; const _verifier_token: string; const _http_method: string): variant; begin end;
function php_getCAPath(): variant; begin end;
function php_getLastResponse(): string; begin end;
function php_getLastResponseHeaders(): string; begin end;
function php_getLastResponseInfo(): variant; begin end;
function php_getRequestHeader(const _http_method: string; const _url: string; const _extra_parameters: variant): string; begin end;
function php_getRequestToken(const _request_token_url: string; const _callback_url: string; const _http_method: string): variant; begin end;
function php_setAuthType(const _auth_type: integer): variant; begin end;
function php_setCAPath(const _ca_path: string; const _ca_info: string): variant; begin end;
function php_setNonce(const _nonce: string): variant; begin end;
procedure php_setRequestEngine(const _reqengine: integer); begin end;
function php_setRSACertificate(const _cert: string): variant; begin end;
function php_setSSLChecks(const _sslcheck: integer): boolean; begin end;
function php_setTimestamp(const _timestamp: string): variant; begin end;
function php_setToken(const _token: string; const _token_secret: string): boolean; begin end;
function php_setVersion(const _version: string): boolean; begin end;
function php_addRequiredParameter(const _req_params: string): boolean; begin end;
procedure php_callconsumerHandler(); begin end;
procedure php_callTimestampNonceHandler(); begin end;
procedure php_calltokenHandler(); begin end;
procedure php_checkOAuthRequest(const _uri: string; const _method: string); begin end;
procedure php_consumerHandler(const _callback_function: variant); begin end;
function php_generateToken(const _size: integer; const _strong: boolean): string; begin end;
procedure php_is2LeggedEndpoint(const _params_array: variant); begin end;
procedure php_isRequestTokenEndpoint(const _will_issue_request_token: boolean); begin end;
function php_removeRequiredParameter(const _req_params: string): boolean; begin end;
function php_reportProblem(const _oauthexception: string; const _send_headers: boolean): string; begin end;
function php_setRequestTokenPath(const _path: string): boolean; begin end;
procedure php_timestampNonceHandler(const _callback_function: variant); begin end;
procedure php_tokenHandler(const _callback_function: variant); begin end;
function php_is_soap_fault(const _object: variant): boolean; begin end;
function php_use_soap_error_handler(const _handler: boolean): boolean; begin end;
procedure php_addFunction(const _functions: variant); begin end;
procedure php_addSoapHeader(const _object: variant); begin end;
procedure php_fault(const _code: string; const _string: string; const _actor: string; const _details: string; const _name: string); begin end;
procedure php_handle(const _soap_request: string); begin end;
procedure php_setClass(const _class_name: string; const _args: variant); begin end;
procedure php_setObject(const _object: variant); begin end;
procedure php_setPersistence(const _mode: integer); begin end;
function php_setOpt(const _name: variant; const _value: variant): boolean; begin end;
function php_call(const _uri: string; const _method: string; const _parameters: variant; const _callback: variant): integer; begin end;
function php_loop(const _callback: variant; const _error_callback: variant): boolean; begin end;
function php_xmlrpc_decode_request(const _xml: string; var _method: string; const _encoding: string): variant; begin end;
function php_xmlrpc_decode(const _xml: string; const _encoding: string): variant; begin end;
function php_xmlrpc_encode_request(const _method: string; const _params: variant; const _output_options: variant): string; begin end;
function php_xmlrpc_encode(const _value: variant): string; begin end;
function php_xmlrpc_get_type(const _value: variant): string; begin end;
function php_xmlrpc_is_fault(const _arg: variant): boolean; begin end;
function php_xmlrpc_parse_method_descriptions(const _xml: string): variant; begin end;
function php_xmlrpc_server_add_introspection_data(const _server: variant; const _desc: variant): integer; begin end;
function php_xmlrpc_server_call_method(const _server: variant; const _xml: string; const _user_data: variant; const _output_options: variant): string; begin end;
function php_xmlrpc_server_create(): variant; begin end;
function php_xmlrpc_server_destroy(const _server: variant): integer; begin end;
function php_xmlrpc_server_register_introspection_callback(const _server: variant; const _function: string): boolean; begin end;
function php_xmlrpc_server_register_method(const _server: variant; const _method_name: string; const _function: string): boolean; begin end;
function php_xmlrpc_set_type(var _value: string; const _type: string): boolean; begin end;
function php_com_create_guid(): string; begin end;
function php_com_event_sink(const _comobject: variant; const _sinkobject: variant; const _sinkinterface: variant): boolean; begin end;
function php_com_get_active_object(const _progid: string; const _code_page: integer): variant; begin end;
function php_com_load_typelib(const _typelib_name: string; const _case_insensitive: boolean): boolean; begin end;
function php_com_message_pump(const _timeoutms: integer): boolean; begin end;
function php_com_print_typeinfo(const _comobject: variant; const _dispinterface: string; const _wantsink: boolean): boolean; begin end;
function php_variant_abs(const _val: variant): variant; begin end;
function php_variant_add(const _left: variant; const _right: variant): variant; begin end;
function php_variant_and(const _left: variant; const _right: variant): variant; begin end;
function php_variant_cast(const _variant: variant; const _type: integer): variant; begin end;
function php_variant_cat(const _left: variant; const _right: variant): variant; begin end;
function php_variant_cmp(const _left: variant; const _right: variant; const _lcid: integer; const _flags: integer): integer; begin end;
function php_variant_date_from_timestamp(const _timestamp: integer): variant; begin end;
function php_variant_date_to_timestamp(const _variant: variant): integer; begin end;
function php_variant_div(const _left: variant; const _right: variant): variant; begin end;
function php_variant_eqv(const _left: variant; const _right: variant): variant; begin end;
function php_variant_fix(const _variant: variant): variant; begin end;
function php_variant_get_type(const _variant: variant): integer; begin end;
function php_variant_idiv(const _left: variant; const _right: variant): variant; begin end;
function php_variant_imp(const _left: variant; const _right: variant): variant; begin end;
function php_variant_int(const _variant: variant): variant; begin end;
function php_variant_mod(const _left: variant; const _right: variant): variant; begin end;
function php_variant_mul(const _left: variant; const _right: variant): variant; begin end;
function php_variant_neg(const _variant: variant): variant; begin end;
function php_variant_not(const _variant: variant): variant; begin end;
function php_variant_or(const _left: variant; const _right: variant): variant; begin end;
function php_variant_pow(const _left: variant; const _right: variant): variant; begin end;
function php_variant_round(const _variant: variant; const _decimals: integer): variant; begin end;
procedure php_variant_set_type(const _variant: variant; const _type: integer); begin end;
procedure php_variant_set(const _variant: variant; const _value: variant); begin end;
function php_variant_sub(const _left: variant; const _right: variant): variant; begin end;
function php_variant_xor(const _left: variant; const _right: variant): variant; begin end;
function php_win32_ps_list_procs(): variant; begin end;
function php_win32_ps_stat_mem(): variant; begin end;
function php_win32_ps_stat_proc(const _pid: integer): variant; begin end;
function php_win32_continue_service(const _servicename: string; const _machine: string): integer; begin end;
function php_win32_create_service(const _details: variant; const _machine: string): variant; begin end;
function php_win32_delete_service(const _servicename: string; const _machine: string): variant; begin end;
function php_win32_get_last_control_message(): integer; begin end;
function php_win32_pause_service(const _servicename: string; const _machine: string): integer; begin end;
function php_win32_query_service_status(const _servicename: string; const _machine: string): variant; begin end;
function php_win32_set_service_status(const _status: integer; const _checkpoint: integer): boolean; begin end;
function php_win32_start_service_ctrl_dispatcher(const _name: string): variant; begin end;
function php_win32_start_service(const _servicename: string; const _machine: string): integer; begin end;
function php_win32_stop_service(const _servicename: string; const _machine: string): integer; begin end;
function php_isId(): boolean; begin end;
procedure php_appendData(const _data: string); begin end;
procedure php_deleteData(const _offset: integer; const _count: integer); begin end;
procedure php_insertData(const _offset: integer; const _data: string); begin end;
procedure php_replaceData(const _offset: integer; const _count: integer; const _data: string); begin end;
function php_substringData(const _offset: integer; const _count: integer): string; begin end;
function php_load(const _filename: string; const _options: integer): variant; begin end;
function php_loadHTML(const _source: string; const _options: integer): boolean; begin end;
function php_loadHTMLFile(const _filename: string; const _options: integer): boolean; begin end;
function php_loadXML(const _source: string; const _options: integer): variant; begin end;
procedure php_normalizeDocument(); begin end;
function php_registerNodeClass(const _baseclass: string; const _extendedclass: string): boolean; begin end;
function php_relaxNGValidate(const _filename: string): boolean; begin end;
function php_relaxNGValidateSource(const _source: string): boolean; begin end;
function php_saveHTML(const _node: variant): string; begin end;
function php_saveHTMLFile(const _filename: string): integer; begin end;
function php_saveXML(const _node: variant; const _options: integer): string; begin end;
function php_schemaValidate(const _filename: string; const _flags: integer): boolean; begin end;
function php_schemaValidateSource(const _source: string; const _flags: integer): boolean; begin end;
function php_validate(): boolean; begin end;
function php_xinclude(const _options: integer): integer; begin end;
function php_appendXML(const _data: string): boolean; begin end;
function php_getAttribute(const _name: string): string; begin end;
function php_getAttributeNS(const _namespaceURI: string; const _localName: string): string; begin end;
function php_hasAttribute(const _name: string): boolean; begin end;
function php_hasAttributeNS(const _namespaceURI: string; const _localName: string): boolean; begin end;
function php_removeAttribute(const _name: string): boolean; begin end;
function php_removeAttributeNode(const _oldnode: variant): boolean; begin end;
function php_removeAttributeNS(const _namespaceURI: string; const _localName: string): boolean; begin end;
procedure php_setAttributeNS(const _namespaceURI: string; const _qualifiedName: string; const _value: string); begin end;
procedure php_setIdAttribute(const _name: string; const _isId: boolean); begin end;
procedure php_setIdAttributeNode(const _attr: variant; const _isId: boolean); begin end;
procedure php_setIdAttributeNS(const _namespaceURI: string; const _localName: string; const _isId: boolean); begin end;
function php_hasFeature(const _feature: string; const _version: string): boolean; begin end;
function php_C14N(const _exclusive: boolean; const _with_comments: boolean; const _xpath: variant; const _ns_prefixes: variant): string; begin end;
function php_C14NFile(const _uri: string; const _exclusive: boolean; const _with_comments: boolean; const _xpath: variant; const _ns_prefixes: variant): integer; begin end;
function php_getLineNo(): integer; begin end;
function php_getNodePath(): string; begin end;
function php_hasAttributes(): boolean; begin end;
function php_hasChildNodes(): boolean; begin end;
function php_isDefaultNamespace(const _namespaceURI: string): boolean; begin end;
function php_isSameNode(const _node: variant): boolean; begin end;
function php_isSupported(const _feature: string; const _version: string): boolean; begin end;
function php_lookupNamespaceURI(const _prefix: string): string; begin end;
function php_lookupPrefix(const _namespaceURI: string): string; begin end;
procedure php_normalize(); begin end;
function php_isWhitespaceInElementContent(): boolean; begin end;
function php_evaluate(const _expression: string; const _contextnode: variant; const _registerNodeNS: boolean): variant; begin end;
function php_registerNamespace(const _prefix: string; const _namespaceURI: string): boolean; begin end;
procedure php_registerPhpFunctions(const _restrict: variant); begin end;
procedure php_libxml_clear_errors(); begin end;
function php_libxml_disable_entity_loader(const _disable: boolean): boolean; begin end;
function php_libxml_get_errors(): variant; begin end;
procedure php_libxml_set_external_entity_loader(const _resolver_function: variant); begin end;
procedure php_libxml_set_streams_context(const _streams_context: variant); begin end;
function php_libxml_use_internal_errors(const _use_errors: boolean): boolean; begin end;
procedure php_addAttribute(const _name: string; const _value: string; const _namespace: string); begin end;
function php_asXML(const _filename: string): variant; begin end;
function php_getDocNamespaces(const _recursive: boolean; const _from_root: boolean): variant; begin end;
function php_getNamespaces(const _recursive: boolean): variant; begin end;
function php_registerXPathNamespace(const _prefix: string; const _ns: string): boolean; begin end;
function php_xpath(const _path: string): variant; begin end;
function php_wddx_add_vars(const _packet_id: variant; const _var_name: variant): boolean; begin end;
function php_wddx_deserialize(const _packet: string): variant; begin end;
function php_wddx_packet_end(const _packet_id: variant): string; begin end;
function php_wddx_packet_start(const _comment: string): variant; begin end;
function php_wddx_serialize_value(const _var: variant; const _comment: string): string; begin end;
function php_wddx_serialize_vars(const _var_name: variant): string; begin end;
function php_diff(const _from: variant; const _to: variant): variant; begin end;
function php_merge(const _src: variant; const _diff: variant): variant; begin end;
function php_diff(const _from: string; const _to: string): string; begin end;
function php_merge(const _src: string; const _diff: string): string; begin end;
function php_utf8_decode(const _data: string): string; begin end;
function php_utf8_encode(const _data: string): string; begin end;
function php_xml_error_string(const _code: integer): string; begin end;
function php_xml_get_current_byte_index(const _parser: variant): integer; begin end;
function php_xml_get_current_column_number(const _parser: variant): integer; begin end;
function php_xml_get_current_line_number(const _parser: variant): integer; begin end;
function php_xml_get_error_code(const _parser: variant): integer; begin end;
function php_xml_parse_into_struct(const _parser: variant; const _data: string; var _values: variant; var _index: variant): integer; begin end;
function php_xml_parse(const _parser: variant; const _data: string; const _is_final: boolean): integer; begin end;
function php_xml_parser_create_ns(const _encoding: string; const _separator: string): variant; begin end;
function php_xml_parser_create(const _encoding: string): variant; begin end;
function php_xml_parser_free(const _parser: variant): boolean; begin end;
function php_xml_parser_get_option(const _parser: variant; const _option: integer): variant; begin end;
function php_xml_parser_set_option(const _parser: variant; const _option: integer; const _value: variant): boolean; begin end;
function php_xml_set_character_data_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_xml_set_default_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_xml_set_element_handler(const _parser: variant; const _start_element_handler: variant; const _end_element_handler: variant): boolean; begin end;
function php_xml_set_end_namespace_decl_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_xml_set_external_entity_ref_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_xml_set_notation_decl_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_xml_set_object(const _parser: variant; var _object: variant): boolean; begin end;
function php_xml_set_processing_instruction_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_xml_set_start_namespace_decl_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_xml_set_unparsed_entity_decl_handler(const _parser: variant; const _handler: variant): boolean; begin end;
function php_getAttributeNo(const _index: integer): string; begin end;
function php_getParserProperty(const _property: integer): boolean; begin end;
function php_isValid(): boolean; begin end;
function php_lookupNamespace(const _prefix: string): string; begin end;
function php_moveToAttribute(const _name: string): boolean; begin end;
function php_moveToAttributeNo(const _index: integer): boolean; begin end;
function php_moveToAttributeNs(const _localName: string; const _namespaceURI: string): boolean; begin end;
function php_moveToElement(): boolean; begin end;
function php_moveToFirstAttribute(): boolean; begin end;
function php_moveToNextAttribute(): boolean; begin end;
function php_next(const _localname: string): boolean; begin end;
function php_open(const _URI: string; const _encoding: string; const _options: integer): boolean; begin end;
function php_read(): boolean; begin end;
function php_readInnerXML(): string; begin end;
function php_readOuterXML(): string; begin end;
function php_readString(): string; begin end;
function php_setParserProperty(const _property: integer; const _value: boolean): boolean; begin end;
function php_setRelaxNGSchema(const _filename: string): boolean; begin end;
function php_setRelaxNGSchemaSource(const _source: string): boolean; begin end;
function php_setSchema(const _filename: string): boolean; begin end;
function php_xml(const _source: string; const _encoding: string; const _options: integer): boolean; begin end;
function php_xmlwriter_end_attribute(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_cdata(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_comment(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_document(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_dtd_attlist(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_dtd_element(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_dtd_entity(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_dtd(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_element(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_end_pi(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_flush(const _xmlwriter: variant; const _empty: boolean): variant; begin end;
function php_xmlwriter_full_end_element(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_open_memory(): variant; begin end;
function php_xmlwriter_open_uri(const _uri: string): variant; begin end;
function php_xmlwriter_output_memory(const _xmlwriter: variant; const _flush: boolean): string; begin end;
function php_xmlwriter_set_indent_string(const _xmlwriter: variant; const _indentString: string): boolean; begin end;
function php_xmlwriter_set_indent(const _xmlwriter: variant; const _indent: boolean): boolean; begin end;
function php_xmlwriter_start_attribute_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string): boolean; begin end;
function php_xmlwriter_start_attribute(const _xmlwriter: variant; const _name: string): boolean; begin end;
function php_xmlwriter_start_cdata(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_start_comment(const _xmlwriter: variant): boolean; begin end;
function php_xmlwriter_start_document(const _xmlwriter: variant; const _version: string; const _encoding: string; const _standalone: string): boolean; begin end;
function php_xmlwriter_start_dtd_attlist(const _xmlwriter: variant; const _name: string): boolean; begin end;
function php_xmlwriter_start_dtd_element(const _xmlwriter: variant; const _qualifiedName: string): boolean; begin end;
function php_xmlwriter_start_dtd_entity(const _xmlwriter: variant; const _name: string; const _isparam: boolean): boolean; begin end;
function php_xmlwriter_start_dtd(const _xmlwriter: variant; const _qualifiedName: string; const _publicId: string; const _systemId: string): boolean; begin end;
function php_xmlwriter_start_element_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string): boolean; begin end;
function php_xmlwriter_start_element(const _xmlwriter: variant; const _name: string): boolean; begin end;
function php_xmlwriter_start_pi(const _xmlwriter: variant; const _target: string): boolean; begin end;
function php_xmlwriter_text(const _xmlwriter: variant; const _content: string): boolean; begin end;
function php_xmlwriter_write_attribute_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string; const _content: string): boolean; begin end;
function php_xmlwriter_write_attribute(const _xmlwriter: variant; const _name: string; const _value: string): boolean; begin end;
function php_xmlwriter_write_cdata(const _xmlwriter: variant; const _content: string): boolean; begin end;
function php_xmlwriter_write_comment(const _xmlwriter: variant; const _content: string): boolean; begin end;
function php_xmlwriter_write_dtd_attlist(const _xmlwriter: variant; const _name: string; const _content: string): boolean; begin end;
function php_xmlwriter_write_dtd_element(const _xmlwriter: variant; const _name: string; const _content: string): boolean; begin end;
function php_xmlwriter_write_dtd_entity(const _xmlwriter: variant; const _name: string; const _content: string; const _pe: boolean; const _pubid: string; const _sysid: string; const _ndataid: string): boolean; begin end;
function php_xmlwriter_write_dtd(const _xmlwriter: variant; const _name: string; const _publicId: string; const _systemId: string; const _subset: string): boolean; begin end;
function php_xmlwriter_write_element_ns(const _xmlwriter: variant; const _prefix: string; const _name: string; const _uri: string; const _content: string): boolean; begin end;
function php_xmlwriter_write_element(const _xmlwriter: variant; const _name: string; const _content: string): boolean; begin end;
function php_xmlwriter_write_pi(const _xmlwriter: variant; const _target: string; const _content: string): boolean; begin end;
function php_xmlwriter_write_raw(const _xmlwriter: variant; const _content: string): boolean; begin end;
function php_getParameter(const _namespaceURI: string; const _localName: string): string; begin end;
function php_hasExsltSupport(): boolean; begin end;
function php_importStylesheet(const _stylesheet: variant): boolean; begin end;
function php_removeParameter(const _namespaceURI: string; const _localName: string): boolean; begin end;
function php_setParameter(const _namespace: string; const _name: string; const _value: string): boolean; begin end;
function php_setProfiling(const _filename: string): boolean; begin end;
function php_transformToURI(const _doc: variant; const _uri: string): integer; begin end;
function php_transformToXML(const _doc: variant): string; begin end;
function php_getValue(): integer; begin end;
procedure php_resetValue(); begin end;
function php_getMeta(const _attribute: integer): variant; begin end;
procedure php_setCounterClass(const _name: string); begin end;
function php_counter_get(): integer; begin end;
procedure php_counter_bump(const _offset: integer); begin end;
procedure php_counter_reset(); begin end;
function php_counter_create(const _name: string; const _initial_value: integer; const _flags: integer): variant; begin end;
function php_counter_get_value(const _counter: variant): integer; begin end;
procedure php_counter_bump_value(const _counter: variant; const _offset: integer); begin end;
procedure php_counter_reset_value(const _counter: variant); begin end;
function php_counter_get_meta(const _counter: variant; const _attribute: integer): variant; begin end;

{$ENDIF}


end.

   "Lazarus Android Module Wizard"

	!!Please, for complete [UPDATED !!] reference read "readme.txt"       
    
	Version 0.6 - rev. 09 - 20 December 2014 -				

	Lazarus Android Module Wizard: Form Designer and Components development model! 		
	"A wizard to create JNI Android loadable module (.so) in Lazarus/Free Pascal using 
	[datamodule like] Form Designer and Components!" 

	Author: Jose Marques Pessoa : jmpessoa__hotmail_com

		https://github.com/jmpessoa/lazandroidmodulewizard
		http://forum.lazarus.freepascal.org/index.php/topic,21919.0.html


** Tutorial: JNI Bridge Component Create ** 
  

1. Component Model:  

   --- jControl: No GUI Control      

   --- jVisualControl: GUI Control

2. Creating a new component 

   2.1. Start a New [Eclipse/Ant] Project as usual;
   
   2.2. From [Right Top ShellTreeView] Double Clicked "Controls.java" as usual;
     
   2.3. From [Java JNI Source Tab] Right Click the "Controls.java" code at some point before this line:
         
        --------------------------------------------------------------------------------------------  

        "public class Controls {"  // <<------------

        --------------------------------------------------------------------------------------------

   2.4. Insert a new jControl/jVisualControl wrapper class Template; 

        warinng: You can also use [demo] AppTryCode3 to produce java class warapper!

        Ref. image: https://jmpessoa.opendrive.com/files?Ml80ODAyNjQ4Ml9HVFl3Tg

        /* jControl template :: example: */ 

	class jMyControl /*extends ...*/ {

	  private long     pascalObj = 0;      // Pascal Object
    	  private Controls controls  = null;   // Control Class for events handles
          private Context  context   = null;

          public jMyControl(Controls contrls, long Self) { //Add more params if needed [preferentially init your new param name with "_", ex: int _flag, String _hello]!
            //super(contrls.activity);
            context   = contrls.activity;
            pascalObj = Self;
            controls  = contrls;
          }

          public void jFree() {
            //free local objects...
          }


         //write others [public] methods code here......
         //Please, preferentially init your new param name with "_", ex: int _flag, String _hello

       }

   2.5. Rename [extends] the new class, write some custom public java methods, etc... 

        Warning: please, preferentially init your news params names with "_", ex: int _flag, String _hello ...


        /* jControl template example: */ 

	class jMyHello /*extends ...*/ {         

	  private long     pascalObj = 0;      // Pascal Object
    	  private Controls controls  = null;   // Control Class for events
          private Context  context   = null;

          private int mFlag;           // <<----- my custom field
          private String mHello;       // <<----- my custom field 
          private int[] mBufArray;     // <<----- my custom field 

          public jMyHello(Controls contrls, long Self, int _flag, String _hello) { //Add more params if needed [preferentially init your new param name with "_", ex: int _flag, String _hello]!

            //super(contrls.activity);

            context   = contrls.activity;
            pascalObj = Self;
            controls  = contrls;

            mFlag = _flag;  
            mhello = _hello;
            mBufArray = nul;

          }


          public void jFree() {
            //free local objects...
             mBufArray = nul;
          }


         //write others [public] methods code here......      <<----- customs methods

         //Warning: please, preferentially init your news params names with "_", ex: int _flag, String _hello ...


          public void SetFlag(int _flag) {                   // <<----- my custom method
             mFlag =  _flag;   
          }

          public int GetFlag {                               // <<----- my custom method
             return mFlag;   
          }

          public void SetHello(String _hello) {             // <<----- my custom method
             mHello =  _hello;   
          }

          public String getHello {                           // <<----- my custom method
             return mHello;   
          }


          public int[] GetSumIntArray(int[] _v1, int[] _v2, int _size) {    // <<----- my custom method

             mBufArray[] = new int[_size];

             for (int i=0, i < size, i++) {
                mBufArray[i] = _v1[i] + _v2[i];
             }
  
             return mBufArray;
          }


          public void ShowHello() {                                        // <<----- my custom method

    	     Toast.makeText(controls.activity, mHello, Toast.LENGTH_SHORT).show();	

          }


       }
 

   2.6. Select all the new class code and Right Click ... ;

   2.7. From [Popup Menu] Select "Write [Draft] Pascal jControl/jVisualControl Interface": Select [jControl]. You got it!;
        
        Ref. image: https://jmpessoa.opendrive.com/files?Ml80ODkwNjk0Nl9xU0hDOA

   2.8. From Dialog "Changing Controls.java": Yes [or... No] 
        
        Ref. image: https://jmpessoa.opendrive.com/files?Ml80ODAyNjU1OV9hd0FHWg   

   2.9. From [Pascal JNI Interface Tab] Right Click Pascal code and from popup menu Select "Register Component...";

        Ref. image: https://jmpessoa.opendrive.com/files?Ml80ODAyNjU4Nl9XM3hTOQ

        WARNING: Mac users: Please, you must copy the console app "lazres" [lazarus/tools] to the folder /LazAndroidWizard; 
                 Linux user: Thanks to  Stephano there is a "lazres" in /LazAndroidWizard 

   2.10. From [Dialog]: Open a 16x16 PNG icon file;

   2.11. From [Dialog]: Open a "register_*.pas" file (ex. "register_extra.pas"); **

        ref image: https://jmpessoa.opendrive.com/files?Ml80ODAyNjY1M19EamR2bQ

   2.12. Ok. You got you DRAFT pascal component stuff! Please, look in /LazAndroidWizard directory:

         
        :: myhello.pas           <--- open and fix/complete the pascal code with your others events/properties/methods/variables! [appendix below!]
        :: jmyhello_icon.lrs     <--- new icon resource
        :: register_extras.pas   <--- updated! The new component was included there!


   2.13. From [Lazarus IDE Menu]: Package -> Open Package File (*.lpk) --> "tfpandroidbridge_pack.pas" [from /LazAndroidWizard folder];

   2.14. From [Package Wizard]: "Compile" and after "Use->Install";
   
   2.15. Please, Wait Lazarus re-building...; 

   2.16. Look for the NEW Component on "Android Bridges Extra" palette!;

   ** You can select "register_template.pas" to write a custom register file, 
      but so you must insert it to  "tfpandroidbridge_pack.lpk".


Thank you!

jmpessoa_at_hotmail.com


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

appendix: myhello.pas



unit myhello;
 
{$mode delphi}
 
interface
 
uses
  Classes, SysUtils, And_jni, And_jni_Bridge, Laz_And_Controls;
 
type
 
{Draft Component code by "Lazarus Android Module Wizard" [4/14/2014 14:09:07]}
 
 
{jControl template}

jMyHello = class(jControl)
 private
    Fflag: integer; Fhello: string;
 
 protected
 
 public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Init; override;
    function jCreate( _flag: integer; _hello: string): jObject;
    procedure jFree();
    procedure SetFlag(_flag: integer);
    function GetFlag(): integer;
    procedure SetHello(_hello: string);
    function GetHello(): string;
    function GetSumIntArray(var _v1: TArrayOfInteger; var _v2: TArrayOfInteger; _size: integer): TArrayOfInteger;
    procedure ShowHello();

 published
 
end;
 
function jMyHello_jCreate(env: PJNIEnv; this: JObject;Self: int64; _flag: integer; _hello: string): jObject;
procedure jMyHello_jFree(env: PJNIEnv; this: JObject; _jmyhello: JObject);
procedure jMyHello_SetFlag(env: PJNIEnv; this: JObject; _jmyhello: JObject; _flag: integer);
function jMyHello_GetFlag(env: PJNIEnv; this: JObject; _jmyhello: JObject): integer;
procedure jMyHello_SetHello(env: PJNIEnv; this: JObject; _jmyhello: JObject; _hello: string);
function jMyHello_GetHello(env: PJNIEnv; this: JObject; _jmyhello: JObject): string;
function jMyHello_GetSumIntArray(env: PJNIEnv; this: JObject; _jmyhello: JObject; var _v1: TArrayOfInteger; var _v2: TArrayOfInteger; _size: integer): TArrayOfInteger;
procedure jMyHello_ShowHello(env: PJNIEnv; this: JObject; _jmyhello: JObject);

 
implementation
  
{---------  jMyHello  --------------}
 
constructor jMyHello.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  //your code here....
end;
 
destructor jMyHello.Destroy;
begin
  if not (csDesigning in ComponentState) then
  begin
    if jForm(Owner).App <> nil then
    begin
      if jForm(Owner).App.Initialized then
      begin
        if FjObject <> nil then
        begin
           jFree();
           FjObject:= nil;
        end;
      end;
    end;
  end;
  //you others free code here...'
  inherited Destroy;
end;
 
procedure jMyHello.Init;
begin
  if FInitialized  then Exit;
  inherited Init;
  FjObject:= jCreate(Fflag ,Fhello);
  FInitialized:= True;
  //your code here
end;
  
 
function jMyHello.jCreate( _flag: integer; _hello: string): jObject;
begin
   Result:= jMyHello_jCreate(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis , int64(Self) ,_flag ,_hello);
end;
 
procedure jMyHello.jFree();
begin
  //in designing component state: set value here...
  if FInitialized then
     jMyHello_jFree(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;
 
procedure jMyHello.SetFlag(_flag: integer);
begin
  //in designing component state: set value here...
  if FInitialized then
     jMyHello_SetFlag(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _flag);
end;
 
function jMyHello.GetFlag(): integer;
begin
  //in designing component state: result value here...
  if FInitialized then
   Result:= jMyHello_GetFlag(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;
 
procedure jMyHello.SetHello(_hello: string);
begin
  //in designing component state: set value here...
  if FInitialized then
     jMyHello_SetHello(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _hello);
end;
 
function jMyHello.GetHello(): string;
begin
  //in designing component state: result value here...
  if FInitialized then
   Result:= jMyHello_GetHello(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;
 
function jMyHello.GetSumIntArray(var _v1: TArrayOfInteger; var _v2: TArrayOfInteger; _size: integer): TArrayOfInteger;
begin
  //in designing component state: result value here...
  if FInitialized then
   Result:= jMyHello_GetSumIntArray(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject, _v1 ,_v2 ,_size);
end;
 
procedure jMyHello.ShowHello();
begin
  //in designing component state: set value here...
  if FInitialized then
     jMyHello_ShowHello(jForm(Owner).App.Jni.jEnv, jForm(Owner).App.Jni.jThis, FjObject);
end;
 
{-------- jMyHello_JNI_Bridge ----------}
 
function jMyHello_jCreate(env: PJNIEnv; this: JObject;Self: int64; _flag: integer; _hello: string): jObject;
var
  jParams: array[0..2] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[1].j:= Self;
  jParams[2].i:= _flag;
  jParams[3].l:= env^.NewStringUTF(env, PChar(_hello));;
  jCls:= Get_gjClass(env);
  jMethod:= env^.GetMethodID(env, jCls, 'jMyHello_jCreate', '(JILjava/lang/String;)Ljava/lang/Object;'); 
  Result:= env^.CallObjectMethodA(env, this, jMethod, @jParams);
  Result:= env^.NewGlobalRef(env, Result);
env^.DeleteLocalRef(env,jParams[3].l);
end;
 
(*
//Please, you need insert: 
  
   public java.lang.Object jMyHello_jCreate(long Self, int _flag, String _hello) {
      return (java.lang.Object)(new jMyHello(this,Self,_flag,_hello));
   }
  
//to end of "public class Controls" in "Controls.java"
*)
 

procedure jMyHello_jFree(env: PJNIEnv; this: JObject; _jmyhello: JObject);
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmyhello);
  jMethod:= env^.GetMethodID(env, jCls, 'jFree', '()V'); 
  env^.CallVoidMethod(env, _jmyhello, jMethod);
end;
 

procedure jMyHello_SetFlag(env: PJNIEnv; this: JObject; _jmyhello: JObject; _flag: integer);
var
  jParams: array[0..0] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[0].i:= _flag;
  jCls:= env^.GetObjectClass(env, _jmyhello);
  jMethod:= env^.GetMethodID(env, jCls, 'SetFlag', '(I)V'); 
  env^.CallVoidMethodA(env, _jmyhello, jMethod, @jParams);
end;
 

function jMyHello_GetFlag(env: PJNIEnv; this: JObject; _jmyhello: JObject): integer;
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmyhello);
  jMethod:= env^.GetMethodID(env, jCls, 'GetFlag', '()I'); 
  Result:= env^.CallIntMethod(env, _jmyhello, jMethod);
end;
 

procedure jMyHello_SetHello(env: PJNIEnv; this: JObject; _jmyhello: JObject; _hello: string);
var
  jParams: array[0..0] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jParams[0].l:= env^.NewStringUTF(env, PChar(_hello));
  jCls:= env^.GetObjectClass(env, _jmyhello);
  jMethod:= env^.GetMethodID(env, jCls, 'SetHello', '(Ljava/lang/String;)V'); 
  env^.CallVoidMethodA(env, _jmyhello, jMethod, @jParams);
env^.DeleteLocalRef(env,jParams[0].l);
end;
 

function jMyHello_GetHello(env: PJNIEnv; this: JObject; _jmyhello: JObject): string;
var
  jStr: JString;
  jBoo: JBoolean;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmyhello);
  jMethod:= env^.GetMethodID(env, jCls, 'GetHello', '()Ljava/lang/String;'); 
  jStr:= env^.CallObjectMethod(env, _jmyhello, jMethod);
  case jStr = nil of
     True : Result:= '';
     False: begin
              jBoo:= JNI_False;
              Result:= string( env^.GetStringUTFChars(env, jStr, @jBoo));
            end;
  end;
end;
 

function jMyHello_GetSumIntArray(env: PJNIEnv; this: JObject; _jmyhello: JObject; var _v1: TArrayOfInteger; var _v2: TArrayOfInteger; _size: integer): TArrayOfInteger;
var
  resultSize: integer;
  jResultArray: jObject;
  jParams: array[0..2] of jValue;
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
  newSize0: integer;
  jNewArray0: jObject=nil;
  newSize1: integer;
  jNewArray1: jObject=nil;
begin
//newSize0:= ?
 jNewArray0:= env^.NewIntArray(env, newSize0);  // allocate
 env^.SetIntArrayRegion(env, jNewArray0, 0 , newSize0, @_v1[0] {source});
  jParams[0].l:= jNewArray0;
//newSize1:= ?
 jNewArray1:= env^.NewIntArray(env, newSize1);  // allocate
 env^.SetIntArrayRegion(env, jNewArray1, 0 , newSize1, @_v2[0] {source});
  jParams[1].l:= jNewArray1;
  jParams[2].i:= _size;
  jCls:= env^.GetObjectClass(env, _jmyhello);
  jMethod:= env^.GetMethodID(env, jCls, 'GetSumIntArray', '([I[II)[I'); 
  jResultArray:= env^.CallObjectMethodA(env, _jmyhello, jMethod,  @jParams);
  resultSize:= env^.GetArrayLength(env, jResultArray);
  SetLength(Result, resultSize);
  env^.GetIntArrayRegion(env, jResultArray, 0, resultSize, @Result[0] {target});
env^.DeleteLocalRef(env,jParams[0].l);
  env^.DeleteLocalRef(env,jParams[1].l);
end;
 

procedure jMyHello_ShowHello(env: PJNIEnv; this: JObject; _jmyhello: JObject);
var
  jMethod: jMethodID=nil;
  jCls: jClass=nil;
begin
  jCls:= env^.GetObjectClass(env, _jmyhello);
  jMethod:= env^.GetMethodID(env, jCls, 'ShowHello', '()V'); 
  env^.CallVoidMethod(env, _jmyhello, jMethod);
end;
 

end.